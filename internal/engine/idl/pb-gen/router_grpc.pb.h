// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router_grpc.proto

#ifndef PROTOBUF_INCLUDED_router_5fgrpc_2eproto
#define PROTOBUF_INCLUDED_router_5fgrpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "data_model.pb.h"
#include "errors.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_router_5fgrpc_2eproto 

namespace protobuf_router_5fgrpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[30];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_router_5fgrpc_2eproto
class BulkRequest;
class BulkRequestDefaultTypeInternal;
extern BulkRequestDefaultTypeInternal _BulkRequest_default_instance_;
class BulkResponse;
class BulkResponseDefaultTypeInternal;
extern BulkResponseDefaultTypeInternal _BulkResponse_default_instance_;
class DelByQueryeResponse;
class DelByQueryeResponseDefaultTypeInternal;
extern DelByQueryeResponseDefaultTypeInternal _DelByQueryeResponse_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class FlushRequest;
class FlushRequestDefaultTypeInternal;
extern FlushRequestDefaultTypeInternal _FlushRequest_default_instance_;
class FlushResponse;
class FlushResponseDefaultTypeInternal;
extern FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
class ForceMergeRequest;
class ForceMergeRequestDefaultTypeInternal;
extern ForceMergeRequestDefaultTypeInternal _ForceMergeRequest_default_instance_;
class ForceMergeResponse;
class ForceMergeResponseDefaultTypeInternal;
extern ForceMergeResponseDefaultTypeInternal _ForceMergeResponse_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class IndexParameters;
class IndexParametersDefaultTypeInternal;
extern IndexParametersDefaultTypeInternal _IndexParameters_default_instance_;
class IndexRequest;
class IndexRequestDefaultTypeInternal;
extern IndexRequestDefaultTypeInternal _IndexRequest_default_instance_;
class IndexResponse;
class IndexResponseDefaultTypeInternal;
extern IndexResponseDefaultTypeInternal _IndexResponse_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryRequest_SortFieldMapEntry_DoNotUse;
class QueryRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal;
extern QueryRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal _QueryRequest_SortFieldMapEntry_DoNotUse_default_instance_;
class RangeFilter;
class RangeFilterDefaultTypeInternal;
extern RangeFilterDefaultTypeInternal _RangeFilter_default_instance_;
class RequestHead;
class RequestHeadDefaultTypeInternal;
extern RequestHeadDefaultTypeInternal _RequestHead_default_instance_;
class RequestHead_ParamsEntry_DoNotUse;
class RequestHead_ParamsEntry_DoNotUseDefaultTypeInternal;
extern RequestHead_ParamsEntry_DoNotUseDefaultTypeInternal _RequestHead_ParamsEntry_DoNotUse_default_instance_;
class ResponseHead;
class ResponseHeadDefaultTypeInternal;
extern ResponseHeadDefaultTypeInternal _ResponseHead_default_instance_;
class ResponseHead_ParamsEntry_DoNotUse;
class ResponseHead_ParamsEntry_DoNotUseDefaultTypeInternal;
extern ResponseHead_ParamsEntry_DoNotUseDefaultTypeInternal _ResponseHead_ParamsEntry_DoNotUse_default_instance_;
class ResultItem;
class ResultItemDefaultTypeInternal;
extern ResultItemDefaultTypeInternal _ResultItem_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchRequest_SortFieldMapEntry_DoNotUse;
class SearchRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal;
extern SearchRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal _SearchRequest_SortFieldMapEntry_DoNotUse_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResult;
class SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
class SearchStatus;
class SearchStatusDefaultTypeInternal;
extern SearchStatusDefaultTypeInternal _SearchStatus_default_instance_;
class SortField;
class SortFieldDefaultTypeInternal;
extern SortFieldDefaultTypeInternal _SortField_default_instance_;
class TermFilter;
class TermFilterDefaultTypeInternal;
extern TermFilterDefaultTypeInternal _TermFilter_default_instance_;
class VectorQuery;
class VectorQueryDefaultTypeInternal;
extern VectorQueryDefaultTypeInternal _VectorQuery_default_instance_;
namespace google {
namespace protobuf {
template<> ::BulkRequest* Arena::CreateMaybeMessage<::BulkRequest>(Arena*);
template<> ::BulkResponse* Arena::CreateMaybeMessage<::BulkResponse>(Arena*);
template<> ::DelByQueryeResponse* Arena::CreateMaybeMessage<::DelByQueryeResponse>(Arena*);
template<> ::DeleteRequest* Arena::CreateMaybeMessage<::DeleteRequest>(Arena*);
template<> ::DeleteResponse* Arena::CreateMaybeMessage<::DeleteResponse>(Arena*);
template<> ::FlushRequest* Arena::CreateMaybeMessage<::FlushRequest>(Arena*);
template<> ::FlushResponse* Arena::CreateMaybeMessage<::FlushResponse>(Arena*);
template<> ::ForceMergeRequest* Arena::CreateMaybeMessage<::ForceMergeRequest>(Arena*);
template<> ::ForceMergeResponse* Arena::CreateMaybeMessage<::ForceMergeResponse>(Arena*);
template<> ::GetRequest* Arena::CreateMaybeMessage<::GetRequest>(Arena*);
template<> ::GetResponse* Arena::CreateMaybeMessage<::GetResponse>(Arena*);
template<> ::IndexParameters* Arena::CreateMaybeMessage<::IndexParameters>(Arena*);
template<> ::IndexRequest* Arena::CreateMaybeMessage<::IndexRequest>(Arena*);
template<> ::IndexResponse* Arena::CreateMaybeMessage<::IndexResponse>(Arena*);
template<> ::QueryRequest* Arena::CreateMaybeMessage<::QueryRequest>(Arena*);
template<> ::QueryRequest_SortFieldMapEntry_DoNotUse* Arena::CreateMaybeMessage<::QueryRequest_SortFieldMapEntry_DoNotUse>(Arena*);
template<> ::RangeFilter* Arena::CreateMaybeMessage<::RangeFilter>(Arena*);
template<> ::RequestHead* Arena::CreateMaybeMessage<::RequestHead>(Arena*);
template<> ::RequestHead_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::RequestHead_ParamsEntry_DoNotUse>(Arena*);
template<> ::ResponseHead* Arena::CreateMaybeMessage<::ResponseHead>(Arena*);
template<> ::ResponseHead_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::ResponseHead_ParamsEntry_DoNotUse>(Arena*);
template<> ::ResultItem* Arena::CreateMaybeMessage<::ResultItem>(Arena*);
template<> ::SearchRequest* Arena::CreateMaybeMessage<::SearchRequest>(Arena*);
template<> ::SearchRequest_SortFieldMapEntry_DoNotUse* Arena::CreateMaybeMessage<::SearchRequest_SortFieldMapEntry_DoNotUse>(Arena*);
template<> ::SearchResponse* Arena::CreateMaybeMessage<::SearchResponse>(Arena*);
template<> ::SearchResult* Arena::CreateMaybeMessage<::SearchResult>(Arena*);
template<> ::SearchStatus* Arena::CreateMaybeMessage<::SearchStatus>(Arena*);
template<> ::SortField* Arena::CreateMaybeMessage<::SortField>(Arena*);
template<> ::TermFilter* Arena::CreateMaybeMessage<::TermFilter>(Arena*);
template<> ::VectorQuery* Arena::CreateMaybeMessage<::VectorQuery>(Arena*);
}  // namespace protobuf
}  // namespace google

enum IndexParameters_DistanceMetricType {
  IndexParameters_DistanceMetricType_InnerProduct = 0,
  IndexParameters_DistanceMetricType_L2 = 1,
  IndexParameters_DistanceMetricType_IndexParameters_DistanceMetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IndexParameters_DistanceMetricType_IndexParameters_DistanceMetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IndexParameters_DistanceMetricType_IsValid(int value);
const IndexParameters_DistanceMetricType IndexParameters_DistanceMetricType_DistanceMetricType_MIN = IndexParameters_DistanceMetricType_InnerProduct;
const IndexParameters_DistanceMetricType IndexParameters_DistanceMetricType_DistanceMetricType_MAX = IndexParameters_DistanceMetricType_L2;
const int IndexParameters_DistanceMetricType_DistanceMetricType_ARRAYSIZE = IndexParameters_DistanceMetricType_DistanceMetricType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexParameters_DistanceMetricType_descriptor();
inline const ::std::string& IndexParameters_DistanceMetricType_Name(IndexParameters_DistanceMetricType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexParameters_DistanceMetricType_descriptor(), value);
}
inline bool IndexParameters_DistanceMetricType_Parse(
    const ::std::string& name, IndexParameters_DistanceMetricType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexParameters_DistanceMetricType>(
    IndexParameters_DistanceMetricType_descriptor(), name, value);
}
// ===================================================================

class RequestHead_ParamsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RequestHead_ParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RequestHead_ParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RequestHead_ParamsEntry_DoNotUse();
  RequestHead_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RequestHead_ParamsEntry_DoNotUse& other);
  static const RequestHead_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RequestHead_ParamsEntry_DoNotUse*>(&_RequestHead_ParamsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RequestHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestHead) */ {
 public:
  RequestHead();
  virtual ~RequestHead();

  RequestHead(const RequestHead& from);

  inline RequestHead& operator=(const RequestHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestHead(RequestHead&& from) noexcept
    : RequestHead() {
    *this = ::std::move(from);
  }

  inline RequestHead& operator=(RequestHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHead* internal_default_instance() {
    return reinterpret_cast<const RequestHead*>(
               &_RequestHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestHead* other);
  friend void swap(RequestHead& a, RequestHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestHead* New() const final {
    return CreateMaybeMessage<RequestHead>(NULL);
  }

  RequestHead* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestHead>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestHead& from);
  void MergeFrom(const RequestHead& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> params = 7;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      params() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_params();

  // string user_name = 2;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string db_name = 4;
  void clear_db_name();
  static const int kDbNameFieldNumber = 4;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // string space_name = 5;
  void clear_space_name();
  static const int kSpaceNameFieldNumber = 5;
  const ::std::string& space_name() const;
  void set_space_name(const ::std::string& value);
  #if LANG_CXX11
  void set_space_name(::std::string&& value);
  #endif
  void set_space_name(const char* value);
  void set_space_name(const char* value, size_t size);
  ::std::string* mutable_space_name();
  ::std::string* release_space_name();
  void set_allocated_space_name(::std::string* space_name);

  // string client_type = 6;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 6;
  const ::std::string& client_type() const;
  void set_client_type(const ::std::string& value);
  #if LANG_CXX11
  void set_client_type(::std::string&& value);
  #endif
  void set_client_type(const char* value);
  void set_client_type(const char* value, size_t size);
  ::std::string* mutable_client_type();
  ::std::string* release_client_type();
  void set_allocated_client_type(::std::string* client_type);

  // int64 time_out_ms = 1;
  void clear_time_out_ms();
  static const int kTimeOutMsFieldNumber = 1;
  ::google::protobuf::int64 time_out_ms() const;
  void set_time_out_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:RequestHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RequestHead_ParamsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr space_name_;
  ::google::protobuf::internal::ArenaStringPtr client_type_;
  ::google::protobuf::int64 time_out_ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseHead_ParamsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ResponseHead_ParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ResponseHead_ParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ResponseHead_ParamsEntry_DoNotUse();
  ResponseHead_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ResponseHead_ParamsEntry_DoNotUse& other);
  static const ResponseHead_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResponseHead_ParamsEntry_DoNotUse*>(&_ResponseHead_ParamsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ResponseHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseHead) */ {
 public:
  ResponseHead();
  virtual ~ResponseHead();

  ResponseHead(const ResponseHead& from);

  inline ResponseHead& operator=(const ResponseHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseHead(ResponseHead&& from) noexcept
    : ResponseHead() {
    *this = ::std::move(from);
  }

  inline ResponseHead& operator=(ResponseHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHead* internal_default_instance() {
    return reinterpret_cast<const ResponseHead*>(
               &_ResponseHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResponseHead* other);
  friend void swap(ResponseHead& a, ResponseHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseHead* New() const final {
    return CreateMaybeMessage<ResponseHead>(NULL);
  }

  ResponseHead* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHead>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseHead& from);
  void MergeFrom(const ResponseHead& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      params() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_params();

  // .Error err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  private:
  const ::Error& _internal_err() const;
  public:
  const ::Error& err() const;
  ::Error* release_err();
  ::Error* mutable_err();
  void set_allocated_err(::Error* err);

  // @@protoc_insertion_point(class_scope:ResponseHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ResponseHead_ParamsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::Error* err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(NULL);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string primary_keys = 2;
  int primary_keys_size() const;
  void clear_primary_keys();
  static const int kPrimaryKeysFieldNumber = 2;
  const ::std::string& primary_keys(int index) const;
  ::std::string* mutable_primary_keys(int index);
  void set_primary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_primary_keys(int index, ::std::string&& value);
  #endif
  void set_primary_keys(int index, const char* value);
  void set_primary_keys(int index, const char* value, size_t size);
  ::std::string* add_primary_keys();
  void add_primary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_primary_keys(::std::string&& value);
  #endif
  void add_primary_keys(const char* value);
  void add_primary_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& primary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_primary_keys();

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // @@protoc_insertion_point(class_scope:GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> primary_keys_;
  ::RequestHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(NULL);
  }

  DeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string primary_keys = 2;
  int primary_keys_size() const;
  void clear_primary_keys();
  static const int kPrimaryKeysFieldNumber = 2;
  const ::std::string& primary_keys(int index) const;
  ::std::string* mutable_primary_keys(int index);
  void set_primary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_primary_keys(int index, ::std::string&& value);
  #endif
  void set_primary_keys(int index, const char* value);
  void set_primary_keys(int index, const char* value, size_t size);
  ::std::string* add_primary_keys();
  void add_primary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_primary_keys(::std::string&& value);
  #endif
  void add_primary_keys(const char* value);
  void add_primary_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& primary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_primary_keys();

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // @@protoc_insertion_point(class_scope:DeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> primary_keys_;
  ::RequestHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BulkRequest) */ {
 public:
  BulkRequest();
  virtual ~BulkRequest();

  BulkRequest(const BulkRequest& from);

  inline BulkRequest& operator=(const BulkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulkRequest(BulkRequest&& from) noexcept
    : BulkRequest() {
    *this = ::std::move(from);
  }

  inline BulkRequest& operator=(BulkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkRequest* internal_default_instance() {
    return reinterpret_cast<const BulkRequest*>(
               &_BulkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BulkRequest* other);
  friend void swap(BulkRequest& a, BulkRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkRequest* New() const final {
    return CreateMaybeMessage<BulkRequest>(NULL);
  }

  BulkRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulkRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulkRequest& from);
  void MergeFrom(const BulkRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Document docs = 2;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 2;
  ::Document* mutable_docs(int index);
  ::google::protobuf::RepeatedPtrField< ::Document >*
      mutable_docs();
  const ::Document& docs(int index) const;
  ::Document* add_docs();
  const ::google::protobuf::RepeatedPtrField< ::Document >&
      docs() const;

  // repeated uint32 partitions = 3;
  int partitions_size() const;
  void clear_partitions();
  static const int kPartitionsFieldNumber = 3;
  ::google::protobuf::uint32 partitions(int index) const;
  void set_partitions(int index, ::google::protobuf::uint32 value);
  void add_partitions(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      partitions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_partitions();

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // @@protoc_insertion_point(class_scope:BulkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Document > docs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > partitions_;
  mutable int _partitions_cached_byte_size_;
  ::RequestHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForceMergeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ForceMergeRequest) */ {
 public:
  ForceMergeRequest();
  virtual ~ForceMergeRequest();

  ForceMergeRequest(const ForceMergeRequest& from);

  inline ForceMergeRequest& operator=(const ForceMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForceMergeRequest(ForceMergeRequest&& from) noexcept
    : ForceMergeRequest() {
    *this = ::std::move(from);
  }

  inline ForceMergeRequest& operator=(ForceMergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForceMergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForceMergeRequest* internal_default_instance() {
    return reinterpret_cast<const ForceMergeRequest*>(
               &_ForceMergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ForceMergeRequest* other);
  friend void swap(ForceMergeRequest& a, ForceMergeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForceMergeRequest* New() const final {
    return CreateMaybeMessage<ForceMergeRequest>(NULL);
  }

  ForceMergeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForceMergeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForceMergeRequest& from);
  void MergeFrom(const ForceMergeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForceMergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // @@protoc_insertion_point(class_scope:ForceMergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::RequestHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlushRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FlushRequest) */ {
 public:
  FlushRequest();
  virtual ~FlushRequest();

  FlushRequest(const FlushRequest& from);

  inline FlushRequest& operator=(const FlushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushRequest(FlushRequest&& from) noexcept
    : FlushRequest() {
    *this = ::std::move(from);
  }

  inline FlushRequest& operator=(FlushRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushRequest* internal_default_instance() {
    return reinterpret_cast<const FlushRequest*>(
               &_FlushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FlushRequest* other);
  friend void swap(FlushRequest& a, FlushRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushRequest* New() const final {
    return CreateMaybeMessage<FlushRequest>(NULL);
  }

  FlushRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushRequest& from);
  void MergeFrom(const FlushRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // @@protoc_insertion_point(class_scope:FlushRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::RequestHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndexRequest) */ {
 public:
  IndexRequest();
  virtual ~IndexRequest();

  IndexRequest(const IndexRequest& from);

  inline IndexRequest& operator=(const IndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexRequest(IndexRequest&& from) noexcept
    : IndexRequest() {
    *this = ::std::move(from);
  }

  inline IndexRequest& operator=(IndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexRequest* internal_default_instance() {
    return reinterpret_cast<const IndexRequest*>(
               &_IndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(IndexRequest* other);
  friend void swap(IndexRequest& a, IndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexRequest* New() const final {
    return CreateMaybeMessage<IndexRequest>(NULL);
  }

  IndexRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndexRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndexRequest& from);
  void MergeFrom(const IndexRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // int64 drop_before_rebuild = 2;
  void clear_drop_before_rebuild();
  static const int kDropBeforeRebuildFieldNumber = 2;
  ::google::protobuf::int64 drop_before_rebuild() const;
  void set_drop_before_rebuild(::google::protobuf::int64 value);

  // int64 limit_cpu = 3;
  void clear_limit_cpu();
  static const int kLimitCpuFieldNumber = 3;
  ::google::protobuf::int64 limit_cpu() const;
  void set_limit_cpu(::google::protobuf::int64 value);

  // int64 describe = 4;
  void clear_describe();
  static const int kDescribeFieldNumber = 4;
  ::google::protobuf::int64 describe() const;
  void set_describe(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:IndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::RequestHead* head_;
  ::google::protobuf::int64 drop_before_rebuild_;
  ::google::protobuf::int64 limit_cpu_;
  ::google::protobuf::int64 describe_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(NULL);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Item items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::Item >*
      mutable_items();
  const ::Item& items(int index) const;
  ::Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::Item >&
      items() const;

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // @@protoc_insertion_point(class_scope:GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Item > items_;
  ::ResponseHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DeleteResponse* other);
  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(NULL);
  }

  DeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Item items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::Item >*
      mutable_items();
  const ::Item& items(int index) const;
  ::Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::Item >&
      items() const;

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // @@protoc_insertion_point(class_scope:DeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Item > items_;
  ::ResponseHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulkResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BulkResponse) */ {
 public:
  BulkResponse();
  virtual ~BulkResponse();

  BulkResponse(const BulkResponse& from);

  inline BulkResponse& operator=(const BulkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulkResponse(BulkResponse&& from) noexcept
    : BulkResponse() {
    *this = ::std::move(from);
  }

  inline BulkResponse& operator=(BulkResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkResponse* internal_default_instance() {
    return reinterpret_cast<const BulkResponse*>(
               &_BulkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(BulkResponse* other);
  friend void swap(BulkResponse& a, BulkResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkResponse* New() const final {
    return CreateMaybeMessage<BulkResponse>(NULL);
  }

  BulkResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulkResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulkResponse& from);
  void MergeFrom(const BulkResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Item items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::Item >*
      mutable_items();
  const ::Item& items(int index) const;
  ::Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::Item >&
      items() const;

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // @@protoc_insertion_point(class_scope:BulkResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Item > items_;
  ::ResponseHead* head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForceMergeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ForceMergeResponse) */ {
 public:
  ForceMergeResponse();
  virtual ~ForceMergeResponse();

  ForceMergeResponse(const ForceMergeResponse& from);

  inline ForceMergeResponse& operator=(const ForceMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForceMergeResponse(ForceMergeResponse&& from) noexcept
    : ForceMergeResponse() {
    *this = ::std::move(from);
  }

  inline ForceMergeResponse& operator=(ForceMergeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForceMergeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForceMergeResponse* internal_default_instance() {
    return reinterpret_cast<const ForceMergeResponse*>(
               &_ForceMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ForceMergeResponse* other);
  friend void swap(ForceMergeResponse& a, ForceMergeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForceMergeResponse* New() const final {
    return CreateMaybeMessage<ForceMergeResponse>(NULL);
  }

  ForceMergeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForceMergeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForceMergeResponse& from);
  void MergeFrom(const ForceMergeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForceMergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // .SearchStatus shards = 2;
  bool has_shards() const;
  void clear_shards();
  static const int kShardsFieldNumber = 2;
  private:
  const ::SearchStatus& _internal_shards() const;
  public:
  const ::SearchStatus& shards() const;
  ::SearchStatus* release_shards();
  ::SearchStatus* mutable_shards();
  void set_allocated_shards(::SearchStatus* shards);

  // @@protoc_insertion_point(class_scope:ForceMergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ResponseHead* head_;
  ::SearchStatus* shards_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelByQueryeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DelByQueryeResponse) */ {
 public:
  DelByQueryeResponse();
  virtual ~DelByQueryeResponse();

  DelByQueryeResponse(const DelByQueryeResponse& from);

  inline DelByQueryeResponse& operator=(const DelByQueryeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelByQueryeResponse(DelByQueryeResponse&& from) noexcept
    : DelByQueryeResponse() {
    *this = ::std::move(from);
  }

  inline DelByQueryeResponse& operator=(DelByQueryeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DelByQueryeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelByQueryeResponse* internal_default_instance() {
    return reinterpret_cast<const DelByQueryeResponse*>(
               &_DelByQueryeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DelByQueryeResponse* other);
  friend void swap(DelByQueryeResponse& a, DelByQueryeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelByQueryeResponse* New() const final {
    return CreateMaybeMessage<DelByQueryeResponse>(NULL);
  }

  DelByQueryeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelByQueryeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelByQueryeResponse& from);
  void MergeFrom(const DelByQueryeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelByQueryeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ids_str = 3;
  int ids_str_size() const;
  void clear_ids_str();
  static const int kIdsStrFieldNumber = 3;
  const ::std::string& ids_str(int index) const;
  ::std::string* mutable_ids_str(int index);
  void set_ids_str(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ids_str(int index, ::std::string&& value);
  #endif
  void set_ids_str(int index, const char* value);
  void set_ids_str(int index, const char* value, size_t size);
  ::std::string* add_ids_str();
  void add_ids_str(const ::std::string& value);
  #if LANG_CXX11
  void add_ids_str(::std::string&& value);
  #endif
  void add_ids_str(const char* value);
  void add_ids_str(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ids_str() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids_str();

  // repeated int64 ids_long = 4;
  int ids_long_size() const;
  void clear_ids_long();
  static const int kIdsLongFieldNumber = 4;
  ::google::protobuf::int64 ids_long(int index) const;
  void set_ids_long(int index, ::google::protobuf::int64 value);
  void add_ids_long(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids_long() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids_long();

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // int32 DelNum = 2;
  void clear_delnum();
  static const int kDelNumFieldNumber = 2;
  ::google::protobuf::int32 delnum() const;
  void set_delnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DelByQueryeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_str_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_long_;
  mutable int _ids_long_cached_byte_size_;
  ::ResponseHead* head_;
  ::google::protobuf::int32 delnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlushResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FlushResponse) */ {
 public:
  FlushResponse();
  virtual ~FlushResponse();

  FlushResponse(const FlushResponse& from);

  inline FlushResponse& operator=(const FlushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushResponse(FlushResponse&& from) noexcept
    : FlushResponse() {
    *this = ::std::move(from);
  }

  inline FlushResponse& operator=(FlushResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushResponse* internal_default_instance() {
    return reinterpret_cast<const FlushResponse*>(
               &_FlushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(FlushResponse* other);
  friend void swap(FlushResponse& a, FlushResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushResponse* New() const final {
    return CreateMaybeMessage<FlushResponse>(NULL);
  }

  FlushResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushResponse& from);
  void MergeFrom(const FlushResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // .SearchStatus shards = 2;
  bool has_shards() const;
  void clear_shards();
  static const int kShardsFieldNumber = 2;
  private:
  const ::SearchStatus& _internal_shards() const;
  public:
  const ::SearchStatus& shards() const;
  ::SearchStatus* release_shards();
  ::SearchStatus* mutable_shards();
  void set_allocated_shards(::SearchStatus* shards);

  // @@protoc_insertion_point(class_scope:FlushResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ResponseHead* head_;
  ::SearchStatus* shards_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndexResponse) */ {
 public:
  IndexResponse();
  virtual ~IndexResponse();

  IndexResponse(const IndexResponse& from);

  inline IndexResponse& operator=(const IndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexResponse(IndexResponse&& from) noexcept
    : IndexResponse() {
    *this = ::std::move(from);
  }

  inline IndexResponse& operator=(IndexResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexResponse* internal_default_instance() {
    return reinterpret_cast<const IndexResponse*>(
               &_IndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(IndexResponse* other);
  friend void swap(IndexResponse& a, IndexResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexResponse* New() const final {
    return CreateMaybeMessage<IndexResponse>(NULL);
  }

  IndexResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndexResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndexResponse& from);
  void MergeFrom(const IndexResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // .SearchStatus shards = 2;
  bool has_shards() const;
  void clear_shards();
  static const int kShardsFieldNumber = 2;
  private:
  const ::SearchStatus& _internal_shards() const;
  public:
  const ::SearchStatus& shards() const;
  ::SearchStatus* release_shards();
  ::SearchStatus* mutable_shards();
  void set_allocated_shards(::SearchStatus* shards);

  // @@protoc_insertion_point(class_scope:IndexResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ResponseHead* head_;
  ::SearchStatus* shards_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TermFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TermFilter) */ {
 public:
  TermFilter();
  virtual ~TermFilter();

  TermFilter(const TermFilter& from);

  inline TermFilter& operator=(const TermFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TermFilter(TermFilter&& from) noexcept
    : TermFilter() {
    *this = ::std::move(from);
  }

  inline TermFilter& operator=(TermFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TermFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TermFilter* internal_default_instance() {
    return reinterpret_cast<const TermFilter*>(
               &_TermFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TermFilter* other);
  friend void swap(TermFilter& a, TermFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TermFilter* New() const final {
    return CreateMaybeMessage<TermFilter>(NULL);
  }

  TermFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TermFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TermFilter& from);
  void MergeFrom(const TermFilter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TermFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string field = 1;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // int32 is_union = 3;
  void clear_is_union();
  static const int kIsUnionFieldNumber = 3;
  ::google::protobuf::int32 is_union() const;
  void set_is_union(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TermFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 is_union_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RangeFilter) */ {
 public:
  RangeFilter();
  virtual ~RangeFilter();

  RangeFilter(const RangeFilter& from);

  inline RangeFilter& operator=(const RangeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeFilter(RangeFilter&& from) noexcept
    : RangeFilter() {
    *this = ::std::move(from);
  }

  inline RangeFilter& operator=(RangeFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeFilter* internal_default_instance() {
    return reinterpret_cast<const RangeFilter*>(
               &_RangeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RangeFilter* other);
  friend void swap(RangeFilter& a, RangeFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeFilter* New() const final {
    return CreateMaybeMessage<RangeFilter>(NULL);
  }

  RangeFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RangeFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RangeFilter& from);
  void MergeFrom(const RangeFilter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string field = 1;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // bytes lower_value = 2;
  void clear_lower_value();
  static const int kLowerValueFieldNumber = 2;
  const ::std::string& lower_value() const;
  void set_lower_value(const ::std::string& value);
  #if LANG_CXX11
  void set_lower_value(::std::string&& value);
  #endif
  void set_lower_value(const char* value);
  void set_lower_value(const void* value, size_t size);
  ::std::string* mutable_lower_value();
  ::std::string* release_lower_value();
  void set_allocated_lower_value(::std::string* lower_value);

  // bytes upper_value = 3;
  void clear_upper_value();
  static const int kUpperValueFieldNumber = 3;
  const ::std::string& upper_value() const;
  void set_upper_value(const ::std::string& value);
  #if LANG_CXX11
  void set_upper_value(::std::string&& value);
  #endif
  void set_upper_value(const char* value);
  void set_upper_value(const void* value, size_t size);
  ::std::string* mutable_upper_value();
  ::std::string* release_upper_value();
  void set_allocated_upper_value(::std::string* upper_value);

  // bool include_lower = 4;
  void clear_include_lower();
  static const int kIncludeLowerFieldNumber = 4;
  bool include_lower() const;
  void set_include_lower(bool value);

  // bool include_upper = 5;
  void clear_include_upper();
  static const int kIncludeUpperFieldNumber = 5;
  bool include_upper() const;
  void set_include_upper(bool value);

  // @@protoc_insertion_point(class_scope:RangeFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  ::google::protobuf::internal::ArenaStringPtr lower_value_;
  ::google::protobuf::internal::ArenaStringPtr upper_value_;
  bool include_lower_;
  bool include_upper_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SortField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SortField) */ {
 public:
  SortField();
  virtual ~SortField();

  SortField(const SortField& from);

  inline SortField& operator=(const SortField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SortField(SortField&& from) noexcept
    : SortField() {
    *this = ::std::move(from);
  }

  inline SortField& operator=(SortField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SortField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SortField* internal_default_instance() {
    return reinterpret_cast<const SortField*>(
               &_SortField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SortField* other);
  friend void swap(SortField& a, SortField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SortField* New() const final {
    return CreateMaybeMessage<SortField>(NULL);
  }

  SortField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SortField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SortField& from);
  void MergeFrom(const SortField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string field = 1;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // bool type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  bool type() const;
  void set_type(bool value);

  // @@protoc_insertion_point(class_scope:SortField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  bool type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VectorQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VectorQuery) */ {
 public:
  VectorQuery();
  virtual ~VectorQuery();

  VectorQuery(const VectorQuery& from);

  inline VectorQuery& operator=(const VectorQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VectorQuery(VectorQuery&& from) noexcept
    : VectorQuery() {
    *this = ::std::move(from);
  }

  inline VectorQuery& operator=(VectorQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorQuery* internal_default_instance() {
    return reinterpret_cast<const VectorQuery*>(
               &_VectorQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(VectorQuery* other);
  friend void swap(VectorQuery& a, VectorQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VectorQuery* New() const final {
    return CreateMaybeMessage<VectorQuery>(NULL);
  }

  VectorQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VectorQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VectorQuery& from);
  void MergeFrom(const VectorQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string format = 5;
  void clear_format();
  static const int kFormatFieldNumber = 5;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // string index_type = 6;
  void clear_index_type();
  static const int kIndexTypeFieldNumber = 6;
  const ::std::string& index_type() const;
  void set_index_type(const ::std::string& value);
  #if LANG_CXX11
  void set_index_type(::std::string&& value);
  #endif
  void set_index_type(const char* value);
  void set_index_type(const char* value, size_t size);
  ::std::string* mutable_index_type();
  ::std::string* release_index_type();
  void set_allocated_index_type(::std::string* index_type);

  // double min_score = 3;
  void clear_min_score();
  static const int kMinScoreFieldNumber = 3;
  double min_score() const;
  void set_min_score(double value);

  // double max_score = 4;
  void clear_max_score();
  static const int kMaxScoreFieldNumber = 4;
  double max_score() const;
  void set_max_score(double value);

  // @@protoc_insertion_point(class_scope:VectorQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::internal::ArenaStringPtr index_type_;
  double min_score_;
  double max_score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndexParameters) */ {
 public:
  IndexParameters();
  virtual ~IndexParameters();

  IndexParameters(const IndexParameters& from);

  inline IndexParameters& operator=(const IndexParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexParameters(IndexParameters&& from) noexcept
    : IndexParameters() {
    *this = ::std::move(from);
  }

  inline IndexParameters& operator=(IndexParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexParameters* internal_default_instance() {
    return reinterpret_cast<const IndexParameters*>(
               &_IndexParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(IndexParameters* other);
  friend void swap(IndexParameters& a, IndexParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexParameters* New() const final {
    return CreateMaybeMessage<IndexParameters>(NULL);
  }

  IndexParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndexParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndexParameters& from);
  void MergeFrom(const IndexParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IndexParameters_DistanceMetricType DistanceMetricType;
  static const DistanceMetricType InnerProduct =
    IndexParameters_DistanceMetricType_InnerProduct;
  static const DistanceMetricType L2 =
    IndexParameters_DistanceMetricType_L2;
  static inline bool DistanceMetricType_IsValid(int value) {
    return IndexParameters_DistanceMetricType_IsValid(value);
  }
  static const DistanceMetricType DistanceMetricType_MIN =
    IndexParameters_DistanceMetricType_DistanceMetricType_MIN;
  static const DistanceMetricType DistanceMetricType_MAX =
    IndexParameters_DistanceMetricType_DistanceMetricType_MAX;
  static const int DistanceMetricType_ARRAYSIZE =
    IndexParameters_DistanceMetricType_DistanceMetricType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DistanceMetricType_descriptor() {
    return IndexParameters_DistanceMetricType_descriptor();
  }
  static inline const ::std::string& DistanceMetricType_Name(DistanceMetricType value) {
    return IndexParameters_DistanceMetricType_Name(value);
  }
  static inline bool DistanceMetricType_Parse(const ::std::string& name,
      DistanceMetricType* value) {
    return IndexParameters_DistanceMetricType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .IndexParameters.DistanceMetricType metric_type = 1;
  void clear_metric_type();
  static const int kMetricTypeFieldNumber = 1;
  ::IndexParameters_DistanceMetricType metric_type() const;
  void set_metric_type(::IndexParameters_DistanceMetricType value);

  // int32 nprobe = 2;
  void clear_nprobe();
  static const int kNprobeFieldNumber = 2;
  ::google::protobuf::int32 nprobe() const;
  void set_nprobe(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IndexParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int metric_type_;
  ::google::protobuf::int32 nprobe_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryRequest_SortFieldMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<QueryRequest_SortFieldMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<QueryRequest_SortFieldMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  QueryRequest_SortFieldMapEntry_DoNotUse();
  QueryRequest_SortFieldMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const QueryRequest_SortFieldMapEntry_DoNotUse& other);
  static const QueryRequest_SortFieldMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryRequest_SortFieldMapEntry_DoNotUse*>(&_QueryRequest_SortFieldMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class QueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(QueryRequest* other);
  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(NULL);
  }

  QueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string document_ids = 2;
  int document_ids_size() const;
  void clear_document_ids();
  static const int kDocumentIdsFieldNumber = 2;
  const ::std::string& document_ids(int index) const;
  ::std::string* mutable_document_ids(int index);
  void set_document_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_document_ids(int index, ::std::string&& value);
  #endif
  void set_document_ids(int index, const char* value);
  void set_document_ids(int index, const char* value, size_t size);
  ::std::string* add_document_ids();
  void add_document_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_document_ids(::std::string&& value);
  #endif
  void add_document_ids(const char* value);
  void add_document_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& document_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_document_ids();

  // repeated .RangeFilter range_filters = 5;
  int range_filters_size() const;
  void clear_range_filters();
  static const int kRangeFiltersFieldNumber = 5;
  ::RangeFilter* mutable_range_filters(int index);
  ::google::protobuf::RepeatedPtrField< ::RangeFilter >*
      mutable_range_filters();
  const ::RangeFilter& range_filters(int index) const;
  ::RangeFilter* add_range_filters();
  const ::google::protobuf::RepeatedPtrField< ::RangeFilter >&
      range_filters() const;

  // repeated .TermFilter term_filters = 6;
  int term_filters_size() const;
  void clear_term_filters();
  static const int kTermFiltersFieldNumber = 6;
  ::TermFilter* mutable_term_filters(int index);
  ::google::protobuf::RepeatedPtrField< ::TermFilter >*
      mutable_term_filters();
  const ::TermFilter& term_filters(int index) const;
  ::TermFilter* add_term_filters();
  const ::google::protobuf::RepeatedPtrField< ::TermFilter >&
      term_filters() const;

  // repeated string fields = 7;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 7;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // map<string, string> sort_field_map = 12;
  int sort_field_map_size() const;
  void clear_sort_field_map();
  static const int kSortFieldMapFieldNumber = 12;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      sort_field_map() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_sort_field_map();

  // repeated .SortField sort_fields = 13;
  int sort_fields_size() const;
  void clear_sort_fields();
  static const int kSortFieldsFieldNumber = 13;
  ::SortField* mutable_sort_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::SortField >*
      mutable_sort_fields();
  const ::SortField& sort_fields(int index) const;
  ::SortField* add_sort_fields();
  const ::google::protobuf::RepeatedPtrField< ::SortField >&
      sort_fields() const;

  // string load_balance = 11;
  void clear_load_balance();
  static const int kLoadBalanceFieldNumber = 11;
  const ::std::string& load_balance() const;
  void set_load_balance(const ::std::string& value);
  #if LANG_CXX11
  void set_load_balance(::std::string&& value);
  #endif
  void set_load_balance(const char* value);
  void set_load_balance(const char* value, size_t size);
  ::std::string* mutable_load_balance();
  ::std::string* release_load_balance();
  void set_allocated_load_balance(::std::string* load_balance);

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // int32 partition_id = 3;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 3;
  ::google::protobuf::int32 partition_id() const;
  void set_partition_id(::google::protobuf::int32 value);

  // bool next = 4;
  void clear_next();
  static const int kNextFieldNumber = 4;
  bool next() const;
  void set_next(bool value);

  // bool is_vector_value = 8;
  void clear_is_vector_value();
  static const int kIsVectorValueFieldNumber = 8;
  bool is_vector_value() const;
  void set_is_vector_value(bool value);

  // bool trace = 14;
  void clear_trace();
  static const int kTraceFieldNumber = 14;
  bool trace() const;
  void set_trace(bool value);

  // int32 limit = 9;
  void clear_limit();
  static const int kLimitFieldNumber = 9;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // int32 page_size = 10;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 10;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QueryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> document_ids_;
  ::google::protobuf::RepeatedPtrField< ::RangeFilter > range_filters_;
  ::google::protobuf::RepeatedPtrField< ::TermFilter > term_filters_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::internal::MapField<
      QueryRequest_SortFieldMapEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > sort_field_map_;
  ::google::protobuf::RepeatedPtrField< ::SortField > sort_fields_;
  ::google::protobuf::internal::ArenaStringPtr load_balance_;
  ::RequestHead* head_;
  ::google::protobuf::int32 partition_id_;
  bool next_;
  bool is_vector_value_;
  bool trace_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchRequest_SortFieldMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SearchRequest_SortFieldMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SearchRequest_SortFieldMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SearchRequest_SortFieldMapEntry_DoNotUse();
  SearchRequest_SortFieldMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SearchRequest_SortFieldMapEntry_DoNotUse& other);
  static const SearchRequest_SortFieldMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SearchRequest_SortFieldMapEntry_DoNotUse*>(&_SearchRequest_SortFieldMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(NULL);
  }

  SearchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .VectorQuery vec_fields = 5;
  int vec_fields_size() const;
  void clear_vec_fields();
  static const int kVecFieldsFieldNumber = 5;
  ::VectorQuery* mutable_vec_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::VectorQuery >*
      mutable_vec_fields();
  const ::VectorQuery& vec_fields(int index) const;
  ::VectorQuery* add_vec_fields();
  const ::google::protobuf::RepeatedPtrField< ::VectorQuery >&
      vec_fields() const;

  // repeated string fields = 6;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 6;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // repeated .RangeFilter range_filters = 7;
  int range_filters_size() const;
  void clear_range_filters();
  static const int kRangeFiltersFieldNumber = 7;
  ::RangeFilter* mutable_range_filters(int index);
  ::google::protobuf::RepeatedPtrField< ::RangeFilter >*
      mutable_range_filters();
  const ::RangeFilter& range_filters(int index) const;
  ::RangeFilter* add_range_filters();
  const ::google::protobuf::RepeatedPtrField< ::RangeFilter >&
      range_filters() const;

  // repeated .TermFilter term_filters = 8;
  int term_filters_size() const;
  void clear_term_filters();
  static const int kTermFiltersFieldNumber = 8;
  ::TermFilter* mutable_term_filters(int index);
  ::google::protobuf::RepeatedPtrField< ::TermFilter >*
      mutable_term_filters();
  const ::TermFilter& term_filters(int index) const;
  ::TermFilter* add_term_filters();
  const ::google::protobuf::RepeatedPtrField< ::TermFilter >&
      term_filters() const;

  // map<string, string> sort_field_map = 13;
  int sort_field_map_size() const;
  void clear_sort_field_map();
  static const int kSortFieldMapFieldNumber = 13;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      sort_field_map() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_sort_field_map();

  // repeated .SortField sort_fields = 14;
  int sort_fields_size() const;
  void clear_sort_fields();
  static const int kSortFieldsFieldNumber = 14;
  ::SortField* mutable_sort_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::SortField >*
      mutable_sort_fields();
  const ::SortField& sort_fields(int index) const;
  ::SortField* add_sort_fields();
  const ::google::protobuf::RepeatedPtrField< ::SortField >&
      sort_fields() const;

  // string index_params = 9;
  void clear_index_params();
  static const int kIndexParamsFieldNumber = 9;
  const ::std::string& index_params() const;
  void set_index_params(const ::std::string& value);
  #if LANG_CXX11
  void set_index_params(::std::string&& value);
  #endif
  void set_index_params(const char* value);
  void set_index_params(const char* value, size_t size);
  ::std::string* mutable_index_params();
  ::std::string* release_index_params();
  void set_allocated_index_params(::std::string* index_params);

  // string ranker = 15;
  void clear_ranker();
  static const int kRankerFieldNumber = 15;
  const ::std::string& ranker() const;
  void set_ranker(const ::std::string& value);
  #if LANG_CXX11
  void set_ranker(::std::string&& value);
  #endif
  void set_ranker(const char* value);
  void set_ranker(const char* value, size_t size);
  ::std::string* mutable_ranker();
  ::std::string* release_ranker();
  void set_allocated_ranker(::std::string* ranker);

  // .RequestHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::RequestHead& _internal_head() const;
  public:
  const ::RequestHead& head() const;
  ::RequestHead* release_head();
  ::RequestHead* mutable_head();
  void set_allocated_head(::RequestHead* head);

  // int32 req_num = 2;
  void clear_req_num();
  static const int kReqNumFieldNumber = 2;
  ::google::protobuf::int32 req_num() const;
  void set_req_num(::google::protobuf::int32 value);

  // int32 topN = 3;
  void clear_topn();
  static const int kTopNFieldNumber = 3;
  ::google::protobuf::int32 topn() const;
  void set_topn(::google::protobuf::int32 value);

  // int32 is_brute_search = 4;
  void clear_is_brute_search();
  static const int kIsBruteSearchFieldNumber = 4;
  ::google::protobuf::int32 is_brute_search() const;
  void set_is_brute_search(::google::protobuf::int32 value);

  // int32 multi_vector_rank = 10;
  void clear_multi_vector_rank();
  static const int kMultiVectorRankFieldNumber = 10;
  ::google::protobuf::int32 multi_vector_rank() const;
  void set_multi_vector_rank(::google::protobuf::int32 value);

  // bool l2_sqrt = 11;
  void clear_l2_sqrt();
  static const int kL2SqrtFieldNumber = 11;
  bool l2_sqrt() const;
  void set_l2_sqrt(bool value);

  // bool is_vector_value = 12;
  void clear_is_vector_value();
  static const int kIsVectorValueFieldNumber = 12;
  bool is_vector_value() const;
  void set_is_vector_value(bool value);

  // bool trace = 16;
  void clear_trace();
  static const int kTraceFieldNumber = 16;
  bool trace() const;
  void set_trace(bool value);

  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VectorQuery > vec_fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::RepeatedPtrField< ::RangeFilter > range_filters_;
  ::google::protobuf::RepeatedPtrField< ::TermFilter > term_filters_;
  ::google::protobuf::internal::MapField<
      SearchRequest_SortFieldMapEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > sort_field_map_;
  ::google::protobuf::RepeatedPtrField< ::SortField > sort_fields_;
  ::google::protobuf::internal::ArenaStringPtr index_params_;
  ::google::protobuf::internal::ArenaStringPtr ranker_;
  ::RequestHead* head_;
  ::google::protobuf::int32 req_num_;
  ::google::protobuf::int32 topn_;
  ::google::protobuf::int32 is_brute_search_;
  ::google::protobuf::int32 multi_vector_rank_;
  bool l2_sqrt_;
  bool is_vector_value_;
  bool trace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResultItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResultItem) */ {
 public:
  ResultItem();
  virtual ~ResultItem();

  ResultItem(const ResultItem& from);

  inline ResultItem& operator=(const ResultItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultItem(ResultItem&& from) noexcept
    : ResultItem() {
    *this = ::std::move(from);
  }

  inline ResultItem& operator=(ResultItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultItem* internal_default_instance() {
    return reinterpret_cast<const ResultItem*>(
               &_ResultItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ResultItem* other);
  friend void swap(ResultItem& a, ResultItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultItem* New() const final {
    return CreateMaybeMessage<ResultItem>(NULL);
  }

  ResultItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResultItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResultItem& from);
  void MergeFrom(const ResultItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Field fields = 2;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 2;
  ::Field* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::Field >*
      mutable_fields();
  const ::Field& fields(int index) const;
  ::Field* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::Field >&
      fields() const;

  // string p_key = 3;
  void clear_p_key();
  static const int kPKeyFieldNumber = 3;
  const ::std::string& p_key() const;
  void set_p_key(const ::std::string& value);
  #if LANG_CXX11
  void set_p_key(::std::string&& value);
  #endif
  void set_p_key(const char* value);
  void set_p_key(const char* value, size_t size);
  ::std::string* mutable_p_key();
  ::std::string* release_p_key();
  void set_allocated_p_key(::std::string* p_key);

  // bytes source = 4;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const void* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // double score = 1;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  double score() const;
  void set_score(double value);

  // @@protoc_insertion_point(class_scope:ResultItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Field > fields_;
  ::google::protobuf::internal::ArenaStringPtr p_key_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  double score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchResult) */ {
 public:
  SearchResult();
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(SearchResult* other);
  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResult* New() const final {
    return CreateMaybeMessage<SearchResult>(NULL);
  }

  SearchResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ResultItem result_items = 7;
  int result_items_size() const;
  void clear_result_items();
  static const int kResultItemsFieldNumber = 7;
  ::ResultItem* mutable_result_items(int index);
  ::google::protobuf::RepeatedPtrField< ::ResultItem >*
      mutable_result_items();
  const ::ResultItem& result_items(int index) const;
  ::ResultItem* add_result_items();
  const ::google::protobuf::RepeatedPtrField< ::ResultItem >&
      result_items() const;

  // string msg = 6;
  void clear_msg();
  static const int kMsgFieldNumber = 6;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .SearchStatus status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  private:
  const ::SearchStatus& _internal_status() const;
  public:
  const ::SearchStatus& status() const;
  ::SearchStatus* release_status();
  ::SearchStatus* mutable_status();
  void set_allocated_status(::SearchStatus* status);

  // double max_score = 2;
  void clear_max_score();
  static const int kMaxScoreFieldNumber = 2;
  double max_score() const;
  void set_max_score(double value);

  // int32 total_hits = 1;
  void clear_total_hits();
  static const int kTotalHitsFieldNumber = 1;
  ::google::protobuf::int32 total_hits() const;
  void set_total_hits(::google::protobuf::int32 value);

  // uint32 max_took_id = 4;
  void clear_max_took_id();
  static const int kMaxTookIdFieldNumber = 4;
  ::google::protobuf::uint32 max_took_id() const;
  void set_max_took_id(::google::protobuf::uint32 value);

  // int64 max_took = 3;
  void clear_max_took();
  static const int kMaxTookFieldNumber = 3;
  ::google::protobuf::int64 max_took() const;
  void set_max_took(::google::protobuf::int64 value);

  // uint32 pID = 8;
  void clear_pid();
  static const int kPIDFieldNumber = 8;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // bool timeout = 9;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 9;
  bool timeout() const;
  void set_timeout(bool value);

  // int32 topN = 10;
  void clear_topn();
  static const int kTopNFieldNumber = 10;
  ::google::protobuf::int32 topn() const;
  void set_topn(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SearchResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ResultItem > result_items_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::SearchStatus* status_;
  double max_score_;
  ::google::protobuf::int32 total_hits_;
  ::google::protobuf::uint32 max_took_id_;
  ::google::protobuf::int64 max_took_;
  ::google::protobuf::uint32 pid_;
  bool timeout_;
  ::google::protobuf::int32 topn_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SearchResponse* other);
  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(NULL);
  }

  SearchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SearchResult results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  ::SearchResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::SearchResult >*
      mutable_results();
  const ::SearchResult& results(int index) const;
  ::SearchResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::SearchResult >&
      results() const;

  // bytes FlatBytes = 4;
  void clear_flatbytes();
  static const int kFlatBytesFieldNumber = 4;
  const ::std::string& flatbytes() const;
  void set_flatbytes(const ::std::string& value);
  #if LANG_CXX11
  void set_flatbytes(::std::string&& value);
  #endif
  void set_flatbytes(const char* value);
  void set_flatbytes(const void* value, size_t size);
  ::std::string* mutable_flatbytes();
  ::std::string* release_flatbytes();
  void set_allocated_flatbytes(::std::string* flatbytes);

  // .ResponseHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  const ::ResponseHead& _internal_head() const;
  public:
  const ::ResponseHead& head() const;
  ::ResponseHead* release_head();
  ::ResponseHead* mutable_head();
  void set_allocated_head(::ResponseHead* head);

  // bool timeout = 3;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  bool timeout() const;
  void set_timeout(bool value);

  // int32 top_size = 5;
  void clear_top_size();
  static const int kTopSizeFieldNumber = 5;
  ::google::protobuf::int32 top_size() const;
  void set_top_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SearchResult > results_;
  ::google::protobuf::internal::ArenaStringPtr flatbytes_;
  ::ResponseHead* head_;
  bool timeout_;
  ::google::protobuf::int32 top_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchStatus) */ {
 public:
  SearchStatus();
  virtual ~SearchStatus();

  SearchStatus(const SearchStatus& from);

  inline SearchStatus& operator=(const SearchStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchStatus(SearchStatus&& from) noexcept
    : SearchStatus() {
    *this = ::std::move(from);
  }

  inline SearchStatus& operator=(SearchStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchStatus* internal_default_instance() {
    return reinterpret_cast<const SearchStatus*>(
               &_SearchStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(SearchStatus* other);
  friend void swap(SearchStatus& a, SearchStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchStatus* New() const final {
    return CreateMaybeMessage<SearchStatus>(NULL);
  }

  SearchStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchStatus& from);
  void MergeFrom(const SearchStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 4;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 total = 1;
  void clear_total();
  static const int kTotalFieldNumber = 1;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // int32 failed = 2;
  void clear_failed();
  static const int kFailedFieldNumber = 2;
  ::google::protobuf::int32 failed() const;
  void set_failed(::google::protobuf::int32 value);

  // int32 successful = 3;
  void clear_successful();
  static const int kSuccessfulFieldNumber = 3;
  ::google::protobuf::int32 successful() const;
  void set_successful(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SearchStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 failed_;
  ::google::protobuf::int32 successful_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_router_5fgrpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestHead

// int64 time_out_ms = 1;
inline void RequestHead::clear_time_out_ms() {
  time_out_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RequestHead::time_out_ms() const {
  // @@protoc_insertion_point(field_get:RequestHead.time_out_ms)
  return time_out_ms_;
}
inline void RequestHead::set_time_out_ms(::google::protobuf::int64 value) {
  
  time_out_ms_ = value;
  // @@protoc_insertion_point(field_set:RequestHead.time_out_ms)
}

// string user_name = 2;
inline void RequestHead::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestHead::user_name() const {
  // @@protoc_insertion_point(field_get:RequestHead.user_name)
  return user_name_.GetNoArena();
}
inline void RequestHead::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestHead.user_name)
}
#if LANG_CXX11
inline void RequestHead::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestHead.user_name)
}
#endif
inline void RequestHead::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestHead.user_name)
}
inline void RequestHead::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestHead.user_name)
}
inline ::std::string* RequestHead::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:RequestHead.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_user_name() {
  // @@protoc_insertion_point(field_release:RequestHead.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:RequestHead.user_name)
}

// string password = 3;
inline void RequestHead::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestHead::password() const {
  // @@protoc_insertion_point(field_get:RequestHead.password)
  return password_.GetNoArena();
}
inline void RequestHead::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestHead.password)
}
#if LANG_CXX11
inline void RequestHead::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestHead.password)
}
#endif
inline void RequestHead::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestHead.password)
}
inline void RequestHead::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestHead.password)
}
inline ::std::string* RequestHead::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:RequestHead.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_password() {
  // @@protoc_insertion_point(field_release:RequestHead.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:RequestHead.password)
}

// string db_name = 4;
inline void RequestHead::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestHead::db_name() const {
  // @@protoc_insertion_point(field_get:RequestHead.db_name)
  return db_name_.GetNoArena();
}
inline void RequestHead::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestHead.db_name)
}
#if LANG_CXX11
inline void RequestHead::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestHead.db_name)
}
#endif
inline void RequestHead::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestHead.db_name)
}
inline void RequestHead::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestHead.db_name)
}
inline ::std::string* RequestHead::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:RequestHead.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_db_name() {
  // @@protoc_insertion_point(field_release:RequestHead.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:RequestHead.db_name)
}

// string space_name = 5;
inline void RequestHead::clear_space_name() {
  space_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestHead::space_name() const {
  // @@protoc_insertion_point(field_get:RequestHead.space_name)
  return space_name_.GetNoArena();
}
inline void RequestHead::set_space_name(const ::std::string& value) {
  
  space_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestHead.space_name)
}
#if LANG_CXX11
inline void RequestHead::set_space_name(::std::string&& value) {
  
  space_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestHead.space_name)
}
#endif
inline void RequestHead::set_space_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  space_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestHead.space_name)
}
inline void RequestHead::set_space_name(const char* value, size_t size) {
  
  space_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestHead.space_name)
}
inline ::std::string* RequestHead::mutable_space_name() {
  
  // @@protoc_insertion_point(field_mutable:RequestHead.space_name)
  return space_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_space_name() {
  // @@protoc_insertion_point(field_release:RequestHead.space_name)
  
  return space_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_space_name(::std::string* space_name) {
  if (space_name != NULL) {
    
  } else {
    
  }
  space_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), space_name);
  // @@protoc_insertion_point(field_set_allocated:RequestHead.space_name)
}

// string client_type = 6;
inline void RequestHead::clear_client_type() {
  client_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestHead::client_type() const {
  // @@protoc_insertion_point(field_get:RequestHead.client_type)
  return client_type_.GetNoArena();
}
inline void RequestHead::set_client_type(const ::std::string& value) {
  
  client_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestHead.client_type)
}
#if LANG_CXX11
inline void RequestHead::set_client_type(::std::string&& value) {
  
  client_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestHead.client_type)
}
#endif
inline void RequestHead::set_client_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestHead.client_type)
}
inline void RequestHead::set_client_type(const char* value, size_t size) {
  
  client_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestHead.client_type)
}
inline ::std::string* RequestHead::mutable_client_type() {
  
  // @@protoc_insertion_point(field_mutable:RequestHead.client_type)
  return client_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_client_type() {
  // @@protoc_insertion_point(field_release:RequestHead.client_type)
  
  return client_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_client_type(::std::string* client_type) {
  if (client_type != NULL) {
    
  } else {
    
  }
  client_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_type);
  // @@protoc_insertion_point(field_set_allocated:RequestHead.client_type)
}

// map<string, string> params = 7;
inline int RequestHead::params_size() const {
  return params_.size();
}
inline void RequestHead::clear_params() {
  params_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RequestHead::params() const {
  // @@protoc_insertion_point(field_map:RequestHead.params)
  return params_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RequestHead::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:RequestHead.params)
  return params_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResponseHead

// .Error err = 1;
inline bool ResponseHead::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
inline const ::Error& ResponseHead::_internal_err() const {
  return *err_;
}
inline const ::Error& ResponseHead::err() const {
  const ::Error* p = err_;
  // @@protoc_insertion_point(field_get:ResponseHead.err)
  return p != NULL ? *p : *reinterpret_cast<const ::Error*>(
      &::_Error_default_instance_);
}
inline ::Error* ResponseHead::release_err() {
  // @@protoc_insertion_point(field_release:ResponseHead.err)
  
  ::Error* temp = err_;
  err_ = NULL;
  return temp;
}
inline ::Error* ResponseHead::mutable_err() {
  
  if (err_ == NULL) {
    auto* p = CreateMaybeMessage<::Error>(GetArenaNoVirtual());
    err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ResponseHead.err)
  return err_;
}
inline void ResponseHead::set_allocated_err(::Error* err) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(err_);
  }
  if (err) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      err = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    
  } else {
    
  }
  err_ = err;
  // @@protoc_insertion_point(field_set_allocated:ResponseHead.err)
}

// map<string, string> params = 2;
inline int ResponseHead::params_size() const {
  return params_.size();
}
inline void ResponseHead::clear_params() {
  params_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ResponseHead::params() const {
  // @@protoc_insertion_point(field_map:ResponseHead.params)
  return params_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ResponseHead::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:ResponseHead.params)
  return params_.MutableMap();
}

// -------------------------------------------------------------------

// GetRequest

// .RequestHead head = 1;
inline bool GetRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void GetRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& GetRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& GetRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:GetRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* GetRequest::release_head() {
  // @@protoc_insertion_point(field_release:GetRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* GetRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GetRequest.head)
  return head_;
}
inline void GetRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:GetRequest.head)
}

// repeated string primary_keys = 2;
inline int GetRequest::primary_keys_size() const {
  return primary_keys_.size();
}
inline void GetRequest::clear_primary_keys() {
  primary_keys_.Clear();
}
inline const ::std::string& GetRequest::primary_keys(int index) const {
  // @@protoc_insertion_point(field_get:GetRequest.primary_keys)
  return primary_keys_.Get(index);
}
inline ::std::string* GetRequest::mutable_primary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:GetRequest.primary_keys)
  return primary_keys_.Mutable(index);
}
inline void GetRequest::set_primary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GetRequest.primary_keys)
  primary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetRequest::set_primary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:GetRequest.primary_keys)
  primary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetRequest::set_primary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  primary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetRequest.primary_keys)
}
inline void GetRequest::set_primary_keys(int index, const char* value, size_t size) {
  primary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetRequest.primary_keys)
}
inline ::std::string* GetRequest::add_primary_keys() {
  // @@protoc_insertion_point(field_add_mutable:GetRequest.primary_keys)
  return primary_keys_.Add();
}
inline void GetRequest::add_primary_keys(const ::std::string& value) {
  primary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetRequest.primary_keys)
}
#if LANG_CXX11
inline void GetRequest::add_primary_keys(::std::string&& value) {
  primary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetRequest.primary_keys)
}
#endif
inline void GetRequest::add_primary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  primary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetRequest.primary_keys)
}
inline void GetRequest::add_primary_keys(const char* value, size_t size) {
  primary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetRequest.primary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetRequest::primary_keys() const {
  // @@protoc_insertion_point(field_list:GetRequest.primary_keys)
  return primary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetRequest::mutable_primary_keys() {
  // @@protoc_insertion_point(field_mutable_list:GetRequest.primary_keys)
  return &primary_keys_;
}

// -------------------------------------------------------------------

// DeleteRequest

// .RequestHead head = 1;
inline bool DeleteRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void DeleteRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& DeleteRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& DeleteRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:DeleteRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* DeleteRequest::release_head() {
  // @@protoc_insertion_point(field_release:DeleteRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* DeleteRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DeleteRequest.head)
  return head_;
}
inline void DeleteRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:DeleteRequest.head)
}

// repeated string primary_keys = 2;
inline int DeleteRequest::primary_keys_size() const {
  return primary_keys_.size();
}
inline void DeleteRequest::clear_primary_keys() {
  primary_keys_.Clear();
}
inline const ::std::string& DeleteRequest::primary_keys(int index) const {
  // @@protoc_insertion_point(field_get:DeleteRequest.primary_keys)
  return primary_keys_.Get(index);
}
inline ::std::string* DeleteRequest::mutable_primary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:DeleteRequest.primary_keys)
  return primary_keys_.Mutable(index);
}
inline void DeleteRequest::set_primary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DeleteRequest.primary_keys)
  primary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeleteRequest::set_primary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:DeleteRequest.primary_keys)
  primary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeleteRequest::set_primary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  primary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DeleteRequest.primary_keys)
}
inline void DeleteRequest::set_primary_keys(int index, const char* value, size_t size) {
  primary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeleteRequest.primary_keys)
}
inline ::std::string* DeleteRequest::add_primary_keys() {
  // @@protoc_insertion_point(field_add_mutable:DeleteRequest.primary_keys)
  return primary_keys_.Add();
}
inline void DeleteRequest::add_primary_keys(const ::std::string& value) {
  primary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DeleteRequest.primary_keys)
}
#if LANG_CXX11
inline void DeleteRequest::add_primary_keys(::std::string&& value) {
  primary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DeleteRequest.primary_keys)
}
#endif
inline void DeleteRequest::add_primary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  primary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DeleteRequest.primary_keys)
}
inline void DeleteRequest::add_primary_keys(const char* value, size_t size) {
  primary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DeleteRequest.primary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeleteRequest::primary_keys() const {
  // @@protoc_insertion_point(field_list:DeleteRequest.primary_keys)
  return primary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeleteRequest::mutable_primary_keys() {
  // @@protoc_insertion_point(field_mutable_list:DeleteRequest.primary_keys)
  return &primary_keys_;
}

// -------------------------------------------------------------------

// BulkRequest

// .RequestHead head = 1;
inline bool BulkRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void BulkRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& BulkRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& BulkRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:BulkRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* BulkRequest::release_head() {
  // @@protoc_insertion_point(field_release:BulkRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* BulkRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BulkRequest.head)
  return head_;
}
inline void BulkRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:BulkRequest.head)
}

// repeated .Document docs = 2;
inline int BulkRequest::docs_size() const {
  return docs_.size();
}
inline ::Document* BulkRequest::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:BulkRequest.docs)
  return docs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Document >*
BulkRequest::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:BulkRequest.docs)
  return &docs_;
}
inline const ::Document& BulkRequest::docs(int index) const {
  // @@protoc_insertion_point(field_get:BulkRequest.docs)
  return docs_.Get(index);
}
inline ::Document* BulkRequest::add_docs() {
  // @@protoc_insertion_point(field_add:BulkRequest.docs)
  return docs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Document >&
BulkRequest::docs() const {
  // @@protoc_insertion_point(field_list:BulkRequest.docs)
  return docs_;
}

// repeated uint32 partitions = 3;
inline int BulkRequest::partitions_size() const {
  return partitions_.size();
}
inline void BulkRequest::clear_partitions() {
  partitions_.Clear();
}
inline ::google::protobuf::uint32 BulkRequest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:BulkRequest.partitions)
  return partitions_.Get(index);
}
inline void BulkRequest::set_partitions(int index, ::google::protobuf::uint32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:BulkRequest.partitions)
}
inline void BulkRequest::add_partitions(::google::protobuf::uint32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:BulkRequest.partitions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BulkRequest::partitions() const {
  // @@protoc_insertion_point(field_list:BulkRequest.partitions)
  return partitions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BulkRequest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:BulkRequest.partitions)
  return &partitions_;
}

// -------------------------------------------------------------------

// ForceMergeRequest

// .RequestHead head = 1;
inline bool ForceMergeRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void ForceMergeRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& ForceMergeRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& ForceMergeRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:ForceMergeRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* ForceMergeRequest::release_head() {
  // @@protoc_insertion_point(field_release:ForceMergeRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* ForceMergeRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ForceMergeRequest.head)
  return head_;
}
inline void ForceMergeRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ForceMergeRequest.head)
}

// -------------------------------------------------------------------

// FlushRequest

// .RequestHead head = 1;
inline bool FlushRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void FlushRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& FlushRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& FlushRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:FlushRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* FlushRequest::release_head() {
  // @@protoc_insertion_point(field_release:FlushRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* FlushRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FlushRequest.head)
  return head_;
}
inline void FlushRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:FlushRequest.head)
}

// -------------------------------------------------------------------

// IndexRequest

// .RequestHead head = 1;
inline bool IndexRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void IndexRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& IndexRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& IndexRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:IndexRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* IndexRequest::release_head() {
  // @@protoc_insertion_point(field_release:IndexRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* IndexRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IndexRequest.head)
  return head_;
}
inline void IndexRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:IndexRequest.head)
}

// int64 drop_before_rebuild = 2;
inline void IndexRequest::clear_drop_before_rebuild() {
  drop_before_rebuild_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexRequest::drop_before_rebuild() const {
  // @@protoc_insertion_point(field_get:IndexRequest.drop_before_rebuild)
  return drop_before_rebuild_;
}
inline void IndexRequest::set_drop_before_rebuild(::google::protobuf::int64 value) {
  
  drop_before_rebuild_ = value;
  // @@protoc_insertion_point(field_set:IndexRequest.drop_before_rebuild)
}

// int64 limit_cpu = 3;
inline void IndexRequest::clear_limit_cpu() {
  limit_cpu_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexRequest::limit_cpu() const {
  // @@protoc_insertion_point(field_get:IndexRequest.limit_cpu)
  return limit_cpu_;
}
inline void IndexRequest::set_limit_cpu(::google::protobuf::int64 value) {
  
  limit_cpu_ = value;
  // @@protoc_insertion_point(field_set:IndexRequest.limit_cpu)
}

// int64 describe = 4;
inline void IndexRequest::clear_describe() {
  describe_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexRequest::describe() const {
  // @@protoc_insertion_point(field_get:IndexRequest.describe)
  return describe_;
}
inline void IndexRequest::set_describe(::google::protobuf::int64 value) {
  
  describe_ = value;
  // @@protoc_insertion_point(field_set:IndexRequest.describe)
}

// -------------------------------------------------------------------

// GetResponse

// .ResponseHead head = 1;
inline bool GetResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void GetResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& GetResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& GetResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:GetResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* GetResponse::release_head() {
  // @@protoc_insertion_point(field_release:GetResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* GetResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GetResponse.head)
  return head_;
}
inline void GetResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:GetResponse.head)
}

// repeated .Item items = 2;
inline int GetResponse::items_size() const {
  return items_.size();
}
inline ::Item* GetResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:GetResponse.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Item >*
GetResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:GetResponse.items)
  return &items_;
}
inline const ::Item& GetResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:GetResponse.items)
  return items_.Get(index);
}
inline ::Item* GetResponse::add_items() {
  // @@protoc_insertion_point(field_add:GetResponse.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Item >&
GetResponse::items() const {
  // @@protoc_insertion_point(field_list:GetResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// DeleteResponse

// .ResponseHead head = 1;
inline bool DeleteResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void DeleteResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& DeleteResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& DeleteResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:DeleteResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* DeleteResponse::release_head() {
  // @@protoc_insertion_point(field_release:DeleteResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* DeleteResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DeleteResponse.head)
  return head_;
}
inline void DeleteResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:DeleteResponse.head)
}

// repeated .Item items = 2;
inline int DeleteResponse::items_size() const {
  return items_.size();
}
inline ::Item* DeleteResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DeleteResponse.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Item >*
DeleteResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DeleteResponse.items)
  return &items_;
}
inline const ::Item& DeleteResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:DeleteResponse.items)
  return items_.Get(index);
}
inline ::Item* DeleteResponse::add_items() {
  // @@protoc_insertion_point(field_add:DeleteResponse.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Item >&
DeleteResponse::items() const {
  // @@protoc_insertion_point(field_list:DeleteResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// BulkResponse

// .ResponseHead head = 1;
inline bool BulkResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void BulkResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& BulkResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& BulkResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:BulkResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* BulkResponse::release_head() {
  // @@protoc_insertion_point(field_release:BulkResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* BulkResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BulkResponse.head)
  return head_;
}
inline void BulkResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:BulkResponse.head)
}

// repeated .Item items = 2;
inline int BulkResponse::items_size() const {
  return items_.size();
}
inline ::Item* BulkResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:BulkResponse.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Item >*
BulkResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:BulkResponse.items)
  return &items_;
}
inline const ::Item& BulkResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:BulkResponse.items)
  return items_.Get(index);
}
inline ::Item* BulkResponse::add_items() {
  // @@protoc_insertion_point(field_add:BulkResponse.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Item >&
BulkResponse::items() const {
  // @@protoc_insertion_point(field_list:BulkResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// ForceMergeResponse

// .ResponseHead head = 1;
inline bool ForceMergeResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void ForceMergeResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& ForceMergeResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& ForceMergeResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:ForceMergeResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* ForceMergeResponse::release_head() {
  // @@protoc_insertion_point(field_release:ForceMergeResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* ForceMergeResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ForceMergeResponse.head)
  return head_;
}
inline void ForceMergeResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ForceMergeResponse.head)
}

// .SearchStatus shards = 2;
inline bool ForceMergeResponse::has_shards() const {
  return this != internal_default_instance() && shards_ != NULL;
}
inline void ForceMergeResponse::clear_shards() {
  if (GetArenaNoVirtual() == NULL && shards_ != NULL) {
    delete shards_;
  }
  shards_ = NULL;
}
inline const ::SearchStatus& ForceMergeResponse::_internal_shards() const {
  return *shards_;
}
inline const ::SearchStatus& ForceMergeResponse::shards() const {
  const ::SearchStatus* p = shards_;
  // @@protoc_insertion_point(field_get:ForceMergeResponse.shards)
  return p != NULL ? *p : *reinterpret_cast<const ::SearchStatus*>(
      &::_SearchStatus_default_instance_);
}
inline ::SearchStatus* ForceMergeResponse::release_shards() {
  // @@protoc_insertion_point(field_release:ForceMergeResponse.shards)
  
  ::SearchStatus* temp = shards_;
  shards_ = NULL;
  return temp;
}
inline ::SearchStatus* ForceMergeResponse::mutable_shards() {
  
  if (shards_ == NULL) {
    auto* p = CreateMaybeMessage<::SearchStatus>(GetArenaNoVirtual());
    shards_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ForceMergeResponse.shards)
  return shards_;
}
inline void ForceMergeResponse::set_allocated_shards(::SearchStatus* shards) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shards_;
  }
  if (shards) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shards = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shards, submessage_arena);
    }
    
  } else {
    
  }
  shards_ = shards;
  // @@protoc_insertion_point(field_set_allocated:ForceMergeResponse.shards)
}

// -------------------------------------------------------------------

// DelByQueryeResponse

// .ResponseHead head = 1;
inline bool DelByQueryeResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void DelByQueryeResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& DelByQueryeResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& DelByQueryeResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:DelByQueryeResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* DelByQueryeResponse::release_head() {
  // @@protoc_insertion_point(field_release:DelByQueryeResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* DelByQueryeResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DelByQueryeResponse.head)
  return head_;
}
inline void DelByQueryeResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:DelByQueryeResponse.head)
}

// int32 DelNum = 2;
inline void DelByQueryeResponse::clear_delnum() {
  delnum_ = 0;
}
inline ::google::protobuf::int32 DelByQueryeResponse::delnum() const {
  // @@protoc_insertion_point(field_get:DelByQueryeResponse.DelNum)
  return delnum_;
}
inline void DelByQueryeResponse::set_delnum(::google::protobuf::int32 value) {
  
  delnum_ = value;
  // @@protoc_insertion_point(field_set:DelByQueryeResponse.DelNum)
}

// repeated string ids_str = 3;
inline int DelByQueryeResponse::ids_str_size() const {
  return ids_str_.size();
}
inline void DelByQueryeResponse::clear_ids_str() {
  ids_str_.Clear();
}
inline const ::std::string& DelByQueryeResponse::ids_str(int index) const {
  // @@protoc_insertion_point(field_get:DelByQueryeResponse.ids_str)
  return ids_str_.Get(index);
}
inline ::std::string* DelByQueryeResponse::mutable_ids_str(int index) {
  // @@protoc_insertion_point(field_mutable:DelByQueryeResponse.ids_str)
  return ids_str_.Mutable(index);
}
inline void DelByQueryeResponse::set_ids_str(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DelByQueryeResponse.ids_str)
  ids_str_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DelByQueryeResponse::set_ids_str(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:DelByQueryeResponse.ids_str)
  ids_str_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DelByQueryeResponse::set_ids_str(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DelByQueryeResponse.ids_str)
}
inline void DelByQueryeResponse::set_ids_str(int index, const char* value, size_t size) {
  ids_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DelByQueryeResponse.ids_str)
}
inline ::std::string* DelByQueryeResponse::add_ids_str() {
  // @@protoc_insertion_point(field_add_mutable:DelByQueryeResponse.ids_str)
  return ids_str_.Add();
}
inline void DelByQueryeResponse::add_ids_str(const ::std::string& value) {
  ids_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DelByQueryeResponse.ids_str)
}
#if LANG_CXX11
inline void DelByQueryeResponse::add_ids_str(::std::string&& value) {
  ids_str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DelByQueryeResponse.ids_str)
}
#endif
inline void DelByQueryeResponse::add_ids_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DelByQueryeResponse.ids_str)
}
inline void DelByQueryeResponse::add_ids_str(const char* value, size_t size) {
  ids_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DelByQueryeResponse.ids_str)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DelByQueryeResponse::ids_str() const {
  // @@protoc_insertion_point(field_list:DelByQueryeResponse.ids_str)
  return ids_str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DelByQueryeResponse::mutable_ids_str() {
  // @@protoc_insertion_point(field_mutable_list:DelByQueryeResponse.ids_str)
  return &ids_str_;
}

// repeated int64 ids_long = 4;
inline int DelByQueryeResponse::ids_long_size() const {
  return ids_long_.size();
}
inline void DelByQueryeResponse::clear_ids_long() {
  ids_long_.Clear();
}
inline ::google::protobuf::int64 DelByQueryeResponse::ids_long(int index) const {
  // @@protoc_insertion_point(field_get:DelByQueryeResponse.ids_long)
  return ids_long_.Get(index);
}
inline void DelByQueryeResponse::set_ids_long(int index, ::google::protobuf::int64 value) {
  ids_long_.Set(index, value);
  // @@protoc_insertion_point(field_set:DelByQueryeResponse.ids_long)
}
inline void DelByQueryeResponse::add_ids_long(::google::protobuf::int64 value) {
  ids_long_.Add(value);
  // @@protoc_insertion_point(field_add:DelByQueryeResponse.ids_long)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DelByQueryeResponse::ids_long() const {
  // @@protoc_insertion_point(field_list:DelByQueryeResponse.ids_long)
  return ids_long_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DelByQueryeResponse::mutable_ids_long() {
  // @@protoc_insertion_point(field_mutable_list:DelByQueryeResponse.ids_long)
  return &ids_long_;
}

// -------------------------------------------------------------------

// FlushResponse

// .ResponseHead head = 1;
inline bool FlushResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void FlushResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& FlushResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& FlushResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:FlushResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* FlushResponse::release_head() {
  // @@protoc_insertion_point(field_release:FlushResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* FlushResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FlushResponse.head)
  return head_;
}
inline void FlushResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:FlushResponse.head)
}

// .SearchStatus shards = 2;
inline bool FlushResponse::has_shards() const {
  return this != internal_default_instance() && shards_ != NULL;
}
inline void FlushResponse::clear_shards() {
  if (GetArenaNoVirtual() == NULL && shards_ != NULL) {
    delete shards_;
  }
  shards_ = NULL;
}
inline const ::SearchStatus& FlushResponse::_internal_shards() const {
  return *shards_;
}
inline const ::SearchStatus& FlushResponse::shards() const {
  const ::SearchStatus* p = shards_;
  // @@protoc_insertion_point(field_get:FlushResponse.shards)
  return p != NULL ? *p : *reinterpret_cast<const ::SearchStatus*>(
      &::_SearchStatus_default_instance_);
}
inline ::SearchStatus* FlushResponse::release_shards() {
  // @@protoc_insertion_point(field_release:FlushResponse.shards)
  
  ::SearchStatus* temp = shards_;
  shards_ = NULL;
  return temp;
}
inline ::SearchStatus* FlushResponse::mutable_shards() {
  
  if (shards_ == NULL) {
    auto* p = CreateMaybeMessage<::SearchStatus>(GetArenaNoVirtual());
    shards_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FlushResponse.shards)
  return shards_;
}
inline void FlushResponse::set_allocated_shards(::SearchStatus* shards) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shards_;
  }
  if (shards) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shards = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shards, submessage_arena);
    }
    
  } else {
    
  }
  shards_ = shards;
  // @@protoc_insertion_point(field_set_allocated:FlushResponse.shards)
}

// -------------------------------------------------------------------

// IndexResponse

// .ResponseHead head = 1;
inline bool IndexResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void IndexResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& IndexResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& IndexResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:IndexResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* IndexResponse::release_head() {
  // @@protoc_insertion_point(field_release:IndexResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* IndexResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IndexResponse.head)
  return head_;
}
inline void IndexResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:IndexResponse.head)
}

// .SearchStatus shards = 2;
inline bool IndexResponse::has_shards() const {
  return this != internal_default_instance() && shards_ != NULL;
}
inline void IndexResponse::clear_shards() {
  if (GetArenaNoVirtual() == NULL && shards_ != NULL) {
    delete shards_;
  }
  shards_ = NULL;
}
inline const ::SearchStatus& IndexResponse::_internal_shards() const {
  return *shards_;
}
inline const ::SearchStatus& IndexResponse::shards() const {
  const ::SearchStatus* p = shards_;
  // @@protoc_insertion_point(field_get:IndexResponse.shards)
  return p != NULL ? *p : *reinterpret_cast<const ::SearchStatus*>(
      &::_SearchStatus_default_instance_);
}
inline ::SearchStatus* IndexResponse::release_shards() {
  // @@protoc_insertion_point(field_release:IndexResponse.shards)
  
  ::SearchStatus* temp = shards_;
  shards_ = NULL;
  return temp;
}
inline ::SearchStatus* IndexResponse::mutable_shards() {
  
  if (shards_ == NULL) {
    auto* p = CreateMaybeMessage<::SearchStatus>(GetArenaNoVirtual());
    shards_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IndexResponse.shards)
  return shards_;
}
inline void IndexResponse::set_allocated_shards(::SearchStatus* shards) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shards_;
  }
  if (shards) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shards = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shards, submessage_arena);
    }
    
  } else {
    
  }
  shards_ = shards;
  // @@protoc_insertion_point(field_set_allocated:IndexResponse.shards)
}

// -------------------------------------------------------------------

// TermFilter

// string field = 1;
inline void TermFilter::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TermFilter::field() const {
  // @@protoc_insertion_point(field_get:TermFilter.field)
  return field_.GetNoArena();
}
inline void TermFilter::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermFilter.field)
}
#if LANG_CXX11
inline void TermFilter::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TermFilter.field)
}
#endif
inline void TermFilter::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermFilter.field)
}
inline void TermFilter::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermFilter.field)
}
inline ::std::string* TermFilter::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:TermFilter.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TermFilter::release_field() {
  // @@protoc_insertion_point(field_release:TermFilter.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermFilter::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:TermFilter.field)
}

// bytes value = 2;
inline void TermFilter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TermFilter::value() const {
  // @@protoc_insertion_point(field_get:TermFilter.value)
  return value_.GetNoArena();
}
inline void TermFilter::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermFilter.value)
}
#if LANG_CXX11
inline void TermFilter::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TermFilter.value)
}
#endif
inline void TermFilter::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermFilter.value)
}
inline void TermFilter::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermFilter.value)
}
inline ::std::string* TermFilter::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:TermFilter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TermFilter::release_value() {
  // @@protoc_insertion_point(field_release:TermFilter.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermFilter::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:TermFilter.value)
}

// int32 is_union = 3;
inline void TermFilter::clear_is_union() {
  is_union_ = 0;
}
inline ::google::protobuf::int32 TermFilter::is_union() const {
  // @@protoc_insertion_point(field_get:TermFilter.is_union)
  return is_union_;
}
inline void TermFilter::set_is_union(::google::protobuf::int32 value) {
  
  is_union_ = value;
  // @@protoc_insertion_point(field_set:TermFilter.is_union)
}

// -------------------------------------------------------------------

// RangeFilter

// string field = 1;
inline void RangeFilter::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeFilter::field() const {
  // @@protoc_insertion_point(field_get:RangeFilter.field)
  return field_.GetNoArena();
}
inline void RangeFilter::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RangeFilter.field)
}
#if LANG_CXX11
inline void RangeFilter::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RangeFilter.field)
}
#endif
inline void RangeFilter::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RangeFilter.field)
}
inline void RangeFilter::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RangeFilter.field)
}
inline ::std::string* RangeFilter::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:RangeFilter.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeFilter::release_field() {
  // @@protoc_insertion_point(field_release:RangeFilter.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeFilter::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:RangeFilter.field)
}

// bytes lower_value = 2;
inline void RangeFilter::clear_lower_value() {
  lower_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeFilter::lower_value() const {
  // @@protoc_insertion_point(field_get:RangeFilter.lower_value)
  return lower_value_.GetNoArena();
}
inline void RangeFilter::set_lower_value(const ::std::string& value) {
  
  lower_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RangeFilter.lower_value)
}
#if LANG_CXX11
inline void RangeFilter::set_lower_value(::std::string&& value) {
  
  lower_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RangeFilter.lower_value)
}
#endif
inline void RangeFilter::set_lower_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lower_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RangeFilter.lower_value)
}
inline void RangeFilter::set_lower_value(const void* value, size_t size) {
  
  lower_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RangeFilter.lower_value)
}
inline ::std::string* RangeFilter::mutable_lower_value() {
  
  // @@protoc_insertion_point(field_mutable:RangeFilter.lower_value)
  return lower_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeFilter::release_lower_value() {
  // @@protoc_insertion_point(field_release:RangeFilter.lower_value)
  
  return lower_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeFilter::set_allocated_lower_value(::std::string* lower_value) {
  if (lower_value != NULL) {
    
  } else {
    
  }
  lower_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lower_value);
  // @@protoc_insertion_point(field_set_allocated:RangeFilter.lower_value)
}

// bytes upper_value = 3;
inline void RangeFilter::clear_upper_value() {
  upper_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeFilter::upper_value() const {
  // @@protoc_insertion_point(field_get:RangeFilter.upper_value)
  return upper_value_.GetNoArena();
}
inline void RangeFilter::set_upper_value(const ::std::string& value) {
  
  upper_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RangeFilter.upper_value)
}
#if LANG_CXX11
inline void RangeFilter::set_upper_value(::std::string&& value) {
  
  upper_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RangeFilter.upper_value)
}
#endif
inline void RangeFilter::set_upper_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upper_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RangeFilter.upper_value)
}
inline void RangeFilter::set_upper_value(const void* value, size_t size) {
  
  upper_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RangeFilter.upper_value)
}
inline ::std::string* RangeFilter::mutable_upper_value() {
  
  // @@protoc_insertion_point(field_mutable:RangeFilter.upper_value)
  return upper_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeFilter::release_upper_value() {
  // @@protoc_insertion_point(field_release:RangeFilter.upper_value)
  
  return upper_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeFilter::set_allocated_upper_value(::std::string* upper_value) {
  if (upper_value != NULL) {
    
  } else {
    
  }
  upper_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upper_value);
  // @@protoc_insertion_point(field_set_allocated:RangeFilter.upper_value)
}

// bool include_lower = 4;
inline void RangeFilter::clear_include_lower() {
  include_lower_ = false;
}
inline bool RangeFilter::include_lower() const {
  // @@protoc_insertion_point(field_get:RangeFilter.include_lower)
  return include_lower_;
}
inline void RangeFilter::set_include_lower(bool value) {
  
  include_lower_ = value;
  // @@protoc_insertion_point(field_set:RangeFilter.include_lower)
}

// bool include_upper = 5;
inline void RangeFilter::clear_include_upper() {
  include_upper_ = false;
}
inline bool RangeFilter::include_upper() const {
  // @@protoc_insertion_point(field_get:RangeFilter.include_upper)
  return include_upper_;
}
inline void RangeFilter::set_include_upper(bool value) {
  
  include_upper_ = value;
  // @@protoc_insertion_point(field_set:RangeFilter.include_upper)
}

// -------------------------------------------------------------------

// SortField

// string field = 1;
inline void SortField::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SortField::field() const {
  // @@protoc_insertion_point(field_get:SortField.field)
  return field_.GetNoArena();
}
inline void SortField::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SortField.field)
}
#if LANG_CXX11
inline void SortField::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SortField.field)
}
#endif
inline void SortField::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SortField.field)
}
inline void SortField::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SortField.field)
}
inline ::std::string* SortField::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:SortField.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SortField::release_field() {
  // @@protoc_insertion_point(field_release:SortField.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SortField::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:SortField.field)
}

// bool type = 2;
inline void SortField::clear_type() {
  type_ = false;
}
inline bool SortField::type() const {
  // @@protoc_insertion_point(field_get:SortField.type)
  return type_;
}
inline void SortField::set_type(bool value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SortField.type)
}

// -------------------------------------------------------------------

// VectorQuery

// string name = 1;
inline void VectorQuery::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorQuery::name() const {
  // @@protoc_insertion_point(field_get:VectorQuery.name)
  return name_.GetNoArena();
}
inline void VectorQuery::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VectorQuery.name)
}
#if LANG_CXX11
inline void VectorQuery::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VectorQuery.name)
}
#endif
inline void VectorQuery::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VectorQuery.name)
}
inline void VectorQuery::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VectorQuery.name)
}
inline ::std::string* VectorQuery::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:VectorQuery.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorQuery::release_name() {
  // @@protoc_insertion_point(field_release:VectorQuery.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorQuery::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:VectorQuery.name)
}

// bytes value = 2;
inline void VectorQuery::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorQuery::value() const {
  // @@protoc_insertion_point(field_get:VectorQuery.value)
  return value_.GetNoArena();
}
inline void VectorQuery::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VectorQuery.value)
}
#if LANG_CXX11
inline void VectorQuery::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VectorQuery.value)
}
#endif
inline void VectorQuery::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VectorQuery.value)
}
inline void VectorQuery::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VectorQuery.value)
}
inline ::std::string* VectorQuery::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:VectorQuery.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorQuery::release_value() {
  // @@protoc_insertion_point(field_release:VectorQuery.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorQuery::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:VectorQuery.value)
}

// double min_score = 3;
inline void VectorQuery::clear_min_score() {
  min_score_ = 0;
}
inline double VectorQuery::min_score() const {
  // @@protoc_insertion_point(field_get:VectorQuery.min_score)
  return min_score_;
}
inline void VectorQuery::set_min_score(double value) {
  
  min_score_ = value;
  // @@protoc_insertion_point(field_set:VectorQuery.min_score)
}

// double max_score = 4;
inline void VectorQuery::clear_max_score() {
  max_score_ = 0;
}
inline double VectorQuery::max_score() const {
  // @@protoc_insertion_point(field_get:VectorQuery.max_score)
  return max_score_;
}
inline void VectorQuery::set_max_score(double value) {
  
  max_score_ = value;
  // @@protoc_insertion_point(field_set:VectorQuery.max_score)
}

// string format = 5;
inline void VectorQuery::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorQuery::format() const {
  // @@protoc_insertion_point(field_get:VectorQuery.format)
  return format_.GetNoArena();
}
inline void VectorQuery::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VectorQuery.format)
}
#if LANG_CXX11
inline void VectorQuery::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VectorQuery.format)
}
#endif
inline void VectorQuery::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VectorQuery.format)
}
inline void VectorQuery::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VectorQuery.format)
}
inline ::std::string* VectorQuery::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:VectorQuery.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorQuery::release_format() {
  // @@protoc_insertion_point(field_release:VectorQuery.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorQuery::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:VectorQuery.format)
}

// string index_type = 6;
inline void VectorQuery::clear_index_type() {
  index_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorQuery::index_type() const {
  // @@protoc_insertion_point(field_get:VectorQuery.index_type)
  return index_type_.GetNoArena();
}
inline void VectorQuery::set_index_type(const ::std::string& value) {
  
  index_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VectorQuery.index_type)
}
#if LANG_CXX11
inline void VectorQuery::set_index_type(::std::string&& value) {
  
  index_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VectorQuery.index_type)
}
#endif
inline void VectorQuery::set_index_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VectorQuery.index_type)
}
inline void VectorQuery::set_index_type(const char* value, size_t size) {
  
  index_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VectorQuery.index_type)
}
inline ::std::string* VectorQuery::mutable_index_type() {
  
  // @@protoc_insertion_point(field_mutable:VectorQuery.index_type)
  return index_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorQuery::release_index_type() {
  // @@protoc_insertion_point(field_release:VectorQuery.index_type)
  
  return index_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorQuery::set_allocated_index_type(::std::string* index_type) {
  if (index_type != NULL) {
    
  } else {
    
  }
  index_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_type);
  // @@protoc_insertion_point(field_set_allocated:VectorQuery.index_type)
}

// -------------------------------------------------------------------

// IndexParameters

// .IndexParameters.DistanceMetricType metric_type = 1;
inline void IndexParameters::clear_metric_type() {
  metric_type_ = 0;
}
inline ::IndexParameters_DistanceMetricType IndexParameters::metric_type() const {
  // @@protoc_insertion_point(field_get:IndexParameters.metric_type)
  return static_cast< ::IndexParameters_DistanceMetricType >(metric_type_);
}
inline void IndexParameters::set_metric_type(::IndexParameters_DistanceMetricType value) {
  
  metric_type_ = value;
  // @@protoc_insertion_point(field_set:IndexParameters.metric_type)
}

// int32 nprobe = 2;
inline void IndexParameters::clear_nprobe() {
  nprobe_ = 0;
}
inline ::google::protobuf::int32 IndexParameters::nprobe() const {
  // @@protoc_insertion_point(field_get:IndexParameters.nprobe)
  return nprobe_;
}
inline void IndexParameters::set_nprobe(::google::protobuf::int32 value) {
  
  nprobe_ = value;
  // @@protoc_insertion_point(field_set:IndexParameters.nprobe)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryRequest

// .RequestHead head = 1;
inline bool QueryRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void QueryRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& QueryRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& QueryRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:QueryRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* QueryRequest::release_head() {
  // @@protoc_insertion_point(field_release:QueryRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* QueryRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:QueryRequest.head)
  return head_;
}
inline void QueryRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:QueryRequest.head)
}

// repeated string document_ids = 2;
inline int QueryRequest::document_ids_size() const {
  return document_ids_.size();
}
inline void QueryRequest::clear_document_ids() {
  document_ids_.Clear();
}
inline const ::std::string& QueryRequest::document_ids(int index) const {
  // @@protoc_insertion_point(field_get:QueryRequest.document_ids)
  return document_ids_.Get(index);
}
inline ::std::string* QueryRequest::mutable_document_ids(int index) {
  // @@protoc_insertion_point(field_mutable:QueryRequest.document_ids)
  return document_ids_.Mutable(index);
}
inline void QueryRequest::set_document_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryRequest.document_ids)
  document_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryRequest::set_document_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:QueryRequest.document_ids)
  document_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryRequest::set_document_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  document_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryRequest.document_ids)
}
inline void QueryRequest::set_document_ids(int index, const char* value, size_t size) {
  document_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryRequest.document_ids)
}
inline ::std::string* QueryRequest::add_document_ids() {
  // @@protoc_insertion_point(field_add_mutable:QueryRequest.document_ids)
  return document_ids_.Add();
}
inline void QueryRequest::add_document_ids(const ::std::string& value) {
  document_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryRequest.document_ids)
}
#if LANG_CXX11
inline void QueryRequest::add_document_ids(::std::string&& value) {
  document_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:QueryRequest.document_ids)
}
#endif
inline void QueryRequest::add_document_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  document_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryRequest.document_ids)
}
inline void QueryRequest::add_document_ids(const char* value, size_t size) {
  document_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryRequest.document_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryRequest::document_ids() const {
  // @@protoc_insertion_point(field_list:QueryRequest.document_ids)
  return document_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryRequest::mutable_document_ids() {
  // @@protoc_insertion_point(field_mutable_list:QueryRequest.document_ids)
  return &document_ids_;
}

// int32 partition_id = 3;
inline void QueryRequest::clear_partition_id() {
  partition_id_ = 0;
}
inline ::google::protobuf::int32 QueryRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:QueryRequest.partition_id)
  return partition_id_;
}
inline void QueryRequest::set_partition_id(::google::protobuf::int32 value) {
  
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.partition_id)
}

// bool next = 4;
inline void QueryRequest::clear_next() {
  next_ = false;
}
inline bool QueryRequest::next() const {
  // @@protoc_insertion_point(field_get:QueryRequest.next)
  return next_;
}
inline void QueryRequest::set_next(bool value) {
  
  next_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.next)
}

// repeated .RangeFilter range_filters = 5;
inline int QueryRequest::range_filters_size() const {
  return range_filters_.size();
}
inline void QueryRequest::clear_range_filters() {
  range_filters_.Clear();
}
inline ::RangeFilter* QueryRequest::mutable_range_filters(int index) {
  // @@protoc_insertion_point(field_mutable:QueryRequest.range_filters)
  return range_filters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::RangeFilter >*
QueryRequest::mutable_range_filters() {
  // @@protoc_insertion_point(field_mutable_list:QueryRequest.range_filters)
  return &range_filters_;
}
inline const ::RangeFilter& QueryRequest::range_filters(int index) const {
  // @@protoc_insertion_point(field_get:QueryRequest.range_filters)
  return range_filters_.Get(index);
}
inline ::RangeFilter* QueryRequest::add_range_filters() {
  // @@protoc_insertion_point(field_add:QueryRequest.range_filters)
  return range_filters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RangeFilter >&
QueryRequest::range_filters() const {
  // @@protoc_insertion_point(field_list:QueryRequest.range_filters)
  return range_filters_;
}

// repeated .TermFilter term_filters = 6;
inline int QueryRequest::term_filters_size() const {
  return term_filters_.size();
}
inline void QueryRequest::clear_term_filters() {
  term_filters_.Clear();
}
inline ::TermFilter* QueryRequest::mutable_term_filters(int index) {
  // @@protoc_insertion_point(field_mutable:QueryRequest.term_filters)
  return term_filters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TermFilter >*
QueryRequest::mutable_term_filters() {
  // @@protoc_insertion_point(field_mutable_list:QueryRequest.term_filters)
  return &term_filters_;
}
inline const ::TermFilter& QueryRequest::term_filters(int index) const {
  // @@protoc_insertion_point(field_get:QueryRequest.term_filters)
  return term_filters_.Get(index);
}
inline ::TermFilter* QueryRequest::add_term_filters() {
  // @@protoc_insertion_point(field_add:QueryRequest.term_filters)
  return term_filters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TermFilter >&
QueryRequest::term_filters() const {
  // @@protoc_insertion_point(field_list:QueryRequest.term_filters)
  return term_filters_;
}

// repeated string fields = 7;
inline int QueryRequest::fields_size() const {
  return fields_.size();
}
inline void QueryRequest::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& QueryRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:QueryRequest.fields)
  return fields_.Get(index);
}
inline ::std::string* QueryRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:QueryRequest.fields)
  return fields_.Mutable(index);
}
inline void QueryRequest::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryRequest.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryRequest::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:QueryRequest.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryRequest::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryRequest.fields)
}
inline void QueryRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryRequest.fields)
}
inline ::std::string* QueryRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:QueryRequest.fields)
  return fields_.Add();
}
inline void QueryRequest::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryRequest.fields)
}
#if LANG_CXX11
inline void QueryRequest::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:QueryRequest.fields)
}
#endif
inline void QueryRequest::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryRequest.fields)
}
inline void QueryRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryRequest.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryRequest::fields() const {
  // @@protoc_insertion_point(field_list:QueryRequest.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:QueryRequest.fields)
  return &fields_;
}

// bool is_vector_value = 8;
inline void QueryRequest::clear_is_vector_value() {
  is_vector_value_ = false;
}
inline bool QueryRequest::is_vector_value() const {
  // @@protoc_insertion_point(field_get:QueryRequest.is_vector_value)
  return is_vector_value_;
}
inline void QueryRequest::set_is_vector_value(bool value) {
  
  is_vector_value_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.is_vector_value)
}

// int32 limit = 9;
inline void QueryRequest::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 QueryRequest::limit() const {
  // @@protoc_insertion_point(field_get:QueryRequest.limit)
  return limit_;
}
inline void QueryRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.limit)
}

// int32 page_size = 10;
inline void QueryRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 QueryRequest::page_size() const {
  // @@protoc_insertion_point(field_get:QueryRequest.page_size)
  return page_size_;
}
inline void QueryRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.page_size)
}

// string load_balance = 11;
inline void QueryRequest::clear_load_balance() {
  load_balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRequest::load_balance() const {
  // @@protoc_insertion_point(field_get:QueryRequest.load_balance)
  return load_balance_.GetNoArena();
}
inline void QueryRequest::set_load_balance(const ::std::string& value) {
  
  load_balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QueryRequest.load_balance)
}
#if LANG_CXX11
inline void QueryRequest::set_load_balance(::std::string&& value) {
  
  load_balance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QueryRequest.load_balance)
}
#endif
inline void QueryRequest::set_load_balance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  load_balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QueryRequest.load_balance)
}
inline void QueryRequest::set_load_balance(const char* value, size_t size) {
  
  load_balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QueryRequest.load_balance)
}
inline ::std::string* QueryRequest::mutable_load_balance() {
  
  // @@protoc_insertion_point(field_mutable:QueryRequest.load_balance)
  return load_balance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_load_balance() {
  // @@protoc_insertion_point(field_release:QueryRequest.load_balance)
  
  return load_balance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_load_balance(::std::string* load_balance) {
  if (load_balance != NULL) {
    
  } else {
    
  }
  load_balance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), load_balance);
  // @@protoc_insertion_point(field_set_allocated:QueryRequest.load_balance)
}

// map<string, string> sort_field_map = 12;
inline int QueryRequest::sort_field_map_size() const {
  return sort_field_map_.size();
}
inline void QueryRequest::clear_sort_field_map() {
  sort_field_map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
QueryRequest::sort_field_map() const {
  // @@protoc_insertion_point(field_map:QueryRequest.sort_field_map)
  return sort_field_map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
QueryRequest::mutable_sort_field_map() {
  // @@protoc_insertion_point(field_mutable_map:QueryRequest.sort_field_map)
  return sort_field_map_.MutableMap();
}

// repeated .SortField sort_fields = 13;
inline int QueryRequest::sort_fields_size() const {
  return sort_fields_.size();
}
inline void QueryRequest::clear_sort_fields() {
  sort_fields_.Clear();
}
inline ::SortField* QueryRequest::mutable_sort_fields(int index) {
  // @@protoc_insertion_point(field_mutable:QueryRequest.sort_fields)
  return sort_fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SortField >*
QueryRequest::mutable_sort_fields() {
  // @@protoc_insertion_point(field_mutable_list:QueryRequest.sort_fields)
  return &sort_fields_;
}
inline const ::SortField& QueryRequest::sort_fields(int index) const {
  // @@protoc_insertion_point(field_get:QueryRequest.sort_fields)
  return sort_fields_.Get(index);
}
inline ::SortField* QueryRequest::add_sort_fields() {
  // @@protoc_insertion_point(field_add:QueryRequest.sort_fields)
  return sort_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortField >&
QueryRequest::sort_fields() const {
  // @@protoc_insertion_point(field_list:QueryRequest.sort_fields)
  return sort_fields_;
}

// bool trace = 14;
inline void QueryRequest::clear_trace() {
  trace_ = false;
}
inline bool QueryRequest::trace() const {
  // @@protoc_insertion_point(field_get:QueryRequest.trace)
  return trace_;
}
inline void QueryRequest::set_trace(bool value) {
  
  trace_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.trace)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SearchRequest

// .RequestHead head = 1;
inline bool SearchRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void SearchRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::RequestHead& SearchRequest::_internal_head() const {
  return *head_;
}
inline const ::RequestHead& SearchRequest::head() const {
  const ::RequestHead* p = head_;
  // @@protoc_insertion_point(field_get:SearchRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::RequestHead*>(
      &::_RequestHead_default_instance_);
}
inline ::RequestHead* SearchRequest::release_head() {
  // @@protoc_insertion_point(field_release:SearchRequest.head)
  
  ::RequestHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::RequestHead* SearchRequest::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::RequestHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SearchRequest.head)
  return head_;
}
inline void SearchRequest::set_allocated_head(::RequestHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.head)
}

// int32 req_num = 2;
inline void SearchRequest::clear_req_num() {
  req_num_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::req_num() const {
  // @@protoc_insertion_point(field_get:SearchRequest.req_num)
  return req_num_;
}
inline void SearchRequest::set_req_num(::google::protobuf::int32 value) {
  
  req_num_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.req_num)
}

// int32 topN = 3;
inline void SearchRequest::clear_topn() {
  topn_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::topn() const {
  // @@protoc_insertion_point(field_get:SearchRequest.topN)
  return topn_;
}
inline void SearchRequest::set_topn(::google::protobuf::int32 value) {
  
  topn_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.topN)
}

// int32 is_brute_search = 4;
inline void SearchRequest::clear_is_brute_search() {
  is_brute_search_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::is_brute_search() const {
  // @@protoc_insertion_point(field_get:SearchRequest.is_brute_search)
  return is_brute_search_;
}
inline void SearchRequest::set_is_brute_search(::google::protobuf::int32 value) {
  
  is_brute_search_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.is_brute_search)
}

// repeated .VectorQuery vec_fields = 5;
inline int SearchRequest::vec_fields_size() const {
  return vec_fields_.size();
}
inline void SearchRequest::clear_vec_fields() {
  vec_fields_.Clear();
}
inline ::VectorQuery* SearchRequest::mutable_vec_fields(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRequest.vec_fields)
  return vec_fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::VectorQuery >*
SearchRequest::mutable_vec_fields() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.vec_fields)
  return &vec_fields_;
}
inline const ::VectorQuery& SearchRequest::vec_fields(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.vec_fields)
  return vec_fields_.Get(index);
}
inline ::VectorQuery* SearchRequest::add_vec_fields() {
  // @@protoc_insertion_point(field_add:SearchRequest.vec_fields)
  return vec_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VectorQuery >&
SearchRequest::vec_fields() const {
  // @@protoc_insertion_point(field_list:SearchRequest.vec_fields)
  return vec_fields_;
}

// repeated string fields = 6;
inline int SearchRequest::fields_size() const {
  return fields_.size();
}
inline void SearchRequest::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& SearchRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.fields)
  return fields_.Get(index);
}
inline ::std::string* SearchRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRequest.fields)
  return fields_.Mutable(index);
}
inline void SearchRequest::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SearchRequest.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchRequest::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SearchRequest.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchRequest::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchRequest.fields)
}
inline void SearchRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.fields)
}
inline ::std::string* SearchRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:SearchRequest.fields)
  return fields_.Add();
}
inline void SearchRequest::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchRequest.fields)
}
#if LANG_CXX11
inline void SearchRequest::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchRequest.fields)
}
#endif
inline void SearchRequest::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchRequest.fields)
}
inline void SearchRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchRequest.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchRequest::fields() const {
  // @@protoc_insertion_point(field_list:SearchRequest.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.fields)
  return &fields_;
}

// repeated .RangeFilter range_filters = 7;
inline int SearchRequest::range_filters_size() const {
  return range_filters_.size();
}
inline void SearchRequest::clear_range_filters() {
  range_filters_.Clear();
}
inline ::RangeFilter* SearchRequest::mutable_range_filters(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRequest.range_filters)
  return range_filters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::RangeFilter >*
SearchRequest::mutable_range_filters() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.range_filters)
  return &range_filters_;
}
inline const ::RangeFilter& SearchRequest::range_filters(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.range_filters)
  return range_filters_.Get(index);
}
inline ::RangeFilter* SearchRequest::add_range_filters() {
  // @@protoc_insertion_point(field_add:SearchRequest.range_filters)
  return range_filters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RangeFilter >&
SearchRequest::range_filters() const {
  // @@protoc_insertion_point(field_list:SearchRequest.range_filters)
  return range_filters_;
}

// repeated .TermFilter term_filters = 8;
inline int SearchRequest::term_filters_size() const {
  return term_filters_.size();
}
inline void SearchRequest::clear_term_filters() {
  term_filters_.Clear();
}
inline ::TermFilter* SearchRequest::mutable_term_filters(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRequest.term_filters)
  return term_filters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TermFilter >*
SearchRequest::mutable_term_filters() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.term_filters)
  return &term_filters_;
}
inline const ::TermFilter& SearchRequest::term_filters(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.term_filters)
  return term_filters_.Get(index);
}
inline ::TermFilter* SearchRequest::add_term_filters() {
  // @@protoc_insertion_point(field_add:SearchRequest.term_filters)
  return term_filters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TermFilter >&
SearchRequest::term_filters() const {
  // @@protoc_insertion_point(field_list:SearchRequest.term_filters)
  return term_filters_;
}

// string index_params = 9;
inline void SearchRequest::clear_index_params() {
  index_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::index_params() const {
  // @@protoc_insertion_point(field_get:SearchRequest.index_params)
  return index_params_.GetNoArena();
}
inline void SearchRequest::set_index_params(const ::std::string& value) {
  
  index_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SearchRequest.index_params)
}
#if LANG_CXX11
inline void SearchRequest::set_index_params(::std::string&& value) {
  
  index_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SearchRequest.index_params)
}
#endif
inline void SearchRequest::set_index_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SearchRequest.index_params)
}
inline void SearchRequest::set_index_params(const char* value, size_t size) {
  
  index_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.index_params)
}
inline ::std::string* SearchRequest::mutable_index_params() {
  
  // @@protoc_insertion_point(field_mutable:SearchRequest.index_params)
  return index_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_index_params() {
  // @@protoc_insertion_point(field_release:SearchRequest.index_params)
  
  return index_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_index_params(::std::string* index_params) {
  if (index_params != NULL) {
    
  } else {
    
  }
  index_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_params);
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.index_params)
}

// int32 multi_vector_rank = 10;
inline void SearchRequest::clear_multi_vector_rank() {
  multi_vector_rank_ = 0;
}
inline ::google::protobuf::int32 SearchRequest::multi_vector_rank() const {
  // @@protoc_insertion_point(field_get:SearchRequest.multi_vector_rank)
  return multi_vector_rank_;
}
inline void SearchRequest::set_multi_vector_rank(::google::protobuf::int32 value) {
  
  multi_vector_rank_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.multi_vector_rank)
}

// bool l2_sqrt = 11;
inline void SearchRequest::clear_l2_sqrt() {
  l2_sqrt_ = false;
}
inline bool SearchRequest::l2_sqrt() const {
  // @@protoc_insertion_point(field_get:SearchRequest.l2_sqrt)
  return l2_sqrt_;
}
inline void SearchRequest::set_l2_sqrt(bool value) {
  
  l2_sqrt_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.l2_sqrt)
}

// bool is_vector_value = 12;
inline void SearchRequest::clear_is_vector_value() {
  is_vector_value_ = false;
}
inline bool SearchRequest::is_vector_value() const {
  // @@protoc_insertion_point(field_get:SearchRequest.is_vector_value)
  return is_vector_value_;
}
inline void SearchRequest::set_is_vector_value(bool value) {
  
  is_vector_value_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.is_vector_value)
}

// map<string, string> sort_field_map = 13;
inline int SearchRequest::sort_field_map_size() const {
  return sort_field_map_.size();
}
inline void SearchRequest::clear_sort_field_map() {
  sort_field_map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SearchRequest::sort_field_map() const {
  // @@protoc_insertion_point(field_map:SearchRequest.sort_field_map)
  return sort_field_map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SearchRequest::mutable_sort_field_map() {
  // @@protoc_insertion_point(field_mutable_map:SearchRequest.sort_field_map)
  return sort_field_map_.MutableMap();
}

// repeated .SortField sort_fields = 14;
inline int SearchRequest::sort_fields_size() const {
  return sort_fields_.size();
}
inline void SearchRequest::clear_sort_fields() {
  sort_fields_.Clear();
}
inline ::SortField* SearchRequest::mutable_sort_fields(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRequest.sort_fields)
  return sort_fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SortField >*
SearchRequest::mutable_sort_fields() {
  // @@protoc_insertion_point(field_mutable_list:SearchRequest.sort_fields)
  return &sort_fields_;
}
inline const ::SortField& SearchRequest::sort_fields(int index) const {
  // @@protoc_insertion_point(field_get:SearchRequest.sort_fields)
  return sort_fields_.Get(index);
}
inline ::SortField* SearchRequest::add_sort_fields() {
  // @@protoc_insertion_point(field_add:SearchRequest.sort_fields)
  return sort_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortField >&
SearchRequest::sort_fields() const {
  // @@protoc_insertion_point(field_list:SearchRequest.sort_fields)
  return sort_fields_;
}

// string ranker = 15;
inline void SearchRequest::clear_ranker() {
  ranker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::ranker() const {
  // @@protoc_insertion_point(field_get:SearchRequest.ranker)
  return ranker_.GetNoArena();
}
inline void SearchRequest::set_ranker(const ::std::string& value) {
  
  ranker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SearchRequest.ranker)
}
#if LANG_CXX11
inline void SearchRequest::set_ranker(::std::string&& value) {
  
  ranker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SearchRequest.ranker)
}
#endif
inline void SearchRequest::set_ranker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ranker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SearchRequest.ranker)
}
inline void SearchRequest::set_ranker(const char* value, size_t size) {
  
  ranker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.ranker)
}
inline ::std::string* SearchRequest::mutable_ranker() {
  
  // @@protoc_insertion_point(field_mutable:SearchRequest.ranker)
  return ranker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_ranker() {
  // @@protoc_insertion_point(field_release:SearchRequest.ranker)
  
  return ranker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_ranker(::std::string* ranker) {
  if (ranker != NULL) {
    
  } else {
    
  }
  ranker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ranker);
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.ranker)
}

// bool trace = 16;
inline void SearchRequest::clear_trace() {
  trace_ = false;
}
inline bool SearchRequest::trace() const {
  // @@protoc_insertion_point(field_get:SearchRequest.trace)
  return trace_;
}
inline void SearchRequest::set_trace(bool value) {
  
  trace_ = value;
  // @@protoc_insertion_point(field_set:SearchRequest.trace)
}

// -------------------------------------------------------------------

// ResultItem

// double score = 1;
inline void ResultItem::clear_score() {
  score_ = 0;
}
inline double ResultItem::score() const {
  // @@protoc_insertion_point(field_get:ResultItem.score)
  return score_;
}
inline void ResultItem::set_score(double value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:ResultItem.score)
}

// repeated .Field fields = 2;
inline int ResultItem::fields_size() const {
  return fields_.size();
}
inline ::Field* ResultItem::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ResultItem.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Field >*
ResultItem::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ResultItem.fields)
  return &fields_;
}
inline const ::Field& ResultItem::fields(int index) const {
  // @@protoc_insertion_point(field_get:ResultItem.fields)
  return fields_.Get(index);
}
inline ::Field* ResultItem::add_fields() {
  // @@protoc_insertion_point(field_add:ResultItem.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Field >&
ResultItem::fields() const {
  // @@protoc_insertion_point(field_list:ResultItem.fields)
  return fields_;
}

// string p_key = 3;
inline void ResultItem::clear_p_key() {
  p_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResultItem::p_key() const {
  // @@protoc_insertion_point(field_get:ResultItem.p_key)
  return p_key_.GetNoArena();
}
inline void ResultItem::set_p_key(const ::std::string& value) {
  
  p_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResultItem.p_key)
}
#if LANG_CXX11
inline void ResultItem::set_p_key(::std::string&& value) {
  
  p_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResultItem.p_key)
}
#endif
inline void ResultItem::set_p_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  p_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResultItem.p_key)
}
inline void ResultItem::set_p_key(const char* value, size_t size) {
  
  p_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResultItem.p_key)
}
inline ::std::string* ResultItem::mutable_p_key() {
  
  // @@protoc_insertion_point(field_mutable:ResultItem.p_key)
  return p_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultItem::release_p_key() {
  // @@protoc_insertion_point(field_release:ResultItem.p_key)
  
  return p_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultItem::set_allocated_p_key(::std::string* p_key) {
  if (p_key != NULL) {
    
  } else {
    
  }
  p_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_key);
  // @@protoc_insertion_point(field_set_allocated:ResultItem.p_key)
}

// bytes source = 4;
inline void ResultItem::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResultItem::source() const {
  // @@protoc_insertion_point(field_get:ResultItem.source)
  return source_.GetNoArena();
}
inline void ResultItem::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResultItem.source)
}
#if LANG_CXX11
inline void ResultItem::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResultItem.source)
}
#endif
inline void ResultItem::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResultItem.source)
}
inline void ResultItem::set_source(const void* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResultItem.source)
}
inline ::std::string* ResultItem::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:ResultItem.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultItem::release_source() {
  // @@protoc_insertion_point(field_release:ResultItem.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultItem::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:ResultItem.source)
}

// -------------------------------------------------------------------

// SearchResult

// int32 total_hits = 1;
inline void SearchResult::clear_total_hits() {
  total_hits_ = 0;
}
inline ::google::protobuf::int32 SearchResult::total_hits() const {
  // @@protoc_insertion_point(field_get:SearchResult.total_hits)
  return total_hits_;
}
inline void SearchResult::set_total_hits(::google::protobuf::int32 value) {
  
  total_hits_ = value;
  // @@protoc_insertion_point(field_set:SearchResult.total_hits)
}

// double max_score = 2;
inline void SearchResult::clear_max_score() {
  max_score_ = 0;
}
inline double SearchResult::max_score() const {
  // @@protoc_insertion_point(field_get:SearchResult.max_score)
  return max_score_;
}
inline void SearchResult::set_max_score(double value) {
  
  max_score_ = value;
  // @@protoc_insertion_point(field_set:SearchResult.max_score)
}

// int64 max_took = 3;
inline void SearchResult::clear_max_took() {
  max_took_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SearchResult::max_took() const {
  // @@protoc_insertion_point(field_get:SearchResult.max_took)
  return max_took_;
}
inline void SearchResult::set_max_took(::google::protobuf::int64 value) {
  
  max_took_ = value;
  // @@protoc_insertion_point(field_set:SearchResult.max_took)
}

// uint32 max_took_id = 4;
inline void SearchResult::clear_max_took_id() {
  max_took_id_ = 0u;
}
inline ::google::protobuf::uint32 SearchResult::max_took_id() const {
  // @@protoc_insertion_point(field_get:SearchResult.max_took_id)
  return max_took_id_;
}
inline void SearchResult::set_max_took_id(::google::protobuf::uint32 value) {
  
  max_took_id_ = value;
  // @@protoc_insertion_point(field_set:SearchResult.max_took_id)
}

// .SearchStatus status = 5;
inline bool SearchResult::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void SearchResult::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::SearchStatus& SearchResult::_internal_status() const {
  return *status_;
}
inline const ::SearchStatus& SearchResult::status() const {
  const ::SearchStatus* p = status_;
  // @@protoc_insertion_point(field_get:SearchResult.status)
  return p != NULL ? *p : *reinterpret_cast<const ::SearchStatus*>(
      &::_SearchStatus_default_instance_);
}
inline ::SearchStatus* SearchResult::release_status() {
  // @@protoc_insertion_point(field_release:SearchResult.status)
  
  ::SearchStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::SearchStatus* SearchResult::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::SearchStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SearchResult.status)
  return status_;
}
inline void SearchResult::set_allocated_status(::SearchStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:SearchResult.status)
}

// string msg = 6;
inline void SearchResult::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchResult::msg() const {
  // @@protoc_insertion_point(field_get:SearchResult.msg)
  return msg_.GetNoArena();
}
inline void SearchResult::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SearchResult.msg)
}
#if LANG_CXX11
inline void SearchResult::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SearchResult.msg)
}
#endif
inline void SearchResult::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SearchResult.msg)
}
inline void SearchResult::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SearchResult.msg)
}
inline ::std::string* SearchResult::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:SearchResult.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchResult::release_msg() {
  // @@protoc_insertion_point(field_release:SearchResult.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResult::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:SearchResult.msg)
}

// repeated .ResultItem result_items = 7;
inline int SearchResult::result_items_size() const {
  return result_items_.size();
}
inline void SearchResult::clear_result_items() {
  result_items_.Clear();
}
inline ::ResultItem* SearchResult::mutable_result_items(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResult.result_items)
  return result_items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ResultItem >*
SearchResult::mutable_result_items() {
  // @@protoc_insertion_point(field_mutable_list:SearchResult.result_items)
  return &result_items_;
}
inline const ::ResultItem& SearchResult::result_items(int index) const {
  // @@protoc_insertion_point(field_get:SearchResult.result_items)
  return result_items_.Get(index);
}
inline ::ResultItem* SearchResult::add_result_items() {
  // @@protoc_insertion_point(field_add:SearchResult.result_items)
  return result_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ResultItem >&
SearchResult::result_items() const {
  // @@protoc_insertion_point(field_list:SearchResult.result_items)
  return result_items_;
}

// uint32 pID = 8;
inline void SearchResult::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 SearchResult::pid() const {
  // @@protoc_insertion_point(field_get:SearchResult.pID)
  return pid_;
}
inline void SearchResult::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:SearchResult.pID)
}

// bool timeout = 9;
inline void SearchResult::clear_timeout() {
  timeout_ = false;
}
inline bool SearchResult::timeout() const {
  // @@protoc_insertion_point(field_get:SearchResult.timeout)
  return timeout_;
}
inline void SearchResult::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:SearchResult.timeout)
}

// int32 topN = 10;
inline void SearchResult::clear_topn() {
  topn_ = 0;
}
inline ::google::protobuf::int32 SearchResult::topn() const {
  // @@protoc_insertion_point(field_get:SearchResult.topN)
  return topn_;
}
inline void SearchResult::set_topn(::google::protobuf::int32 value) {
  
  topn_ = value;
  // @@protoc_insertion_point(field_set:SearchResult.topN)
}

// -------------------------------------------------------------------

// SearchResponse

// .ResponseHead head = 1;
inline bool SearchResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void SearchResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ResponseHead& SearchResponse::_internal_head() const {
  return *head_;
}
inline const ::ResponseHead& SearchResponse::head() const {
  const ::ResponseHead* p = head_;
  // @@protoc_insertion_point(field_get:SearchResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ResponseHead*>(
      &::_ResponseHead_default_instance_);
}
inline ::ResponseHead* SearchResponse::release_head() {
  // @@protoc_insertion_point(field_release:SearchResponse.head)
  
  ::ResponseHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ResponseHead* SearchResponse::mutable_head() {
  
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::ResponseHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SearchResponse.head)
  return head_;
}
inline void SearchResponse::set_allocated_head(::ResponseHead* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:SearchResponse.head)
}

// repeated .SearchResult results = 2;
inline int SearchResponse::results_size() const {
  return results_.size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::SearchResult* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SearchResult >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:SearchResponse.results)
  return &results_;
}
inline const ::SearchResult& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:SearchResponse.results)
  return results_.Get(index);
}
inline ::SearchResult* SearchResponse::add_results() {
  // @@protoc_insertion_point(field_add:SearchResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SearchResult >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:SearchResponse.results)
  return results_;
}

// bool timeout = 3;
inline void SearchResponse::clear_timeout() {
  timeout_ = false;
}
inline bool SearchResponse::timeout() const {
  // @@protoc_insertion_point(field_get:SearchResponse.timeout)
  return timeout_;
}
inline void SearchResponse::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:SearchResponse.timeout)
}

// bytes FlatBytes = 4;
inline void SearchResponse::clear_flatbytes() {
  flatbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchResponse::flatbytes() const {
  // @@protoc_insertion_point(field_get:SearchResponse.FlatBytes)
  return flatbytes_.GetNoArena();
}
inline void SearchResponse::set_flatbytes(const ::std::string& value) {
  
  flatbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SearchResponse.FlatBytes)
}
#if LANG_CXX11
inline void SearchResponse::set_flatbytes(::std::string&& value) {
  
  flatbytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SearchResponse.FlatBytes)
}
#endif
inline void SearchResponse::set_flatbytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flatbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SearchResponse.FlatBytes)
}
inline void SearchResponse::set_flatbytes(const void* value, size_t size) {
  
  flatbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SearchResponse.FlatBytes)
}
inline ::std::string* SearchResponse::mutable_flatbytes() {
  
  // @@protoc_insertion_point(field_mutable:SearchResponse.FlatBytes)
  return flatbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchResponse::release_flatbytes() {
  // @@protoc_insertion_point(field_release:SearchResponse.FlatBytes)
  
  return flatbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResponse::set_allocated_flatbytes(::std::string* flatbytes) {
  if (flatbytes != NULL) {
    
  } else {
    
  }
  flatbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flatbytes);
  // @@protoc_insertion_point(field_set_allocated:SearchResponse.FlatBytes)
}

// int32 top_size = 5;
inline void SearchResponse::clear_top_size() {
  top_size_ = 0;
}
inline ::google::protobuf::int32 SearchResponse::top_size() const {
  // @@protoc_insertion_point(field_get:SearchResponse.top_size)
  return top_size_;
}
inline void SearchResponse::set_top_size(::google::protobuf::int32 value) {
  
  top_size_ = value;
  // @@protoc_insertion_point(field_set:SearchResponse.top_size)
}

// -------------------------------------------------------------------

// SearchStatus

// int32 total = 1;
inline void SearchStatus::clear_total() {
  total_ = 0;
}
inline ::google::protobuf::int32 SearchStatus::total() const {
  // @@protoc_insertion_point(field_get:SearchStatus.total)
  return total_;
}
inline void SearchStatus::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:SearchStatus.total)
}

// int32 failed = 2;
inline void SearchStatus::clear_failed() {
  failed_ = 0;
}
inline ::google::protobuf::int32 SearchStatus::failed() const {
  // @@protoc_insertion_point(field_get:SearchStatus.failed)
  return failed_;
}
inline void SearchStatus::set_failed(::google::protobuf::int32 value) {
  
  failed_ = value;
  // @@protoc_insertion_point(field_set:SearchStatus.failed)
}

// int32 successful = 3;
inline void SearchStatus::clear_successful() {
  successful_ = 0;
}
inline ::google::protobuf::int32 SearchStatus::successful() const {
  // @@protoc_insertion_point(field_get:SearchStatus.successful)
  return successful_;
}
inline void SearchStatus::set_successful(::google::protobuf::int32 value) {
  
  successful_ = value;
  // @@protoc_insertion_point(field_set:SearchStatus.successful)
}

// string msg = 4;
inline void SearchStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchStatus::msg() const {
  // @@protoc_insertion_point(field_get:SearchStatus.msg)
  return msg_.GetNoArena();
}
inline void SearchStatus::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SearchStatus.msg)
}
#if LANG_CXX11
inline void SearchStatus::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SearchStatus.msg)
}
#endif
inline void SearchStatus::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SearchStatus.msg)
}
inline void SearchStatus::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SearchStatus.msg)
}
inline ::std::string* SearchStatus::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:SearchStatus.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchStatus::release_msg() {
  // @@protoc_insertion_point(field_release:SearchStatus.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:SearchStatus.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::IndexParameters_DistanceMetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IndexParameters_DistanceMetricType>() {
  return ::IndexParameters_DistanceMetricType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_router_5fgrpc_2eproto
