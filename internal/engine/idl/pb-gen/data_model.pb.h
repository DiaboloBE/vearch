// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "errors.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fmodel_2eproto;
class DB;
struct DBDefaultTypeInternal;
extern DBDefaultTypeInternal _DB_default_instance_;
class DB_UserPasswordPairEntry_DoNotUse;
struct DB_UserPasswordPairEntry_DoNotUseDefaultTypeInternal;
extern DB_UserPasswordPairEntry_DoNotUseDefaultTypeInternal _DB_UserPasswordPairEntry_DoNotUse_default_instance_;
class Document;
struct DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Field;
struct FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class FieldMetaInfo;
struct FieldMetaInfoDefaultTypeInternal;
extern FieldMetaInfoDefaultTypeInternal _FieldMetaInfo_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class Table;
struct TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableMetaInfo;
struct TableMetaInfoDefaultTypeInternal;
extern TableMetaInfoDefaultTypeInternal _TableMetaInfo_default_instance_;
class VectorMetaInfo;
struct VectorMetaInfoDefaultTypeInternal;
extern VectorMetaInfoDefaultTypeInternal _VectorMetaInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DB* Arena::CreateMaybeMessage<::DB>(Arena*);
template<> ::DB_UserPasswordPairEntry_DoNotUse* Arena::CreateMaybeMessage<::DB_UserPasswordPairEntry_DoNotUse>(Arena*);
template<> ::Document* Arena::CreateMaybeMessage<::Document>(Arena*);
template<> ::Field* Arena::CreateMaybeMessage<::Field>(Arena*);
template<> ::FieldMetaInfo* Arena::CreateMaybeMessage<::FieldMetaInfo>(Arena*);
template<> ::Item* Arena::CreateMaybeMessage<::Item>(Arena*);
template<> ::Table* Arena::CreateMaybeMessage<::Table>(Arena*);
template<> ::TableMetaInfo* Arena::CreateMaybeMessage<::TableMetaInfo>(Arena*);
template<> ::VectorMetaInfo* Arena::CreateMaybeMessage<::VectorMetaInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum VectorMetaInfo_ValueType : int {
  VectorMetaInfo_ValueType_FLOAT = 0,
  VectorMetaInfo_ValueType_UINT8 = 1,
  VectorMetaInfo_ValueType_VectorMetaInfo_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VectorMetaInfo_ValueType_VectorMetaInfo_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VectorMetaInfo_ValueType_IsValid(int value);
constexpr VectorMetaInfo_ValueType VectorMetaInfo_ValueType_ValueType_MIN = VectorMetaInfo_ValueType_FLOAT;
constexpr VectorMetaInfo_ValueType VectorMetaInfo_ValueType_ValueType_MAX = VectorMetaInfo_ValueType_UINT8;
constexpr int VectorMetaInfo_ValueType_ValueType_ARRAYSIZE = VectorMetaInfo_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorMetaInfo_ValueType_descriptor();
template<typename T>
inline const std::string& VectorMetaInfo_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorMetaInfo_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorMetaInfo_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorMetaInfo_ValueType_descriptor(), enum_t_value);
}
inline bool VectorMetaInfo_ValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorMetaInfo_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorMetaInfo_ValueType>(
    VectorMetaInfo_ValueType_descriptor(), name, value);
}
enum VectorMetaInfo_StoreType : int {
  VectorMetaInfo_StoreType_MEMORYONLY = 0,
  VectorMetaInfo_StoreType_ROCKSDB = 1,
  VectorMetaInfo_StoreType_VectorMetaInfo_StoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VectorMetaInfo_StoreType_VectorMetaInfo_StoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VectorMetaInfo_StoreType_IsValid(int value);
constexpr VectorMetaInfo_StoreType VectorMetaInfo_StoreType_StoreType_MIN = VectorMetaInfo_StoreType_MEMORYONLY;
constexpr VectorMetaInfo_StoreType VectorMetaInfo_StoreType_StoreType_MAX = VectorMetaInfo_StoreType_ROCKSDB;
constexpr int VectorMetaInfo_StoreType_StoreType_ARRAYSIZE = VectorMetaInfo_StoreType_StoreType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorMetaInfo_StoreType_descriptor();
template<typename T>
inline const std::string& VectorMetaInfo_StoreType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorMetaInfo_StoreType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorMetaInfo_StoreType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorMetaInfo_StoreType_descriptor(), enum_t_value);
}
inline bool VectorMetaInfo_StoreType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorMetaInfo_StoreType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorMetaInfo_StoreType>(
    VectorMetaInfo_StoreType_descriptor(), name, value);
}
enum FieldType : int {
  INT = 0,
  LONG = 1,
  FLOAT = 2,
  DOUBLE = 3,
  STRING = 4,
  VECTOR = 5,
  BOOL = 6,
  DATE = 7,
  STRINGARRAY = 8,
  FieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FieldType_IsValid(int value);
constexpr FieldType FieldType_MIN = INT;
constexpr FieldType FieldType_MAX = STRINGARRAY;
constexpr int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor();
template<typename T>
inline const std::string& FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldType_descriptor(), enum_t_value);
}
inline bool FieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
enum FieldOption : int {
  Null = 0,
  Index = 1,
  FieldOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FieldOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FieldOption_IsValid(int value);
constexpr FieldOption FieldOption_MIN = Null;
constexpr FieldOption FieldOption_MAX = Index;
constexpr int FieldOption_ARRAYSIZE = FieldOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldOption_descriptor();
template<typename T>
inline const std::string& FieldOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldOption_descriptor(), enum_t_value);
}
inline bool FieldOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldOption>(
    FieldOption_descriptor(), name, value);
}
// ===================================================================

class Field final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Field) */ {
 public:
  inline Field() : Field(nullptr) {}
  ~Field() override;
  explicit PROTOBUF_CONSTEXPR Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Field& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Field& from) {
    Field::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Field";
  }
  protected:
  explicit Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 3,
    kTypeFieldNumber = 2,
    kOptionFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .FieldType type = 2;
  void clear_type();
  ::FieldType type() const;
  void set_type(::FieldType value);
  private:
  ::FieldType _internal_type() const;
  void _internal_set_type(::FieldType value);
  public:

  // .FieldOption option = 4;
  void clear_option();
  ::FieldOption option() const;
  void set_option(::FieldOption value);
  private:
  ::FieldOption _internal_option() const;
  void _internal_set_option(::FieldOption value);
  public:

  // @@protoc_insertion_point(class_scope:Field)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int type_;
    int option_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Document final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Document) */ {
 public:
  inline Document() : Document(nullptr) {}
  ~Document() override;
  explicit PROTOBUF_CONSTEXPR Document(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Document& default_instance() {
    return *internal_default_instance();
  }
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Document* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Document& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Document& from) {
    Document::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Document";
  }
  protected:
  explicit Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kPKeyFieldNumber = 1,
  };
  // repeated .Field fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::Field* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Field >*
      mutable_fields();
  private:
  const ::Field& _internal_fields(int index) const;
  ::Field* _internal_add_fields();
  public:
  const ::Field& fields(int index) const;
  ::Field* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Field >&
      fields() const;

  // string p_key = 1;
  void clear_p_key();
  const std::string& p_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_p_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_p_key();
  PROTOBUF_NODISCARD std::string* release_p_key();
  void set_allocated_p_key(std::string* p_key);
  private:
  const std::string& _internal_p_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_p_key(const std::string& value);
  std::string* _internal_mutable_p_key();
  public:

  // @@protoc_insertion_point(class_scope:Document)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Field > fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kErrFieldNumber = 1,
    kDocFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .Error err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const ::Error& err() const;
  PROTOBUF_NODISCARD ::Error* release_err();
  ::Error* mutable_err();
  void set_allocated_err(::Error* err);
  private:
  const ::Error& _internal_err() const;
  ::Error* _internal_mutable_err();
  public:
  void unsafe_arena_set_allocated_err(
      ::Error* err);
  ::Error* unsafe_arena_release_err();

  // .Document doc = 2;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::Document& doc() const;
  PROTOBUF_NODISCARD ::Document* release_doc();
  ::Document* mutable_doc();
  void set_allocated_doc(::Document* doc);
  private:
  const ::Document& _internal_doc() const;
  ::Document* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::Document* doc);
  ::Document* unsafe_arena_release_doc();

  // @@protoc_insertion_point(class_scope:Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::Error* err_;
    ::Document* doc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class VectorMetaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VectorMetaInfo) */ {
 public:
  inline VectorMetaInfo() : VectorMetaInfo(nullptr) {}
  ~VectorMetaInfo() override;
  explicit PROTOBUF_CONSTEXPR VectorMetaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorMetaInfo(const VectorMetaInfo& from);
  VectorMetaInfo(VectorMetaInfo&& from) noexcept
    : VectorMetaInfo() {
    *this = ::std::move(from);
  }

  inline VectorMetaInfo& operator=(const VectorMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorMetaInfo& operator=(VectorMetaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorMetaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorMetaInfo* internal_default_instance() {
    return reinterpret_cast<const VectorMetaInfo*>(
               &_VectorMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VectorMetaInfo& a, VectorMetaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorMetaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorMetaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorMetaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorMetaInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorMetaInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorMetaInfo& from) {
    VectorMetaInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorMetaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VectorMetaInfo";
  }
  protected:
  explicit VectorMetaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VectorMetaInfo_ValueType ValueType;
  static constexpr ValueType FLOAT =
    VectorMetaInfo_ValueType_FLOAT;
  static constexpr ValueType UINT8 =
    VectorMetaInfo_ValueType_UINT8;
  static inline bool ValueType_IsValid(int value) {
    return VectorMetaInfo_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    VectorMetaInfo_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    VectorMetaInfo_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    VectorMetaInfo_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return VectorMetaInfo_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return VectorMetaInfo_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueType* value) {
    return VectorMetaInfo_ValueType_Parse(name, value);
  }

  typedef VectorMetaInfo_StoreType StoreType;
  static constexpr StoreType MEMORYONLY =
    VectorMetaInfo_StoreType_MEMORYONLY;
  static constexpr StoreType ROCKSDB =
    VectorMetaInfo_StoreType_ROCKSDB;
  static inline bool StoreType_IsValid(int value) {
    return VectorMetaInfo_StoreType_IsValid(value);
  }
  static constexpr StoreType StoreType_MIN =
    VectorMetaInfo_StoreType_StoreType_MIN;
  static constexpr StoreType StoreType_MAX =
    VectorMetaInfo_StoreType_StoreType_MAX;
  static constexpr int StoreType_ARRAYSIZE =
    VectorMetaInfo_StoreType_StoreType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StoreType_descriptor() {
    return VectorMetaInfo_StoreType_descriptor();
  }
  template<typename T>
  static inline const std::string& StoreType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StoreType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StoreType_Name.");
    return VectorMetaInfo_StoreType_Name(enum_t_value);
  }
  static inline bool StoreType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StoreType* value) {
    return VectorMetaInfo_StoreType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStoreParamFieldNumber = 4,
    kDimensionFieldNumber = 1,
    kValueTypeFieldNumber = 2,
    kStoreTypeFieldNumber = 3,
  };
  // string store_param = 4;
  void clear_store_param();
  const std::string& store_param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_store_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_store_param();
  PROTOBUF_NODISCARD std::string* release_store_param();
  void set_allocated_store_param(std::string* store_param);
  private:
  const std::string& _internal_store_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_store_param(const std::string& value);
  std::string* _internal_mutable_store_param();
  public:

  // int32 dimension = 1;
  void clear_dimension();
  int32_t dimension() const;
  void set_dimension(int32_t value);
  private:
  int32_t _internal_dimension() const;
  void _internal_set_dimension(int32_t value);
  public:

  // .VectorMetaInfo.ValueType value_type = 2;
  void clear_value_type();
  ::VectorMetaInfo_ValueType value_type() const;
  void set_value_type(::VectorMetaInfo_ValueType value);
  private:
  ::VectorMetaInfo_ValueType _internal_value_type() const;
  void _internal_set_value_type(::VectorMetaInfo_ValueType value);
  public:

  // .VectorMetaInfo.StoreType store_type = 3;
  void clear_store_type();
  ::VectorMetaInfo_StoreType store_type() const;
  void set_store_type(::VectorMetaInfo_StoreType value);
  private:
  ::VectorMetaInfo_StoreType _internal_store_type() const;
  void _internal_set_store_type(::VectorMetaInfo_StoreType value);
  public:

  // @@protoc_insertion_point(class_scope:VectorMetaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_param_;
    int32_t dimension_;
    int value_type_;
    int store_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class FieldMetaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FieldMetaInfo) */ {
 public:
  inline FieldMetaInfo() : FieldMetaInfo(nullptr) {}
  ~FieldMetaInfo() override;
  explicit PROTOBUF_CONSTEXPR FieldMetaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldMetaInfo(const FieldMetaInfo& from);
  FieldMetaInfo(FieldMetaInfo&& from) noexcept
    : FieldMetaInfo() {
    *this = ::std::move(from);
  }

  inline FieldMetaInfo& operator=(const FieldMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMetaInfo& operator=(FieldMetaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldMetaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldMetaInfo* internal_default_instance() {
    return reinterpret_cast<const FieldMetaInfo*>(
               &_FieldMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldMetaInfo& a, FieldMetaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMetaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldMetaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldMetaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldMetaInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldMetaInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldMetaInfo& from) {
    FieldMetaInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMetaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FieldMetaInfo";
  }
  protected:
  explicit FieldMetaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVectorMetaInfoFieldNumber = 4,
    kDataTypeFieldNumber = 2,
    kIsIndexFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .VectorMetaInfo vector_meta_info = 4;
  bool has_vector_meta_info() const;
  private:
  bool _internal_has_vector_meta_info() const;
  public:
  void clear_vector_meta_info();
  const ::VectorMetaInfo& vector_meta_info() const;
  PROTOBUF_NODISCARD ::VectorMetaInfo* release_vector_meta_info();
  ::VectorMetaInfo* mutable_vector_meta_info();
  void set_allocated_vector_meta_info(::VectorMetaInfo* vector_meta_info);
  private:
  const ::VectorMetaInfo& _internal_vector_meta_info() const;
  ::VectorMetaInfo* _internal_mutable_vector_meta_info();
  public:
  void unsafe_arena_set_allocated_vector_meta_info(
      ::VectorMetaInfo* vector_meta_info);
  ::VectorMetaInfo* unsafe_arena_release_vector_meta_info();

  // .FieldType data_type = 2;
  void clear_data_type();
  ::FieldType data_type() const;
  void set_data_type(::FieldType value);
  private:
  ::FieldType _internal_data_type() const;
  void _internal_set_data_type(::FieldType value);
  public:

  // bool is_index = 3;
  void clear_is_index();
  bool is_index() const;
  void set_is_index(bool value);
  private:
  bool _internal_is_index() const;
  void _internal_set_is_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FieldMetaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::VectorMetaInfo* vector_meta_info_;
    int data_type_;
    bool is_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TableMetaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TableMetaInfo) */ {
 public:
  inline TableMetaInfo() : TableMetaInfo(nullptr) {}
  ~TableMetaInfo() override;
  explicit PROTOBUF_CONSTEXPR TableMetaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableMetaInfo(const TableMetaInfo& from);
  TableMetaInfo(TableMetaInfo&& from) noexcept
    : TableMetaInfo() {
    *this = ::std::move(from);
  }

  inline TableMetaInfo& operator=(const TableMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableMetaInfo& operator=(TableMetaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableMetaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableMetaInfo* internal_default_instance() {
    return reinterpret_cast<const TableMetaInfo*>(
               &_TableMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TableMetaInfo& a, TableMetaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TableMetaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableMetaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableMetaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableMetaInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableMetaInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableMetaInfo& from) {
    TableMetaInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableMetaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TableMetaInfo";
  }
  protected:
  explicit TableMetaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldMetaInfoFieldNumber = 5,
    kPrimaryKeyNameFieldNumber = 1,
    kPrimaryKeyTypeFieldNumber = 2,
    kPartitionsNumFieldNumber = 3,
    kReplicasNumFieldNumber = 4,
  };
  // repeated .FieldMetaInfo field_meta_info = 5;
  int field_meta_info_size() const;
  private:
  int _internal_field_meta_info_size() const;
  public:
  void clear_field_meta_info();
  ::FieldMetaInfo* mutable_field_meta_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FieldMetaInfo >*
      mutable_field_meta_info();
  private:
  const ::FieldMetaInfo& _internal_field_meta_info(int index) const;
  ::FieldMetaInfo* _internal_add_field_meta_info();
  public:
  const ::FieldMetaInfo& field_meta_info(int index) const;
  ::FieldMetaInfo* add_field_meta_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FieldMetaInfo >&
      field_meta_info() const;

  // string primary_key_name = 1;
  void clear_primary_key_name();
  const std::string& primary_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_key_name();
  PROTOBUF_NODISCARD std::string* release_primary_key_name();
  void set_allocated_primary_key_name(std::string* primary_key_name);
  private:
  const std::string& _internal_primary_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_key_name(const std::string& value);
  std::string* _internal_mutable_primary_key_name();
  public:

  // .FieldType primary_key_type = 2;
  void clear_primary_key_type();
  ::FieldType primary_key_type() const;
  void set_primary_key_type(::FieldType value);
  private:
  ::FieldType _internal_primary_key_type() const;
  void _internal_set_primary_key_type(::FieldType value);
  public:

  // int32 partitions_num = 3;
  void clear_partitions_num();
  int32_t partitions_num() const;
  void set_partitions_num(int32_t value);
  private:
  int32_t _internal_partitions_num() const;
  void _internal_set_partitions_num(int32_t value);
  public:

  // int32 replicas_num = 4;
  void clear_replicas_num();
  int32_t replicas_num() const;
  void set_replicas_num(int32_t value);
  private:
  int32_t _internal_replicas_num() const;
  void _internal_set_replicas_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TableMetaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FieldMetaInfo > field_meta_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_key_name_;
    int primary_key_type_;
    int32_t partitions_num_;
    int32_t replicas_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() override;
  explicit PROTOBUF_CONSTEXPR Table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Table& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Table& from) {
    Table::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTableMetaInfoFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .TableMetaInfo table_meta_info = 2;
  bool has_table_meta_info() const;
  private:
  bool _internal_has_table_meta_info() const;
  public:
  void clear_table_meta_info();
  const ::TableMetaInfo& table_meta_info() const;
  PROTOBUF_NODISCARD ::TableMetaInfo* release_table_meta_info();
  ::TableMetaInfo* mutable_table_meta_info();
  void set_allocated_table_meta_info(::TableMetaInfo* table_meta_info);
  private:
  const ::TableMetaInfo& _internal_table_meta_info() const;
  ::TableMetaInfo* _internal_mutable_table_meta_info();
  public:
  void unsafe_arena_set_allocated_table_meta_info(
      ::TableMetaInfo* table_meta_info);
  ::TableMetaInfo* unsafe_arena_release_table_meta_info();

  // @@protoc_insertion_point(class_scope:Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::TableMetaInfo* table_meta_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class DB_UserPasswordPairEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DB_UserPasswordPairEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DB_UserPasswordPairEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  DB_UserPasswordPairEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DB_UserPasswordPairEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DB_UserPasswordPairEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DB_UserPasswordPairEntry_DoNotUse& other);
  static const DB_UserPasswordPairEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DB_UserPasswordPairEntry_DoNotUse*>(&_DB_UserPasswordPairEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DB.UserPasswordPairEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DB.UserPasswordPairEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_data_5fmodel_2eproto;
};

// -------------------------------------------------------------------

class DB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB) */ {
 public:
  inline DB() : DB(nullptr) {}
  ~DB() override;
  explicit PROTOBUF_CONSTEXPR DB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DB(const DB& from);
  DB(DB&& from) noexcept
    : DB() {
    *this = ::std::move(from);
  }

  inline DB& operator=(const DB& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB& operator=(DB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DB& default_instance() {
    return *internal_default_instance();
  }
  static inline const DB* internal_default_instance() {
    return reinterpret_cast<const DB*>(
               &_DB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DB& a, DB& b) {
    a.Swap(&b);
  }
  inline void Swap(DB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DB& from) {
    DB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB";
  }
  protected:
  explicit DB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 2,
    kUserPasswordPairFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .Table tables = 2;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::Table* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Table >*
      mutable_tables();
  private:
  const ::Table& _internal_tables(int index) const;
  ::Table* _internal_add_tables();
  public:
  const ::Table& tables(int index) const;
  ::Table* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Table >&
      tables() const;

  // map<string, string> user_password_pair = 3;
  int user_password_pair_size() const;
  private:
  int _internal_user_password_pair_size() const;
  public:
  void clear_user_password_pair();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_user_password_pair() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_user_password_pair();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      user_password_pair() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_user_password_pair();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:DB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Table > tables_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DB_UserPasswordPairEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> user_password_pair_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Field

// string name = 1;
inline void Field::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:Field.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Field::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Field.name)
}
inline std::string* Field::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Field.name)
  return _s;
}
inline const std::string& Field::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Field::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Field::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:Field.name)
  return _impl_.name_.Release();
}
inline void Field::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Field.name)
}

// .FieldType type = 2;
inline void Field::clear_type() {
  _impl_.type_ = 0;
}
inline ::FieldType Field::_internal_type() const {
  return static_cast< ::FieldType >(_impl_.type_);
}
inline ::FieldType Field::type() const {
  // @@protoc_insertion_point(field_get:Field.type)
  return _internal_type();
}
inline void Field::_internal_set_type(::FieldType value) {
  
  _impl_.type_ = value;
}
inline void Field::set_type(::FieldType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Field.type)
}

// bytes value = 3;
inline void Field::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Field::value() const {
  // @@protoc_insertion_point(field_get:Field.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Field::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Field.value)
}
inline std::string* Field::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Field.value)
  return _s;
}
inline const std::string& Field::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Field::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Field::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Field::release_value() {
  // @@protoc_insertion_point(field_release:Field.value)
  return _impl_.value_.Release();
}
inline void Field::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Field.value)
}

// .FieldOption option = 4;
inline void Field::clear_option() {
  _impl_.option_ = 0;
}
inline ::FieldOption Field::_internal_option() const {
  return static_cast< ::FieldOption >(_impl_.option_);
}
inline ::FieldOption Field::option() const {
  // @@protoc_insertion_point(field_get:Field.option)
  return _internal_option();
}
inline void Field::_internal_set_option(::FieldOption value) {
  
  _impl_.option_ = value;
}
inline void Field::set_option(::FieldOption value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:Field.option)
}

// -------------------------------------------------------------------

// Document

// string p_key = 1;
inline void Document::clear_p_key() {
  _impl_.p_key_.ClearToEmpty();
}
inline const std::string& Document::p_key() const {
  // @@protoc_insertion_point(field_get:Document.p_key)
  return _internal_p_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Document::set_p_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.p_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Document.p_key)
}
inline std::string* Document::mutable_p_key() {
  std::string* _s = _internal_mutable_p_key();
  // @@protoc_insertion_point(field_mutable:Document.p_key)
  return _s;
}
inline const std::string& Document::_internal_p_key() const {
  return _impl_.p_key_.Get();
}
inline void Document::_internal_set_p_key(const std::string& value) {
  
  _impl_.p_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Document::_internal_mutable_p_key() {
  
  return _impl_.p_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Document::release_p_key() {
  // @@protoc_insertion_point(field_release:Document.p_key)
  return _impl_.p_key_.Release();
}
inline void Document::set_allocated_p_key(std::string* p_key) {
  if (p_key != nullptr) {
    
  } else {
    
  }
  _impl_.p_key_.SetAllocated(p_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.p_key_.IsDefault()) {
    _impl_.p_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Document.p_key)
}

// repeated .Field fields = 2;
inline int Document::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int Document::fields_size() const {
  return _internal_fields_size();
}
inline void Document::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::Field* Document::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:Document.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Field >*
Document::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:Document.fields)
  return &_impl_.fields_;
}
inline const ::Field& Document::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::Field& Document::fields(int index) const {
  // @@protoc_insertion_point(field_get:Document.fields)
  return _internal_fields(index);
}
inline ::Field* Document::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::Field* Document::add_fields() {
  ::Field* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:Document.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Field >&
Document::fields() const {
  // @@protoc_insertion_point(field_list:Document.fields)
  return _impl_.fields_;
}

// -------------------------------------------------------------------

// Item

// .Error err = 1;
inline bool Item::_internal_has_err() const {
  return this != internal_default_instance() && _impl_.err_ != nullptr;
}
inline bool Item::has_err() const {
  return _internal_has_err();
}
inline const ::Error& Item::_internal_err() const {
  const ::Error* p = _impl_.err_;
  return p != nullptr ? *p : reinterpret_cast<const ::Error&>(
      ::_Error_default_instance_);
}
inline const ::Error& Item::err() const {
  // @@protoc_insertion_point(field_get:Item.err)
  return _internal_err();
}
inline void Item::unsafe_arena_set_allocated_err(
    ::Error* err) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.err_);
  }
  _impl_.err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Item.err)
}
inline ::Error* Item::release_err() {
  
  ::Error* temp = _impl_.err_;
  _impl_.err_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Error* Item::unsafe_arena_release_err() {
  // @@protoc_insertion_point(field_release:Item.err)
  
  ::Error* temp = _impl_.err_;
  _impl_.err_ = nullptr;
  return temp;
}
inline ::Error* Item::_internal_mutable_err() {
  
  if (_impl_.err_ == nullptr) {
    auto* p = CreateMaybeMessage<::Error>(GetArenaForAllocation());
    _impl_.err_ = p;
  }
  return _impl_.err_;
}
inline ::Error* Item::mutable_err() {
  ::Error* _msg = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:Item.err)
  return _msg;
}
inline void Item::set_allocated_err(::Error* err) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.err_);
  }
  if (err) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err));
    if (message_arena != submessage_arena) {
      err = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.err_ = err;
  // @@protoc_insertion_point(field_set_allocated:Item.err)
}

// .Document doc = 2;
inline bool Item::_internal_has_doc() const {
  return this != internal_default_instance() && _impl_.doc_ != nullptr;
}
inline bool Item::has_doc() const {
  return _internal_has_doc();
}
inline void Item::clear_doc() {
  if (GetArenaForAllocation() == nullptr && _impl_.doc_ != nullptr) {
    delete _impl_.doc_;
  }
  _impl_.doc_ = nullptr;
}
inline const ::Document& Item::_internal_doc() const {
  const ::Document* p = _impl_.doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Document&>(
      ::_Document_default_instance_);
}
inline const ::Document& Item::doc() const {
  // @@protoc_insertion_point(field_get:Item.doc)
  return _internal_doc();
}
inline void Item::unsafe_arena_set_allocated_doc(
    ::Document* doc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.doc_);
  }
  _impl_.doc_ = doc;
  if (doc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Item.doc)
}
inline ::Document* Item::release_doc() {
  
  ::Document* temp = _impl_.doc_;
  _impl_.doc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Document* Item::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:Item.doc)
  
  ::Document* temp = _impl_.doc_;
  _impl_.doc_ = nullptr;
  return temp;
}
inline ::Document* Item::_internal_mutable_doc() {
  
  if (_impl_.doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Document>(GetArenaForAllocation());
    _impl_.doc_ = p;
  }
  return _impl_.doc_;
}
inline ::Document* Item::mutable_doc() {
  ::Document* _msg = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:Item.doc)
  return _msg;
}
inline void Item::set_allocated_doc(::Document* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.doc_;
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(doc);
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:Item.doc)
}

// string msg = 3;
inline void Item::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& Item::msg() const {
  // @@protoc_insertion_point(field_get:Item.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Item::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Item.msg)
}
inline std::string* Item::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Item.msg)
  return _s;
}
inline const std::string& Item::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void Item::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Item::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* Item::release_msg() {
  // @@protoc_insertion_point(field_release:Item.msg)
  return _impl_.msg_.Release();
}
inline void Item::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Item.msg)
}

// -------------------------------------------------------------------

// VectorMetaInfo

// int32 dimension = 1;
inline void VectorMetaInfo::clear_dimension() {
  _impl_.dimension_ = 0;
}
inline int32_t VectorMetaInfo::_internal_dimension() const {
  return _impl_.dimension_;
}
inline int32_t VectorMetaInfo::dimension() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.dimension)
  return _internal_dimension();
}
inline void VectorMetaInfo::_internal_set_dimension(int32_t value) {
  
  _impl_.dimension_ = value;
}
inline void VectorMetaInfo::set_dimension(int32_t value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:VectorMetaInfo.dimension)
}

// .VectorMetaInfo.ValueType value_type = 2;
inline void VectorMetaInfo::clear_value_type() {
  _impl_.value_type_ = 0;
}
inline ::VectorMetaInfo_ValueType VectorMetaInfo::_internal_value_type() const {
  return static_cast< ::VectorMetaInfo_ValueType >(_impl_.value_type_);
}
inline ::VectorMetaInfo_ValueType VectorMetaInfo::value_type() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.value_type)
  return _internal_value_type();
}
inline void VectorMetaInfo::_internal_set_value_type(::VectorMetaInfo_ValueType value) {
  
  _impl_.value_type_ = value;
}
inline void VectorMetaInfo::set_value_type(::VectorMetaInfo_ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:VectorMetaInfo.value_type)
}

// .VectorMetaInfo.StoreType store_type = 3;
inline void VectorMetaInfo::clear_store_type() {
  _impl_.store_type_ = 0;
}
inline ::VectorMetaInfo_StoreType VectorMetaInfo::_internal_store_type() const {
  return static_cast< ::VectorMetaInfo_StoreType >(_impl_.store_type_);
}
inline ::VectorMetaInfo_StoreType VectorMetaInfo::store_type() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.store_type)
  return _internal_store_type();
}
inline void VectorMetaInfo::_internal_set_store_type(::VectorMetaInfo_StoreType value) {
  
  _impl_.store_type_ = value;
}
inline void VectorMetaInfo::set_store_type(::VectorMetaInfo_StoreType value) {
  _internal_set_store_type(value);
  // @@protoc_insertion_point(field_set:VectorMetaInfo.store_type)
}

// string store_param = 4;
inline void VectorMetaInfo::clear_store_param() {
  _impl_.store_param_.ClearToEmpty();
}
inline const std::string& VectorMetaInfo::store_param() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.store_param)
  return _internal_store_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VectorMetaInfo::set_store_param(ArgT0&& arg0, ArgT... args) {
 
 _impl_.store_param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VectorMetaInfo.store_param)
}
inline std::string* VectorMetaInfo::mutable_store_param() {
  std::string* _s = _internal_mutable_store_param();
  // @@protoc_insertion_point(field_mutable:VectorMetaInfo.store_param)
  return _s;
}
inline const std::string& VectorMetaInfo::_internal_store_param() const {
  return _impl_.store_param_.Get();
}
inline void VectorMetaInfo::_internal_set_store_param(const std::string& value) {
  
  _impl_.store_param_.Set(value, GetArenaForAllocation());
}
inline std::string* VectorMetaInfo::_internal_mutable_store_param() {
  
  return _impl_.store_param_.Mutable(GetArenaForAllocation());
}
inline std::string* VectorMetaInfo::release_store_param() {
  // @@protoc_insertion_point(field_release:VectorMetaInfo.store_param)
  return _impl_.store_param_.Release();
}
inline void VectorMetaInfo::set_allocated_store_param(std::string* store_param) {
  if (store_param != nullptr) {
    
  } else {
    
  }
  _impl_.store_param_.SetAllocated(store_param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.store_param_.IsDefault()) {
    _impl_.store_param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VectorMetaInfo.store_param)
}

// -------------------------------------------------------------------

// FieldMetaInfo

// string name = 1;
inline void FieldMetaInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FieldMetaInfo::name() const {
  // @@protoc_insertion_point(field_get:FieldMetaInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldMetaInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FieldMetaInfo.name)
}
inline std::string* FieldMetaInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FieldMetaInfo.name)
  return _s;
}
inline const std::string& FieldMetaInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FieldMetaInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldMetaInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FieldMetaInfo::release_name() {
  // @@protoc_insertion_point(field_release:FieldMetaInfo.name)
  return _impl_.name_.Release();
}
inline void FieldMetaInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FieldMetaInfo.name)
}

// .FieldType data_type = 2;
inline void FieldMetaInfo::clear_data_type() {
  _impl_.data_type_ = 0;
}
inline ::FieldType FieldMetaInfo::_internal_data_type() const {
  return static_cast< ::FieldType >(_impl_.data_type_);
}
inline ::FieldType FieldMetaInfo::data_type() const {
  // @@protoc_insertion_point(field_get:FieldMetaInfo.data_type)
  return _internal_data_type();
}
inline void FieldMetaInfo::_internal_set_data_type(::FieldType value) {
  
  _impl_.data_type_ = value;
}
inline void FieldMetaInfo::set_data_type(::FieldType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:FieldMetaInfo.data_type)
}

// bool is_index = 3;
inline void FieldMetaInfo::clear_is_index() {
  _impl_.is_index_ = false;
}
inline bool FieldMetaInfo::_internal_is_index() const {
  return _impl_.is_index_;
}
inline bool FieldMetaInfo::is_index() const {
  // @@protoc_insertion_point(field_get:FieldMetaInfo.is_index)
  return _internal_is_index();
}
inline void FieldMetaInfo::_internal_set_is_index(bool value) {
  
  _impl_.is_index_ = value;
}
inline void FieldMetaInfo::set_is_index(bool value) {
  _internal_set_is_index(value);
  // @@protoc_insertion_point(field_set:FieldMetaInfo.is_index)
}

// .VectorMetaInfo vector_meta_info = 4;
inline bool FieldMetaInfo::_internal_has_vector_meta_info() const {
  return this != internal_default_instance() && _impl_.vector_meta_info_ != nullptr;
}
inline bool FieldMetaInfo::has_vector_meta_info() const {
  return _internal_has_vector_meta_info();
}
inline void FieldMetaInfo::clear_vector_meta_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.vector_meta_info_ != nullptr) {
    delete _impl_.vector_meta_info_;
  }
  _impl_.vector_meta_info_ = nullptr;
}
inline const ::VectorMetaInfo& FieldMetaInfo::_internal_vector_meta_info() const {
  const ::VectorMetaInfo* p = _impl_.vector_meta_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::VectorMetaInfo&>(
      ::_VectorMetaInfo_default_instance_);
}
inline const ::VectorMetaInfo& FieldMetaInfo::vector_meta_info() const {
  // @@protoc_insertion_point(field_get:FieldMetaInfo.vector_meta_info)
  return _internal_vector_meta_info();
}
inline void FieldMetaInfo::unsafe_arena_set_allocated_vector_meta_info(
    ::VectorMetaInfo* vector_meta_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_meta_info_);
  }
  _impl_.vector_meta_info_ = vector_meta_info;
  if (vector_meta_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FieldMetaInfo.vector_meta_info)
}
inline ::VectorMetaInfo* FieldMetaInfo::release_vector_meta_info() {
  
  ::VectorMetaInfo* temp = _impl_.vector_meta_info_;
  _impl_.vector_meta_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VectorMetaInfo* FieldMetaInfo::unsafe_arena_release_vector_meta_info() {
  // @@protoc_insertion_point(field_release:FieldMetaInfo.vector_meta_info)
  
  ::VectorMetaInfo* temp = _impl_.vector_meta_info_;
  _impl_.vector_meta_info_ = nullptr;
  return temp;
}
inline ::VectorMetaInfo* FieldMetaInfo::_internal_mutable_vector_meta_info() {
  
  if (_impl_.vector_meta_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::VectorMetaInfo>(GetArenaForAllocation());
    _impl_.vector_meta_info_ = p;
  }
  return _impl_.vector_meta_info_;
}
inline ::VectorMetaInfo* FieldMetaInfo::mutable_vector_meta_info() {
  ::VectorMetaInfo* _msg = _internal_mutable_vector_meta_info();
  // @@protoc_insertion_point(field_mutable:FieldMetaInfo.vector_meta_info)
  return _msg;
}
inline void FieldMetaInfo::set_allocated_vector_meta_info(::VectorMetaInfo* vector_meta_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vector_meta_info_;
  }
  if (vector_meta_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vector_meta_info);
    if (message_arena != submessage_arena) {
      vector_meta_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_meta_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector_meta_info_ = vector_meta_info;
  // @@protoc_insertion_point(field_set_allocated:FieldMetaInfo.vector_meta_info)
}

// -------------------------------------------------------------------

// TableMetaInfo

// string primary_key_name = 1;
inline void TableMetaInfo::clear_primary_key_name() {
  _impl_.primary_key_name_.ClearToEmpty();
}
inline const std::string& TableMetaInfo::primary_key_name() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.primary_key_name)
  return _internal_primary_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableMetaInfo::set_primary_key_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.primary_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TableMetaInfo.primary_key_name)
}
inline std::string* TableMetaInfo::mutable_primary_key_name() {
  std::string* _s = _internal_mutable_primary_key_name();
  // @@protoc_insertion_point(field_mutable:TableMetaInfo.primary_key_name)
  return _s;
}
inline const std::string& TableMetaInfo::_internal_primary_key_name() const {
  return _impl_.primary_key_name_.Get();
}
inline void TableMetaInfo::_internal_set_primary_key_name(const std::string& value) {
  
  _impl_.primary_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TableMetaInfo::_internal_mutable_primary_key_name() {
  
  return _impl_.primary_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TableMetaInfo::release_primary_key_name() {
  // @@protoc_insertion_point(field_release:TableMetaInfo.primary_key_name)
  return _impl_.primary_key_name_.Release();
}
inline void TableMetaInfo::set_allocated_primary_key_name(std::string* primary_key_name) {
  if (primary_key_name != nullptr) {
    
  } else {
    
  }
  _impl_.primary_key_name_.SetAllocated(primary_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.primary_key_name_.IsDefault()) {
    _impl_.primary_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TableMetaInfo.primary_key_name)
}

// .FieldType primary_key_type = 2;
inline void TableMetaInfo::clear_primary_key_type() {
  _impl_.primary_key_type_ = 0;
}
inline ::FieldType TableMetaInfo::_internal_primary_key_type() const {
  return static_cast< ::FieldType >(_impl_.primary_key_type_);
}
inline ::FieldType TableMetaInfo::primary_key_type() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.primary_key_type)
  return _internal_primary_key_type();
}
inline void TableMetaInfo::_internal_set_primary_key_type(::FieldType value) {
  
  _impl_.primary_key_type_ = value;
}
inline void TableMetaInfo::set_primary_key_type(::FieldType value) {
  _internal_set_primary_key_type(value);
  // @@protoc_insertion_point(field_set:TableMetaInfo.primary_key_type)
}

// int32 partitions_num = 3;
inline void TableMetaInfo::clear_partitions_num() {
  _impl_.partitions_num_ = 0;
}
inline int32_t TableMetaInfo::_internal_partitions_num() const {
  return _impl_.partitions_num_;
}
inline int32_t TableMetaInfo::partitions_num() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.partitions_num)
  return _internal_partitions_num();
}
inline void TableMetaInfo::_internal_set_partitions_num(int32_t value) {
  
  _impl_.partitions_num_ = value;
}
inline void TableMetaInfo::set_partitions_num(int32_t value) {
  _internal_set_partitions_num(value);
  // @@protoc_insertion_point(field_set:TableMetaInfo.partitions_num)
}

// int32 replicas_num = 4;
inline void TableMetaInfo::clear_replicas_num() {
  _impl_.replicas_num_ = 0;
}
inline int32_t TableMetaInfo::_internal_replicas_num() const {
  return _impl_.replicas_num_;
}
inline int32_t TableMetaInfo::replicas_num() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.replicas_num)
  return _internal_replicas_num();
}
inline void TableMetaInfo::_internal_set_replicas_num(int32_t value) {
  
  _impl_.replicas_num_ = value;
}
inline void TableMetaInfo::set_replicas_num(int32_t value) {
  _internal_set_replicas_num(value);
  // @@protoc_insertion_point(field_set:TableMetaInfo.replicas_num)
}

// repeated .FieldMetaInfo field_meta_info = 5;
inline int TableMetaInfo::_internal_field_meta_info_size() const {
  return _impl_.field_meta_info_.size();
}
inline int TableMetaInfo::field_meta_info_size() const {
  return _internal_field_meta_info_size();
}
inline void TableMetaInfo::clear_field_meta_info() {
  _impl_.field_meta_info_.Clear();
}
inline ::FieldMetaInfo* TableMetaInfo::mutable_field_meta_info(int index) {
  // @@protoc_insertion_point(field_mutable:TableMetaInfo.field_meta_info)
  return _impl_.field_meta_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FieldMetaInfo >*
TableMetaInfo::mutable_field_meta_info() {
  // @@protoc_insertion_point(field_mutable_list:TableMetaInfo.field_meta_info)
  return &_impl_.field_meta_info_;
}
inline const ::FieldMetaInfo& TableMetaInfo::_internal_field_meta_info(int index) const {
  return _impl_.field_meta_info_.Get(index);
}
inline const ::FieldMetaInfo& TableMetaInfo::field_meta_info(int index) const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.field_meta_info)
  return _internal_field_meta_info(index);
}
inline ::FieldMetaInfo* TableMetaInfo::_internal_add_field_meta_info() {
  return _impl_.field_meta_info_.Add();
}
inline ::FieldMetaInfo* TableMetaInfo::add_field_meta_info() {
  ::FieldMetaInfo* _add = _internal_add_field_meta_info();
  // @@protoc_insertion_point(field_add:TableMetaInfo.field_meta_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FieldMetaInfo >&
TableMetaInfo::field_meta_info() const {
  // @@protoc_insertion_point(field_list:TableMetaInfo.field_meta_info)
  return _impl_.field_meta_info_;
}

// -------------------------------------------------------------------

// Table

// string name = 1;
inline void Table::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:Table.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Table::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Table.name)
}
inline std::string* Table::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Table.name)
  return _s;
}
inline const std::string& Table::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Table::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Table::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:Table.name)
  return _impl_.name_.Release();
}
inline void Table::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Table.name)
}

// .TableMetaInfo table_meta_info = 2;
inline bool Table::_internal_has_table_meta_info() const {
  return this != internal_default_instance() && _impl_.table_meta_info_ != nullptr;
}
inline bool Table::has_table_meta_info() const {
  return _internal_has_table_meta_info();
}
inline void Table::clear_table_meta_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_meta_info_ != nullptr) {
    delete _impl_.table_meta_info_;
  }
  _impl_.table_meta_info_ = nullptr;
}
inline const ::TableMetaInfo& Table::_internal_table_meta_info() const {
  const ::TableMetaInfo* p = _impl_.table_meta_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TableMetaInfo&>(
      ::_TableMetaInfo_default_instance_);
}
inline const ::TableMetaInfo& Table::table_meta_info() const {
  // @@protoc_insertion_point(field_get:Table.table_meta_info)
  return _internal_table_meta_info();
}
inline void Table::unsafe_arena_set_allocated_table_meta_info(
    ::TableMetaInfo* table_meta_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_meta_info_);
  }
  _impl_.table_meta_info_ = table_meta_info;
  if (table_meta_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Table.table_meta_info)
}
inline ::TableMetaInfo* Table::release_table_meta_info() {
  
  ::TableMetaInfo* temp = _impl_.table_meta_info_;
  _impl_.table_meta_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TableMetaInfo* Table::unsafe_arena_release_table_meta_info() {
  // @@protoc_insertion_point(field_release:Table.table_meta_info)
  
  ::TableMetaInfo* temp = _impl_.table_meta_info_;
  _impl_.table_meta_info_ = nullptr;
  return temp;
}
inline ::TableMetaInfo* Table::_internal_mutable_table_meta_info() {
  
  if (_impl_.table_meta_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TableMetaInfo>(GetArenaForAllocation());
    _impl_.table_meta_info_ = p;
  }
  return _impl_.table_meta_info_;
}
inline ::TableMetaInfo* Table::mutable_table_meta_info() {
  ::TableMetaInfo* _msg = _internal_mutable_table_meta_info();
  // @@protoc_insertion_point(field_mutable:Table.table_meta_info)
  return _msg;
}
inline void Table::set_allocated_table_meta_info(::TableMetaInfo* table_meta_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_meta_info_;
  }
  if (table_meta_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_meta_info);
    if (message_arena != submessage_arena) {
      table_meta_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_meta_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_meta_info_ = table_meta_info;
  // @@protoc_insertion_point(field_set_allocated:Table.table_meta_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DB

// string name = 1;
inline void DB::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DB::name() const {
  // @@protoc_insertion_point(field_get:DB.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DB::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DB.name)
}
inline std::string* DB::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DB.name)
  return _s;
}
inline const std::string& DB::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DB::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DB::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DB::release_name() {
  // @@protoc_insertion_point(field_release:DB.name)
  return _impl_.name_.Release();
}
inline void DB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DB.name)
}

// repeated .Table tables = 2;
inline int DB::_internal_tables_size() const {
  return _impl_.tables_.size();
}
inline int DB::tables_size() const {
  return _internal_tables_size();
}
inline void DB::clear_tables() {
  _impl_.tables_.Clear();
}
inline ::Table* DB::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:DB.tables)
  return _impl_.tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Table >*
DB::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:DB.tables)
  return &_impl_.tables_;
}
inline const ::Table& DB::_internal_tables(int index) const {
  return _impl_.tables_.Get(index);
}
inline const ::Table& DB::tables(int index) const {
  // @@protoc_insertion_point(field_get:DB.tables)
  return _internal_tables(index);
}
inline ::Table* DB::_internal_add_tables() {
  return _impl_.tables_.Add();
}
inline ::Table* DB::add_tables() {
  ::Table* _add = _internal_add_tables();
  // @@protoc_insertion_point(field_add:DB.tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Table >&
DB::tables() const {
  // @@protoc_insertion_point(field_list:DB.tables)
  return _impl_.tables_;
}

// map<string, string> user_password_pair = 3;
inline int DB::_internal_user_password_pair_size() const {
  return _impl_.user_password_pair_.size();
}
inline int DB::user_password_pair_size() const {
  return _internal_user_password_pair_size();
}
inline void DB::clear_user_password_pair() {
  _impl_.user_password_pair_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DB::_internal_user_password_pair() const {
  return _impl_.user_password_pair_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DB::user_password_pair() const {
  // @@protoc_insertion_point(field_map:DB.user_password_pair)
  return _internal_user_password_pair();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DB::_internal_mutable_user_password_pair() {
  return _impl_.user_password_pair_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DB::mutable_user_password_pair() {
  // @@protoc_insertion_point(field_mutable_map:DB.user_password_pair)
  return _internal_mutable_user_password_pair();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::VectorMetaInfo_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VectorMetaInfo_ValueType>() {
  return ::VectorMetaInfo_ValueType_descriptor();
}
template <> struct is_proto_enum< ::VectorMetaInfo_StoreType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VectorMetaInfo_StoreType>() {
  return ::VectorMetaInfo_StoreType_descriptor();
}
template <> struct is_proto_enum< ::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FieldType>() {
  return ::FieldType_descriptor();
}
template <> struct is_proto_enum< ::FieldOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FieldOption>() {
  return ::FieldOption_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fmodel_2eproto
