// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_model.proto

#ifndef PROTOBUF_INCLUDED_data_5fmodel_2eproto
#define PROTOBUF_INCLUDED_data_5fmodel_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "errors.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_data_5fmodel_2eproto 

namespace protobuf_data_5fmodel_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_data_5fmodel_2eproto
class DB;
class DBDefaultTypeInternal;
extern DBDefaultTypeInternal _DB_default_instance_;
class DB_UserPasswordPairEntry_DoNotUse;
class DB_UserPasswordPairEntry_DoNotUseDefaultTypeInternal;
extern DB_UserPasswordPairEntry_DoNotUseDefaultTypeInternal _DB_UserPasswordPairEntry_DoNotUse_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class FieldMetaInfo;
class FieldMetaInfoDefaultTypeInternal;
extern FieldMetaInfoDefaultTypeInternal _FieldMetaInfo_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableMetaInfo;
class TableMetaInfoDefaultTypeInternal;
extern TableMetaInfoDefaultTypeInternal _TableMetaInfo_default_instance_;
class VectorMetaInfo;
class VectorMetaInfoDefaultTypeInternal;
extern VectorMetaInfoDefaultTypeInternal _VectorMetaInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::DB* Arena::CreateMaybeMessage<::DB>(Arena*);
template<> ::DB_UserPasswordPairEntry_DoNotUse* Arena::CreateMaybeMessage<::DB_UserPasswordPairEntry_DoNotUse>(Arena*);
template<> ::Document* Arena::CreateMaybeMessage<::Document>(Arena*);
template<> ::Field* Arena::CreateMaybeMessage<::Field>(Arena*);
template<> ::FieldMetaInfo* Arena::CreateMaybeMessage<::FieldMetaInfo>(Arena*);
template<> ::Item* Arena::CreateMaybeMessage<::Item>(Arena*);
template<> ::Table* Arena::CreateMaybeMessage<::Table>(Arena*);
template<> ::TableMetaInfo* Arena::CreateMaybeMessage<::TableMetaInfo>(Arena*);
template<> ::VectorMetaInfo* Arena::CreateMaybeMessage<::VectorMetaInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

enum VectorMetaInfo_ValueType {
  VectorMetaInfo_ValueType_FLOAT = 0,
  VectorMetaInfo_ValueType_UINT8 = 1,
  VectorMetaInfo_ValueType_VectorMetaInfo_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VectorMetaInfo_ValueType_VectorMetaInfo_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VectorMetaInfo_ValueType_IsValid(int value);
const VectorMetaInfo_ValueType VectorMetaInfo_ValueType_ValueType_MIN = VectorMetaInfo_ValueType_FLOAT;
const VectorMetaInfo_ValueType VectorMetaInfo_ValueType_ValueType_MAX = VectorMetaInfo_ValueType_UINT8;
const int VectorMetaInfo_ValueType_ValueType_ARRAYSIZE = VectorMetaInfo_ValueType_ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VectorMetaInfo_ValueType_descriptor();
inline const ::std::string& VectorMetaInfo_ValueType_Name(VectorMetaInfo_ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VectorMetaInfo_ValueType_descriptor(), value);
}
inline bool VectorMetaInfo_ValueType_Parse(
    const ::std::string& name, VectorMetaInfo_ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorMetaInfo_ValueType>(
    VectorMetaInfo_ValueType_descriptor(), name, value);
}
enum VectorMetaInfo_StoreType {
  VectorMetaInfo_StoreType_MEMORYONLY = 0,
  VectorMetaInfo_StoreType_ROCKSDB = 1,
  VectorMetaInfo_StoreType_VectorMetaInfo_StoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VectorMetaInfo_StoreType_VectorMetaInfo_StoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VectorMetaInfo_StoreType_IsValid(int value);
const VectorMetaInfo_StoreType VectorMetaInfo_StoreType_StoreType_MIN = VectorMetaInfo_StoreType_MEMORYONLY;
const VectorMetaInfo_StoreType VectorMetaInfo_StoreType_StoreType_MAX = VectorMetaInfo_StoreType_ROCKSDB;
const int VectorMetaInfo_StoreType_StoreType_ARRAYSIZE = VectorMetaInfo_StoreType_StoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VectorMetaInfo_StoreType_descriptor();
inline const ::std::string& VectorMetaInfo_StoreType_Name(VectorMetaInfo_StoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VectorMetaInfo_StoreType_descriptor(), value);
}
inline bool VectorMetaInfo_StoreType_Parse(
    const ::std::string& name, VectorMetaInfo_StoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorMetaInfo_StoreType>(
    VectorMetaInfo_StoreType_descriptor(), name, value);
}
enum FieldType {
  INT = 0,
  LONG = 1,
  FLOAT = 2,
  DOUBLE = 3,
  STRING = 4,
  VECTOR = 5,
  BOOL = 6,
  DATE = 7,
  STRINGARRAY = 8,
  FieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FieldType_IsValid(int value);
const FieldType FieldType_MIN = INT;
const FieldType FieldType_MAX = STRINGARRAY;
const int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldType_descriptor();
inline const ::std::string& FieldType_Name(FieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldType_descriptor(), value);
}
inline bool FieldType_Parse(
    const ::std::string& name, FieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
enum FieldOption {
  Null = 0,
  Index = 1,
  FieldOption_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FieldOption_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FieldOption_IsValid(int value);
const FieldOption FieldOption_MIN = Null;
const FieldOption FieldOption_MAX = Index;
const int FieldOption_ARRAYSIZE = FieldOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldOption_descriptor();
inline const ::std::string& FieldOption_Name(FieldOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldOption_descriptor(), value);
}
inline bool FieldOption_Parse(
    const ::std::string& name, FieldOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldOption>(
    FieldOption_descriptor(), name, value);
}
// ===================================================================

class Field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Field* other);
  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const final {
    return CreateMaybeMessage<Field>(NULL);
  }

  Field* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .FieldType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::FieldType type() const;
  void set_type(::FieldType value);

  // .FieldOption option = 4;
  void clear_option();
  static const int kOptionFieldNumber = 4;
  ::FieldOption option() const;
  void set_option(::FieldOption value);

  // @@protoc_insertion_point(class_scope:Field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int type_;
  int option_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const final {
    return CreateMaybeMessage<Document>(NULL);
  }

  Document* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Field fields = 2;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 2;
  ::Field* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::Field >*
      mutable_fields();
  const ::Field& fields(int index) const;
  ::Field* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::Field >&
      fields() const;

  // string p_key = 1;
  void clear_p_key();
  static const int kPKeyFieldNumber = 1;
  const ::std::string& p_key() const;
  void set_p_key(const ::std::string& value);
  #if LANG_CXX11
  void set_p_key(::std::string&& value);
  #endif
  void set_p_key(const char* value);
  void set_p_key(const char* value, size_t size);
  ::std::string* mutable_p_key();
  ::std::string* release_p_key();
  void set_allocated_p_key(::std::string* p_key);

  // @@protoc_insertion_point(class_scope:Document)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Field > fields_;
  ::google::protobuf::internal::ArenaStringPtr p_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Item* other);
  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(NULL);
  }

  Item* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .Error err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  private:
  const ::Error& _internal_err() const;
  public:
  const ::Error& err() const;
  ::Error* release_err();
  ::Error* mutable_err();
  void set_allocated_err(::Error* err);

  // .Document doc = 2;
  bool has_doc() const;
  void clear_doc();
  static const int kDocFieldNumber = 2;
  private:
  const ::Document& _internal_doc() const;
  public:
  const ::Document& doc() const;
  ::Document* release_doc();
  ::Document* mutable_doc();
  void set_allocated_doc(::Document* doc);

  // @@protoc_insertion_point(class_scope:Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::Error* err_;
  ::Document* doc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VectorMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VectorMetaInfo) */ {
 public:
  VectorMetaInfo();
  virtual ~VectorMetaInfo();

  VectorMetaInfo(const VectorMetaInfo& from);

  inline VectorMetaInfo& operator=(const VectorMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VectorMetaInfo(VectorMetaInfo&& from) noexcept
    : VectorMetaInfo() {
    *this = ::std::move(from);
  }

  inline VectorMetaInfo& operator=(VectorMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorMetaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorMetaInfo* internal_default_instance() {
    return reinterpret_cast<const VectorMetaInfo*>(
               &_VectorMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VectorMetaInfo* other);
  friend void swap(VectorMetaInfo& a, VectorMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VectorMetaInfo* New() const final {
    return CreateMaybeMessage<VectorMetaInfo>(NULL);
  }

  VectorMetaInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VectorMetaInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VectorMetaInfo& from);
  void MergeFrom(const VectorMetaInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VectorMetaInfo_ValueType ValueType;
  static const ValueType FLOAT =
    VectorMetaInfo_ValueType_FLOAT;
  static const ValueType UINT8 =
    VectorMetaInfo_ValueType_UINT8;
  static inline bool ValueType_IsValid(int value) {
    return VectorMetaInfo_ValueType_IsValid(value);
  }
  static const ValueType ValueType_MIN =
    VectorMetaInfo_ValueType_ValueType_MIN;
  static const ValueType ValueType_MAX =
    VectorMetaInfo_ValueType_ValueType_MAX;
  static const int ValueType_ARRAYSIZE =
    VectorMetaInfo_ValueType_ValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueType_descriptor() {
    return VectorMetaInfo_ValueType_descriptor();
  }
  static inline const ::std::string& ValueType_Name(ValueType value) {
    return VectorMetaInfo_ValueType_Name(value);
  }
  static inline bool ValueType_Parse(const ::std::string& name,
      ValueType* value) {
    return VectorMetaInfo_ValueType_Parse(name, value);
  }

  typedef VectorMetaInfo_StoreType StoreType;
  static const StoreType MEMORYONLY =
    VectorMetaInfo_StoreType_MEMORYONLY;
  static const StoreType ROCKSDB =
    VectorMetaInfo_StoreType_ROCKSDB;
  static inline bool StoreType_IsValid(int value) {
    return VectorMetaInfo_StoreType_IsValid(value);
  }
  static const StoreType StoreType_MIN =
    VectorMetaInfo_StoreType_StoreType_MIN;
  static const StoreType StoreType_MAX =
    VectorMetaInfo_StoreType_StoreType_MAX;
  static const int StoreType_ARRAYSIZE =
    VectorMetaInfo_StoreType_StoreType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StoreType_descriptor() {
    return VectorMetaInfo_StoreType_descriptor();
  }
  static inline const ::std::string& StoreType_Name(StoreType value) {
    return VectorMetaInfo_StoreType_Name(value);
  }
  static inline bool StoreType_Parse(const ::std::string& name,
      StoreType* value) {
    return VectorMetaInfo_StoreType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string store_param = 4;
  void clear_store_param();
  static const int kStoreParamFieldNumber = 4;
  const ::std::string& store_param() const;
  void set_store_param(const ::std::string& value);
  #if LANG_CXX11
  void set_store_param(::std::string&& value);
  #endif
  void set_store_param(const char* value);
  void set_store_param(const char* value, size_t size);
  ::std::string* mutable_store_param();
  ::std::string* release_store_param();
  void set_allocated_store_param(::std::string* store_param);

  // int32 dimension = 1;
  void clear_dimension();
  static const int kDimensionFieldNumber = 1;
  ::google::protobuf::int32 dimension() const;
  void set_dimension(::google::protobuf::int32 value);

  // .VectorMetaInfo.ValueType value_type = 2;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 2;
  ::VectorMetaInfo_ValueType value_type() const;
  void set_value_type(::VectorMetaInfo_ValueType value);

  // .VectorMetaInfo.StoreType store_type = 3;
  void clear_store_type();
  static const int kStoreTypeFieldNumber = 3;
  ::VectorMetaInfo_StoreType store_type() const;
  void set_store_type(::VectorMetaInfo_StoreType value);

  // @@protoc_insertion_point(class_scope:VectorMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr store_param_;
  ::google::protobuf::int32 dimension_;
  int value_type_;
  int store_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FieldMetaInfo) */ {
 public:
  FieldMetaInfo();
  virtual ~FieldMetaInfo();

  FieldMetaInfo(const FieldMetaInfo& from);

  inline FieldMetaInfo& operator=(const FieldMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldMetaInfo(FieldMetaInfo&& from) noexcept
    : FieldMetaInfo() {
    *this = ::std::move(from);
  }

  inline FieldMetaInfo& operator=(FieldMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldMetaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMetaInfo* internal_default_instance() {
    return reinterpret_cast<const FieldMetaInfo*>(
               &_FieldMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FieldMetaInfo* other);
  friend void swap(FieldMetaInfo& a, FieldMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldMetaInfo* New() const final {
    return CreateMaybeMessage<FieldMetaInfo>(NULL);
  }

  FieldMetaInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldMetaInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldMetaInfo& from);
  void MergeFrom(const FieldMetaInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .VectorMetaInfo vector_meta_info = 4;
  bool has_vector_meta_info() const;
  void clear_vector_meta_info();
  static const int kVectorMetaInfoFieldNumber = 4;
  private:
  const ::VectorMetaInfo& _internal_vector_meta_info() const;
  public:
  const ::VectorMetaInfo& vector_meta_info() const;
  ::VectorMetaInfo* release_vector_meta_info();
  ::VectorMetaInfo* mutable_vector_meta_info();
  void set_allocated_vector_meta_info(::VectorMetaInfo* vector_meta_info);

  // .FieldType data_type = 2;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::FieldType data_type() const;
  void set_data_type(::FieldType value);

  // bool is_index = 3;
  void clear_is_index();
  static const int kIsIndexFieldNumber = 3;
  bool is_index() const;
  void set_is_index(bool value);

  // @@protoc_insertion_point(class_scope:FieldMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::VectorMetaInfo* vector_meta_info_;
  int data_type_;
  bool is_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TableMetaInfo) */ {
 public:
  TableMetaInfo();
  virtual ~TableMetaInfo();

  TableMetaInfo(const TableMetaInfo& from);

  inline TableMetaInfo& operator=(const TableMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableMetaInfo(TableMetaInfo&& from) noexcept
    : TableMetaInfo() {
    *this = ::std::move(from);
  }

  inline TableMetaInfo& operator=(TableMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableMetaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableMetaInfo* internal_default_instance() {
    return reinterpret_cast<const TableMetaInfo*>(
               &_TableMetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TableMetaInfo* other);
  friend void swap(TableMetaInfo& a, TableMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableMetaInfo* New() const final {
    return CreateMaybeMessage<TableMetaInfo>(NULL);
  }

  TableMetaInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TableMetaInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TableMetaInfo& from);
  void MergeFrom(const TableMetaInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FieldMetaInfo field_meta_info = 5;
  int field_meta_info_size() const;
  void clear_field_meta_info();
  static const int kFieldMetaInfoFieldNumber = 5;
  ::FieldMetaInfo* mutable_field_meta_info(int index);
  ::google::protobuf::RepeatedPtrField< ::FieldMetaInfo >*
      mutable_field_meta_info();
  const ::FieldMetaInfo& field_meta_info(int index) const;
  ::FieldMetaInfo* add_field_meta_info();
  const ::google::protobuf::RepeatedPtrField< ::FieldMetaInfo >&
      field_meta_info() const;

  // string primary_key_name = 1;
  void clear_primary_key_name();
  static const int kPrimaryKeyNameFieldNumber = 1;
  const ::std::string& primary_key_name() const;
  void set_primary_key_name(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key_name(::std::string&& value);
  #endif
  void set_primary_key_name(const char* value);
  void set_primary_key_name(const char* value, size_t size);
  ::std::string* mutable_primary_key_name();
  ::std::string* release_primary_key_name();
  void set_allocated_primary_key_name(::std::string* primary_key_name);

  // .FieldType primary_key_type = 2;
  void clear_primary_key_type();
  static const int kPrimaryKeyTypeFieldNumber = 2;
  ::FieldType primary_key_type() const;
  void set_primary_key_type(::FieldType value);

  // int32 partitions_num = 3;
  void clear_partitions_num();
  static const int kPartitionsNumFieldNumber = 3;
  ::google::protobuf::int32 partitions_num() const;
  void set_partitions_num(::google::protobuf::int32 value);

  // int32 replicas_num = 4;
  void clear_replicas_num();
  static const int kReplicasNumFieldNumber = 4;
  ::google::protobuf::int32 replicas_num() const;
  void set_replicas_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TableMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::FieldMetaInfo > field_meta_info_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_name_;
  int primary_key_type_;
  ::google::protobuf::int32 partitions_num_;
  ::google::protobuf::int32 replicas_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(NULL);
  }

  Table* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .TableMetaInfo table_meta_info = 2;
  bool has_table_meta_info() const;
  void clear_table_meta_info();
  static const int kTableMetaInfoFieldNumber = 2;
  private:
  const ::TableMetaInfo& _internal_table_meta_info() const;
  public:
  const ::TableMetaInfo& table_meta_info() const;
  ::TableMetaInfo* release_table_meta_info();
  ::TableMetaInfo* mutable_table_meta_info();
  void set_allocated_table_meta_info(::TableMetaInfo* table_meta_info);

  // @@protoc_insertion_point(class_scope:Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::TableMetaInfo* table_meta_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DB_UserPasswordPairEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DB_UserPasswordPairEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<DB_UserPasswordPairEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DB_UserPasswordPairEntry_DoNotUse();
  DB_UserPasswordPairEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DB_UserPasswordPairEntry_DoNotUse& other);
  static const DB_UserPasswordPairEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DB_UserPasswordPairEntry_DoNotUse*>(&_DB_UserPasswordPairEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DB) */ {
 public:
  DB();
  virtual ~DB();

  DB(const DB& from);

  inline DB& operator=(const DB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DB(DB&& from) noexcept
    : DB() {
    *this = ::std::move(from);
  }

  inline DB& operator=(DB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB* internal_default_instance() {
    return reinterpret_cast<const DB*>(
               &_DB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DB* other);
  friend void swap(DB& a, DB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DB* New() const final {
    return CreateMaybeMessage<DB>(NULL);
  }

  DB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DB& from);
  void MergeFrom(const DB& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .Table tables = 2;
  int tables_size() const;
  void clear_tables();
  static const int kTablesFieldNumber = 2;
  ::Table* mutable_tables(int index);
  ::google::protobuf::RepeatedPtrField< ::Table >*
      mutable_tables();
  const ::Table& tables(int index) const;
  ::Table* add_tables();
  const ::google::protobuf::RepeatedPtrField< ::Table >&
      tables() const;

  // map<string, string> user_password_pair = 3;
  int user_password_pair_size() const;
  void clear_user_password_pair();
  static const int kUserPasswordPairFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      user_password_pair() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_user_password_pair();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:DB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Table > tables_;
  ::google::protobuf::internal::MapField<
      DB_UserPasswordPairEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > user_password_pair_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_data_5fmodel_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Field

// string name = 1;
inline void Field::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:Field.name)
  return name_.GetNoArena();
}
inline void Field::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Field.name)
}
#if LANG_CXX11
inline void Field::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Field.name)
}
#endif
inline void Field::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Field.name)
}
inline void Field::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Field.name)
}
inline ::std::string* Field::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Field.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:Field.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Field.name)
}

// .FieldType type = 2;
inline void Field::clear_type() {
  type_ = 0;
}
inline ::FieldType Field::type() const {
  // @@protoc_insertion_point(field_get:Field.type)
  return static_cast< ::FieldType >(type_);
}
inline void Field::set_type(::FieldType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Field.type)
}

// bytes value = 3;
inline void Field::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Field::value() const {
  // @@protoc_insertion_point(field_get:Field.value)
  return value_.GetNoArena();
}
inline void Field::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Field.value)
}
#if LANG_CXX11
inline void Field::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Field.value)
}
#endif
inline void Field::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Field.value)
}
inline void Field::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Field.value)
}
inline ::std::string* Field::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Field.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Field::release_value() {
  // @@protoc_insertion_point(field_release:Field.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Field.value)
}

// .FieldOption option = 4;
inline void Field::clear_option() {
  option_ = 0;
}
inline ::FieldOption Field::option() const {
  // @@protoc_insertion_point(field_get:Field.option)
  return static_cast< ::FieldOption >(option_);
}
inline void Field::set_option(::FieldOption value) {
  
  option_ = value;
  // @@protoc_insertion_point(field_set:Field.option)
}

// -------------------------------------------------------------------

// Document

// string p_key = 1;
inline void Document::clear_p_key() {
  p_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Document::p_key() const {
  // @@protoc_insertion_point(field_get:Document.p_key)
  return p_key_.GetNoArena();
}
inline void Document::set_p_key(const ::std::string& value) {
  
  p_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Document.p_key)
}
#if LANG_CXX11
inline void Document::set_p_key(::std::string&& value) {
  
  p_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Document.p_key)
}
#endif
inline void Document::set_p_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  p_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Document.p_key)
}
inline void Document::set_p_key(const char* value, size_t size) {
  
  p_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Document.p_key)
}
inline ::std::string* Document::mutable_p_key() {
  
  // @@protoc_insertion_point(field_mutable:Document.p_key)
  return p_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_p_key() {
  // @@protoc_insertion_point(field_release:Document.p_key)
  
  return p_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_p_key(::std::string* p_key) {
  if (p_key != NULL) {
    
  } else {
    
  }
  p_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_key);
  // @@protoc_insertion_point(field_set_allocated:Document.p_key)
}

// repeated .Field fields = 2;
inline int Document::fields_size() const {
  return fields_.size();
}
inline void Document::clear_fields() {
  fields_.Clear();
}
inline ::Field* Document::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:Document.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Field >*
Document::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:Document.fields)
  return &fields_;
}
inline const ::Field& Document::fields(int index) const {
  // @@protoc_insertion_point(field_get:Document.fields)
  return fields_.Get(index);
}
inline ::Field* Document::add_fields() {
  // @@protoc_insertion_point(field_add:Document.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Field >&
Document::fields() const {
  // @@protoc_insertion_point(field_list:Document.fields)
  return fields_;
}

// -------------------------------------------------------------------

// Item

// .Error err = 1;
inline bool Item::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
inline const ::Error& Item::_internal_err() const {
  return *err_;
}
inline const ::Error& Item::err() const {
  const ::Error* p = err_;
  // @@protoc_insertion_point(field_get:Item.err)
  return p != NULL ? *p : *reinterpret_cast<const ::Error*>(
      &::_Error_default_instance_);
}
inline ::Error* Item::release_err() {
  // @@protoc_insertion_point(field_release:Item.err)
  
  ::Error* temp = err_;
  err_ = NULL;
  return temp;
}
inline ::Error* Item::mutable_err() {
  
  if (err_ == NULL) {
    auto* p = CreateMaybeMessage<::Error>(GetArenaNoVirtual());
    err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Item.err)
  return err_;
}
inline void Item::set_allocated_err(::Error* err) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(err_);
  }
  if (err) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      err = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    
  } else {
    
  }
  err_ = err;
  // @@protoc_insertion_point(field_set_allocated:Item.err)
}

// .Document doc = 2;
inline bool Item::has_doc() const {
  return this != internal_default_instance() && doc_ != NULL;
}
inline void Item::clear_doc() {
  if (GetArenaNoVirtual() == NULL && doc_ != NULL) {
    delete doc_;
  }
  doc_ = NULL;
}
inline const ::Document& Item::_internal_doc() const {
  return *doc_;
}
inline const ::Document& Item::doc() const {
  const ::Document* p = doc_;
  // @@protoc_insertion_point(field_get:Item.doc)
  return p != NULL ? *p : *reinterpret_cast<const ::Document*>(
      &::_Document_default_instance_);
}
inline ::Document* Item::release_doc() {
  // @@protoc_insertion_point(field_release:Item.doc)
  
  ::Document* temp = doc_;
  doc_ = NULL;
  return temp;
}
inline ::Document* Item::mutable_doc() {
  
  if (doc_ == NULL) {
    auto* p = CreateMaybeMessage<::Document>(GetArenaNoVirtual());
    doc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Item.doc)
  return doc_;
}
inline void Item::set_allocated_doc(::Document* doc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_;
  }
  if (doc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      doc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:Item.doc)
}

// string msg = 3;
inline void Item::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::msg() const {
  // @@protoc_insertion_point(field_get:Item.msg)
  return msg_.GetNoArena();
}
inline void Item::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Item.msg)
}
#if LANG_CXX11
inline void Item::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Item.msg)
}
#endif
inline void Item::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Item.msg)
}
inline void Item::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Item.msg)
}
inline ::std::string* Item::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Item.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_msg() {
  // @@protoc_insertion_point(field_release:Item.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Item.msg)
}

// -------------------------------------------------------------------

// VectorMetaInfo

// int32 dimension = 1;
inline void VectorMetaInfo::clear_dimension() {
  dimension_ = 0;
}
inline ::google::protobuf::int32 VectorMetaInfo::dimension() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.dimension)
  return dimension_;
}
inline void VectorMetaInfo::set_dimension(::google::protobuf::int32 value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:VectorMetaInfo.dimension)
}

// .VectorMetaInfo.ValueType value_type = 2;
inline void VectorMetaInfo::clear_value_type() {
  value_type_ = 0;
}
inline ::VectorMetaInfo_ValueType VectorMetaInfo::value_type() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.value_type)
  return static_cast< ::VectorMetaInfo_ValueType >(value_type_);
}
inline void VectorMetaInfo::set_value_type(::VectorMetaInfo_ValueType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:VectorMetaInfo.value_type)
}

// .VectorMetaInfo.StoreType store_type = 3;
inline void VectorMetaInfo::clear_store_type() {
  store_type_ = 0;
}
inline ::VectorMetaInfo_StoreType VectorMetaInfo::store_type() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.store_type)
  return static_cast< ::VectorMetaInfo_StoreType >(store_type_);
}
inline void VectorMetaInfo::set_store_type(::VectorMetaInfo_StoreType value) {
  
  store_type_ = value;
  // @@protoc_insertion_point(field_set:VectorMetaInfo.store_type)
}

// string store_param = 4;
inline void VectorMetaInfo::clear_store_param() {
  store_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VectorMetaInfo::store_param() const {
  // @@protoc_insertion_point(field_get:VectorMetaInfo.store_param)
  return store_param_.GetNoArena();
}
inline void VectorMetaInfo::set_store_param(const ::std::string& value) {
  
  store_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VectorMetaInfo.store_param)
}
#if LANG_CXX11
inline void VectorMetaInfo::set_store_param(::std::string&& value) {
  
  store_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VectorMetaInfo.store_param)
}
#endif
inline void VectorMetaInfo::set_store_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  store_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VectorMetaInfo.store_param)
}
inline void VectorMetaInfo::set_store_param(const char* value, size_t size) {
  
  store_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VectorMetaInfo.store_param)
}
inline ::std::string* VectorMetaInfo::mutable_store_param() {
  
  // @@protoc_insertion_point(field_mutable:VectorMetaInfo.store_param)
  return store_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorMetaInfo::release_store_param() {
  // @@protoc_insertion_point(field_release:VectorMetaInfo.store_param)
  
  return store_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorMetaInfo::set_allocated_store_param(::std::string* store_param) {
  if (store_param != NULL) {
    
  } else {
    
  }
  store_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_param);
  // @@protoc_insertion_point(field_set_allocated:VectorMetaInfo.store_param)
}

// -------------------------------------------------------------------

// FieldMetaInfo

// string name = 1;
inline void FieldMetaInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldMetaInfo::name() const {
  // @@protoc_insertion_point(field_get:FieldMetaInfo.name)
  return name_.GetNoArena();
}
inline void FieldMetaInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FieldMetaInfo.name)
}
#if LANG_CXX11
inline void FieldMetaInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FieldMetaInfo.name)
}
#endif
inline void FieldMetaInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FieldMetaInfo.name)
}
inline void FieldMetaInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FieldMetaInfo.name)
}
inline ::std::string* FieldMetaInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:FieldMetaInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldMetaInfo::release_name() {
  // @@protoc_insertion_point(field_release:FieldMetaInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMetaInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FieldMetaInfo.name)
}

// .FieldType data_type = 2;
inline void FieldMetaInfo::clear_data_type() {
  data_type_ = 0;
}
inline ::FieldType FieldMetaInfo::data_type() const {
  // @@protoc_insertion_point(field_get:FieldMetaInfo.data_type)
  return static_cast< ::FieldType >(data_type_);
}
inline void FieldMetaInfo::set_data_type(::FieldType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:FieldMetaInfo.data_type)
}

// bool is_index = 3;
inline void FieldMetaInfo::clear_is_index() {
  is_index_ = false;
}
inline bool FieldMetaInfo::is_index() const {
  // @@protoc_insertion_point(field_get:FieldMetaInfo.is_index)
  return is_index_;
}
inline void FieldMetaInfo::set_is_index(bool value) {
  
  is_index_ = value;
  // @@protoc_insertion_point(field_set:FieldMetaInfo.is_index)
}

// .VectorMetaInfo vector_meta_info = 4;
inline bool FieldMetaInfo::has_vector_meta_info() const {
  return this != internal_default_instance() && vector_meta_info_ != NULL;
}
inline void FieldMetaInfo::clear_vector_meta_info() {
  if (GetArenaNoVirtual() == NULL && vector_meta_info_ != NULL) {
    delete vector_meta_info_;
  }
  vector_meta_info_ = NULL;
}
inline const ::VectorMetaInfo& FieldMetaInfo::_internal_vector_meta_info() const {
  return *vector_meta_info_;
}
inline const ::VectorMetaInfo& FieldMetaInfo::vector_meta_info() const {
  const ::VectorMetaInfo* p = vector_meta_info_;
  // @@protoc_insertion_point(field_get:FieldMetaInfo.vector_meta_info)
  return p != NULL ? *p : *reinterpret_cast<const ::VectorMetaInfo*>(
      &::_VectorMetaInfo_default_instance_);
}
inline ::VectorMetaInfo* FieldMetaInfo::release_vector_meta_info() {
  // @@protoc_insertion_point(field_release:FieldMetaInfo.vector_meta_info)
  
  ::VectorMetaInfo* temp = vector_meta_info_;
  vector_meta_info_ = NULL;
  return temp;
}
inline ::VectorMetaInfo* FieldMetaInfo::mutable_vector_meta_info() {
  
  if (vector_meta_info_ == NULL) {
    auto* p = CreateMaybeMessage<::VectorMetaInfo>(GetArenaNoVirtual());
    vector_meta_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FieldMetaInfo.vector_meta_info)
  return vector_meta_info_;
}
inline void FieldMetaInfo::set_allocated_vector_meta_info(::VectorMetaInfo* vector_meta_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vector_meta_info_;
  }
  if (vector_meta_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vector_meta_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vector_meta_info, submessage_arena);
    }
    
  } else {
    
  }
  vector_meta_info_ = vector_meta_info;
  // @@protoc_insertion_point(field_set_allocated:FieldMetaInfo.vector_meta_info)
}

// -------------------------------------------------------------------

// TableMetaInfo

// string primary_key_name = 1;
inline void TableMetaInfo::clear_primary_key_name() {
  primary_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableMetaInfo::primary_key_name() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.primary_key_name)
  return primary_key_name_.GetNoArena();
}
inline void TableMetaInfo::set_primary_key_name(const ::std::string& value) {
  
  primary_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TableMetaInfo.primary_key_name)
}
#if LANG_CXX11
inline void TableMetaInfo::set_primary_key_name(::std::string&& value) {
  
  primary_key_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TableMetaInfo.primary_key_name)
}
#endif
inline void TableMetaInfo::set_primary_key_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TableMetaInfo.primary_key_name)
}
inline void TableMetaInfo::set_primary_key_name(const char* value, size_t size) {
  
  primary_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TableMetaInfo.primary_key_name)
}
inline ::std::string* TableMetaInfo::mutable_primary_key_name() {
  
  // @@protoc_insertion_point(field_mutable:TableMetaInfo.primary_key_name)
  return primary_key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableMetaInfo::release_primary_key_name() {
  // @@protoc_insertion_point(field_release:TableMetaInfo.primary_key_name)
  
  return primary_key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableMetaInfo::set_allocated_primary_key_name(::std::string* primary_key_name) {
  if (primary_key_name != NULL) {
    
  } else {
    
  }
  primary_key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key_name);
  // @@protoc_insertion_point(field_set_allocated:TableMetaInfo.primary_key_name)
}

// .FieldType primary_key_type = 2;
inline void TableMetaInfo::clear_primary_key_type() {
  primary_key_type_ = 0;
}
inline ::FieldType TableMetaInfo::primary_key_type() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.primary_key_type)
  return static_cast< ::FieldType >(primary_key_type_);
}
inline void TableMetaInfo::set_primary_key_type(::FieldType value) {
  
  primary_key_type_ = value;
  // @@protoc_insertion_point(field_set:TableMetaInfo.primary_key_type)
}

// int32 partitions_num = 3;
inline void TableMetaInfo::clear_partitions_num() {
  partitions_num_ = 0;
}
inline ::google::protobuf::int32 TableMetaInfo::partitions_num() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.partitions_num)
  return partitions_num_;
}
inline void TableMetaInfo::set_partitions_num(::google::protobuf::int32 value) {
  
  partitions_num_ = value;
  // @@protoc_insertion_point(field_set:TableMetaInfo.partitions_num)
}

// int32 replicas_num = 4;
inline void TableMetaInfo::clear_replicas_num() {
  replicas_num_ = 0;
}
inline ::google::protobuf::int32 TableMetaInfo::replicas_num() const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.replicas_num)
  return replicas_num_;
}
inline void TableMetaInfo::set_replicas_num(::google::protobuf::int32 value) {
  
  replicas_num_ = value;
  // @@protoc_insertion_point(field_set:TableMetaInfo.replicas_num)
}

// repeated .FieldMetaInfo field_meta_info = 5;
inline int TableMetaInfo::field_meta_info_size() const {
  return field_meta_info_.size();
}
inline void TableMetaInfo::clear_field_meta_info() {
  field_meta_info_.Clear();
}
inline ::FieldMetaInfo* TableMetaInfo::mutable_field_meta_info(int index) {
  // @@protoc_insertion_point(field_mutable:TableMetaInfo.field_meta_info)
  return field_meta_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::FieldMetaInfo >*
TableMetaInfo::mutable_field_meta_info() {
  // @@protoc_insertion_point(field_mutable_list:TableMetaInfo.field_meta_info)
  return &field_meta_info_;
}
inline const ::FieldMetaInfo& TableMetaInfo::field_meta_info(int index) const {
  // @@protoc_insertion_point(field_get:TableMetaInfo.field_meta_info)
  return field_meta_info_.Get(index);
}
inline ::FieldMetaInfo* TableMetaInfo::add_field_meta_info() {
  // @@protoc_insertion_point(field_add:TableMetaInfo.field_meta_info)
  return field_meta_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FieldMetaInfo >&
TableMetaInfo::field_meta_info() const {
  // @@protoc_insertion_point(field_list:TableMetaInfo.field_meta_info)
  return field_meta_info_;
}

// -------------------------------------------------------------------

// Table

// string name = 1;
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:Table.name)
  return name_.GetNoArena();
}
inline void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Table.name)
}
#if LANG_CXX11
inline void Table::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Table.name)
}
#endif
inline void Table::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Table.name)
}
inline ::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:Table.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Table.name)
}

// .TableMetaInfo table_meta_info = 2;
inline bool Table::has_table_meta_info() const {
  return this != internal_default_instance() && table_meta_info_ != NULL;
}
inline void Table::clear_table_meta_info() {
  if (GetArenaNoVirtual() == NULL && table_meta_info_ != NULL) {
    delete table_meta_info_;
  }
  table_meta_info_ = NULL;
}
inline const ::TableMetaInfo& Table::_internal_table_meta_info() const {
  return *table_meta_info_;
}
inline const ::TableMetaInfo& Table::table_meta_info() const {
  const ::TableMetaInfo* p = table_meta_info_;
  // @@protoc_insertion_point(field_get:Table.table_meta_info)
  return p != NULL ? *p : *reinterpret_cast<const ::TableMetaInfo*>(
      &::_TableMetaInfo_default_instance_);
}
inline ::TableMetaInfo* Table::release_table_meta_info() {
  // @@protoc_insertion_point(field_release:Table.table_meta_info)
  
  ::TableMetaInfo* temp = table_meta_info_;
  table_meta_info_ = NULL;
  return temp;
}
inline ::TableMetaInfo* Table::mutable_table_meta_info() {
  
  if (table_meta_info_ == NULL) {
    auto* p = CreateMaybeMessage<::TableMetaInfo>(GetArenaNoVirtual());
    table_meta_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Table.table_meta_info)
  return table_meta_info_;
}
inline void Table::set_allocated_table_meta_info(::TableMetaInfo* table_meta_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_meta_info_;
  }
  if (table_meta_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_meta_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_meta_info, submessage_arena);
    }
    
  } else {
    
  }
  table_meta_info_ = table_meta_info;
  // @@protoc_insertion_point(field_set_allocated:Table.table_meta_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DB

// string name = 1;
inline void DB::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DB::name() const {
  // @@protoc_insertion_point(field_get:DB.name)
  return name_.GetNoArena();
}
inline void DB::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DB.name)
}
#if LANG_CXX11
inline void DB::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DB.name)
}
#endif
inline void DB::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DB.name)
}
inline void DB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DB.name)
}
inline ::std::string* DB::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DB.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DB::release_name() {
  // @@protoc_insertion_point(field_release:DB.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DB::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DB.name)
}

// repeated .Table tables = 2;
inline int DB::tables_size() const {
  return tables_.size();
}
inline void DB::clear_tables() {
  tables_.Clear();
}
inline ::Table* DB::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:DB.tables)
  return tables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Table >*
DB::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:DB.tables)
  return &tables_;
}
inline const ::Table& DB::tables(int index) const {
  // @@protoc_insertion_point(field_get:DB.tables)
  return tables_.Get(index);
}
inline ::Table* DB::add_tables() {
  // @@protoc_insertion_point(field_add:DB.tables)
  return tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Table >&
DB::tables() const {
  // @@protoc_insertion_point(field_list:DB.tables)
  return tables_;
}

// map<string, string> user_password_pair = 3;
inline int DB::user_password_pair_size() const {
  return user_password_pair_.size();
}
inline void DB::clear_user_password_pair() {
  user_password_pair_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
DB::user_password_pair() const {
  // @@protoc_insertion_point(field_map:DB.user_password_pair)
  return user_password_pair_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
DB::mutable_user_password_pair() {
  // @@protoc_insertion_point(field_mutable_map:DB.user_password_pair)
  return user_password_pair_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::VectorMetaInfo_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VectorMetaInfo_ValueType>() {
  return ::VectorMetaInfo_ValueType_descriptor();
}
template <> struct is_proto_enum< ::VectorMetaInfo_StoreType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VectorMetaInfo_StoreType>() {
  return ::VectorMetaInfo_StoreType_descriptor();
}
template <> struct is_proto_enum< ::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FieldType>() {
  return ::FieldType_descriptor();
}
template <> struct is_proto_enum< ::FieldOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FieldOption>() {
  return ::FieldOption_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_data_5fmodel_2eproto
