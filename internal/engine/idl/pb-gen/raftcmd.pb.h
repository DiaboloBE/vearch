// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftcmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raftcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "errors.pb.h"
#include "data_model.pb.h"
#include "router_grpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raftcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raftcmd_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftcmd_2eproto;
class DocCmd;
struct DocCmdDefaultTypeInternal;
extern DocCmdDefaultTypeInternal _DocCmd_default_instance_;
class PartitionData;
struct PartitionDataDefaultTypeInternal;
extern PartitionDataDefaultTypeInternal _PartitionData_default_instance_;
class RaftCommand;
struct RaftCommandDefaultTypeInternal;
extern RaftCommandDefaultTypeInternal _RaftCommand_default_instance_;
class SnapData;
struct SnapDataDefaultTypeInternal;
extern SnapDataDefaultTypeInternal _SnapData_default_instance_;
class UpdateSpace;
struct UpdateSpaceDefaultTypeInternal;
extern UpdateSpaceDefaultTypeInternal _UpdateSpace_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DocCmd* Arena::CreateMaybeMessage<::DocCmd>(Arena*);
template<> ::PartitionData* Arena::CreateMaybeMessage<::PartitionData>(Arena*);
template<> ::RaftCommand* Arena::CreateMaybeMessage<::RaftCommand>(Arena*);
template<> ::SnapData* Arena::CreateMaybeMessage<::SnapData>(Arena*);
template<> ::UpdateSpace* Arena::CreateMaybeMessage<::UpdateSpace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum OpType : int {
  CREATE = 0,
  DELETE = 1,
  BULK = 2,
  GET = 3,
  SEARCH = 4,
  OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OpType_IsValid(int value);
constexpr OpType OpType_MIN = CREATE;
constexpr OpType OpType_MAX = SEARCH;
constexpr int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor();
template<typename T>
inline const std::string& OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpType_descriptor(), enum_t_value);
}
inline bool OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
enum CmdType : int {
  WRITE = 0,
  UPDATESPACE = 1,
  FLUSH = 2,
  SEARCHDEL = 3,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CmdType_IsValid(int value);
constexpr CmdType CmdType_MIN = WRITE;
constexpr CmdType CmdType_MAX = SEARCHDEL;
constexpr int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor();
template<typename T>
inline const std::string& CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdType_descriptor(), enum_t_value);
}
inline bool CmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
// ===================================================================

class PartitionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PartitionData) */ {
 public:
  inline PartitionData() : PartitionData(nullptr) {}
  ~PartitionData() override;
  explicit PROTOBUF_CONSTEXPR PartitionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionData(const PartitionData& from);
  PartitionData(PartitionData&& from) noexcept
    : PartitionData() {
    *this = ::std::move(from);
  }

  inline PartitionData& operator=(const PartitionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionData& operator=(PartitionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionData* internal_default_instance() {
    return reinterpret_cast<const PartitionData*>(
               &_PartitionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PartitionData& a, PartitionData& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartitionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartitionData& from) {
    PartitionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PartitionData";
  }
  protected:
  explicit PartitionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kSearchRequestsFieldNumber = 9,
    kSearchResponsesFieldNumber = 10,
    kMessageIDFieldNumber = 3,
    kDataFieldNumber = 7,
    kSearchRequestFieldNumber = 5,
    kSearchResponseFieldNumber = 6,
    kErrFieldNumber = 8,
    kDelByQueryResponseFieldNumber = 12,
    kIndexRequestFieldNumber = 13,
    kIndexResponseFieldNumber = 14,
    kQueryRequestFieldNumber = 15,
    kTypeFieldNumber = 1,
    kPartitionIDFieldNumber = 2,
    kDelNumFieldNumber = 11,
  };
  // repeated .Item items = 4;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Item >*
      mutable_items();
  private:
  const ::Item& _internal_items(int index) const;
  ::Item* _internal_add_items();
  public:
  const ::Item& items(int index) const;
  ::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Item >&
      items() const;

  // repeated .SearchRequest search_requests = 9;
  int search_requests_size() const;
  private:
  int _internal_search_requests_size() const;
  public:
  void clear_search_requests();
  ::SearchRequest* mutable_search_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchRequest >*
      mutable_search_requests();
  private:
  const ::SearchRequest& _internal_search_requests(int index) const;
  ::SearchRequest* _internal_add_search_requests();
  public:
  const ::SearchRequest& search_requests(int index) const;
  ::SearchRequest* add_search_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchRequest >&
      search_requests() const;

  // repeated .SearchResponse search_responses = 10;
  int search_responses_size() const;
  private:
  int _internal_search_responses_size() const;
  public:
  void clear_search_responses();
  ::SearchResponse* mutable_search_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse >*
      mutable_search_responses();
  private:
  const ::SearchResponse& _internal_search_responses(int index) const;
  ::SearchResponse* _internal_add_search_responses();
  public:
  const ::SearchResponse& search_responses(int index) const;
  ::SearchResponse* add_search_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse >&
      search_responses() const;

  // string messageID = 3;
  void clear_messageid();
  const std::string& messageid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_messageid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* messageid);
  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(const std::string& value);
  std::string* _internal_mutable_messageid();
  public:

  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .SearchRequest search_request = 5;
  bool has_search_request() const;
  private:
  bool _internal_has_search_request() const;
  public:
  void clear_search_request();
  const ::SearchRequest& search_request() const;
  PROTOBUF_NODISCARD ::SearchRequest* release_search_request();
  ::SearchRequest* mutable_search_request();
  void set_allocated_search_request(::SearchRequest* search_request);
  private:
  const ::SearchRequest& _internal_search_request() const;
  ::SearchRequest* _internal_mutable_search_request();
  public:
  void unsafe_arena_set_allocated_search_request(
      ::SearchRequest* search_request);
  ::SearchRequest* unsafe_arena_release_search_request();

  // .SearchResponse search_response = 6;
  bool has_search_response() const;
  private:
  bool _internal_has_search_response() const;
  public:
  void clear_search_response();
  const ::SearchResponse& search_response() const;
  PROTOBUF_NODISCARD ::SearchResponse* release_search_response();
  ::SearchResponse* mutable_search_response();
  void set_allocated_search_response(::SearchResponse* search_response);
  private:
  const ::SearchResponse& _internal_search_response() const;
  ::SearchResponse* _internal_mutable_search_response();
  public:
  void unsafe_arena_set_allocated_search_response(
      ::SearchResponse* search_response);
  ::SearchResponse* unsafe_arena_release_search_response();

  // .Error err = 8;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const ::Error& err() const;
  PROTOBUF_NODISCARD ::Error* release_err();
  ::Error* mutable_err();
  void set_allocated_err(::Error* err);
  private:
  const ::Error& _internal_err() const;
  ::Error* _internal_mutable_err();
  public:
  void unsafe_arena_set_allocated_err(
      ::Error* err);
  ::Error* unsafe_arena_release_err();

  // .DelByQueryeResponse del_by_query_response = 12;
  bool has_del_by_query_response() const;
  private:
  bool _internal_has_del_by_query_response() const;
  public:
  void clear_del_by_query_response();
  const ::DelByQueryeResponse& del_by_query_response() const;
  PROTOBUF_NODISCARD ::DelByQueryeResponse* release_del_by_query_response();
  ::DelByQueryeResponse* mutable_del_by_query_response();
  void set_allocated_del_by_query_response(::DelByQueryeResponse* del_by_query_response);
  private:
  const ::DelByQueryeResponse& _internal_del_by_query_response() const;
  ::DelByQueryeResponse* _internal_mutable_del_by_query_response();
  public:
  void unsafe_arena_set_allocated_del_by_query_response(
      ::DelByQueryeResponse* del_by_query_response);
  ::DelByQueryeResponse* unsafe_arena_release_del_by_query_response();

  // .IndexRequest index_request = 13;
  bool has_index_request() const;
  private:
  bool _internal_has_index_request() const;
  public:
  void clear_index_request();
  const ::IndexRequest& index_request() const;
  PROTOBUF_NODISCARD ::IndexRequest* release_index_request();
  ::IndexRequest* mutable_index_request();
  void set_allocated_index_request(::IndexRequest* index_request);
  private:
  const ::IndexRequest& _internal_index_request() const;
  ::IndexRequest* _internal_mutable_index_request();
  public:
  void unsafe_arena_set_allocated_index_request(
      ::IndexRequest* index_request);
  ::IndexRequest* unsafe_arena_release_index_request();

  // .IndexResponse index_response = 14;
  bool has_index_response() const;
  private:
  bool _internal_has_index_response() const;
  public:
  void clear_index_response();
  const ::IndexResponse& index_response() const;
  PROTOBUF_NODISCARD ::IndexResponse* release_index_response();
  ::IndexResponse* mutable_index_response();
  void set_allocated_index_response(::IndexResponse* index_response);
  private:
  const ::IndexResponse& _internal_index_response() const;
  ::IndexResponse* _internal_mutable_index_response();
  public:
  void unsafe_arena_set_allocated_index_response(
      ::IndexResponse* index_response);
  ::IndexResponse* unsafe_arena_release_index_response();

  // .QueryRequest query_request = 15;
  bool has_query_request() const;
  private:
  bool _internal_has_query_request() const;
  public:
  void clear_query_request();
  const ::QueryRequest& query_request() const;
  PROTOBUF_NODISCARD ::QueryRequest* release_query_request();
  ::QueryRequest* mutable_query_request();
  void set_allocated_query_request(::QueryRequest* query_request);
  private:
  const ::QueryRequest& _internal_query_request() const;
  ::QueryRequest* _internal_mutable_query_request();
  public:
  void unsafe_arena_set_allocated_query_request(
      ::QueryRequest* query_request);
  ::QueryRequest* unsafe_arena_release_query_request();

  // .OpType type = 1;
  void clear_type();
  ::OpType type() const;
  void set_type(::OpType value);
  private:
  ::OpType _internal_type() const;
  void _internal_set_type(::OpType value);
  public:

  // uint32 partitionID = 2;
  void clear_partitionid();
  uint32_t partitionid() const;
  void set_partitionid(uint32_t value);
  private:
  uint32_t _internal_partitionid() const;
  void _internal_set_partitionid(uint32_t value);
  public:

  // int32 del_num = 11;
  void clear_del_num();
  int32_t del_num() const;
  void set_del_num(int32_t value);
  private:
  int32_t _internal_del_num() const;
  void _internal_set_del_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PartitionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Item > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchRequest > search_requests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse > search_responses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::SearchRequest* search_request_;
    ::SearchResponse* search_response_;
    ::Error* err_;
    ::DelByQueryeResponse* del_by_query_response_;
    ::IndexRequest* index_request_;
    ::IndexResponse* index_response_;
    ::QueryRequest* query_request_;
    int type_;
    uint32_t partitionid_;
    int32_t del_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftcmd_2eproto;
};
// -------------------------------------------------------------------

class UpdateSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateSpace) */ {
 public:
  inline UpdateSpace() : UpdateSpace(nullptr) {}
  ~UpdateSpace() override;
  explicit PROTOBUF_CONSTEXPR UpdateSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSpace(const UpdateSpace& from);
  UpdateSpace(UpdateSpace&& from) noexcept
    : UpdateSpace() {
    *this = ::std::move(from);
  }

  inline UpdateSpace& operator=(const UpdateSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSpace& operator=(UpdateSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSpace* internal_default_instance() {
    return reinterpret_cast<const UpdateSpace*>(
               &_UpdateSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateSpace& a, UpdateSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSpace& from) {
    UpdateSpace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateSpace";
  }
  protected:
  explicit UpdateSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // bytes Space = 1;
  void clear_space();
  const std::string& space() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_space(ArgT0&& arg0, ArgT... args);
  std::string* mutable_space();
  PROTOBUF_NODISCARD std::string* release_space();
  void set_allocated_space(std::string* space);
  private:
  const std::string& _internal_space() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_space(const std::string& value);
  std::string* _internal_mutable_space();
  public:

  // uint64 version = 2;
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UpdateSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr space_;
    uint64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftcmd_2eproto;
};
// -------------------------------------------------------------------

class DocCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DocCmd) */ {
 public:
  inline DocCmd() : DocCmd(nullptr) {}
  ~DocCmd() override;
  explicit PROTOBUF_CONSTEXPR DocCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocCmd(const DocCmd& from);
  DocCmd(DocCmd&& from) noexcept
    : DocCmd() {
    *this = ::std::move(from);
  }

  inline DocCmd& operator=(const DocCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocCmd& operator=(DocCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocCmd* internal_default_instance() {
    return reinterpret_cast<const DocCmd*>(
               &_DocCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DocCmd& a, DocCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DocCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DocCmd& from) {
    DocCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DocCmd";
  }
  protected:
  explicit DocCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocsFieldNumber = 8,
    kDocFieldNumber = 7,
    kVersionFieldNumber = 3,
    kTypeFieldNumber = 1,
    kSlotFieldNumber = 5,
  };
  // repeated bytes docs = 8;
  int docs_size() const;
  private:
  int _internal_docs_size() const;
  public:
  void clear_docs();
  const std::string& docs(int index) const;
  std::string* mutable_docs(int index);
  void set_docs(int index, const std::string& value);
  void set_docs(int index, std::string&& value);
  void set_docs(int index, const char* value);
  void set_docs(int index, const void* value, size_t size);
  std::string* add_docs();
  void add_docs(const std::string& value);
  void add_docs(std::string&& value);
  void add_docs(const char* value);
  void add_docs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& docs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_docs();
  private:
  const std::string& _internal_docs(int index) const;
  std::string* _internal_add_docs();
  public:

  // bytes doc = 7;
  void clear_doc();
  const std::string& doc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_doc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_doc();
  PROTOBUF_NODISCARD std::string* release_doc();
  void set_allocated_doc(std::string* doc);
  private:
  const std::string& _internal_doc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc(const std::string& value);
  std::string* _internal_mutable_doc();
  public:

  // int64 version = 3;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // .OpType type = 1;
  void clear_type();
  ::OpType type() const;
  void set_type(::OpType value);
  private:
  ::OpType _internal_type() const;
  void _internal_set_type(::OpType value);
  public:

  // uint32 slot = 5;
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DocCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> docs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_;
    int64_t version_;
    int type_;
    uint32_t slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftcmd_2eproto;
};
// -------------------------------------------------------------------

class RaftCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaftCommand) */ {
 public:
  inline RaftCommand() : RaftCommand(nullptr) {}
  ~RaftCommand() override;
  explicit PROTOBUF_CONSTEXPR RaftCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftCommand(const RaftCommand& from);
  RaftCommand(RaftCommand&& from) noexcept
    : RaftCommand() {
    *this = ::std::move(from);
  }

  inline RaftCommand& operator=(const RaftCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftCommand& operator=(RaftCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftCommand* internal_default_instance() {
    return reinterpret_cast<const RaftCommand*>(
               &_RaftCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RaftCommand& a, RaftCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftCommand& from) {
    RaftCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaftCommand";
  }
  protected:
  explicit RaftCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteCommandFieldNumber = 2,
    kUpdateSpaceFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .DocCmd write_command = 2;
  bool has_write_command() const;
  private:
  bool _internal_has_write_command() const;
  public:
  void clear_write_command();
  const ::DocCmd& write_command() const;
  PROTOBUF_NODISCARD ::DocCmd* release_write_command();
  ::DocCmd* mutable_write_command();
  void set_allocated_write_command(::DocCmd* write_command);
  private:
  const ::DocCmd& _internal_write_command() const;
  ::DocCmd* _internal_mutable_write_command();
  public:
  void unsafe_arena_set_allocated_write_command(
      ::DocCmd* write_command);
  ::DocCmd* unsafe_arena_release_write_command();

  // .UpdateSpace update_space = 3;
  bool has_update_space() const;
  private:
  bool _internal_has_update_space() const;
  public:
  void clear_update_space();
  const ::UpdateSpace& update_space() const;
  PROTOBUF_NODISCARD ::UpdateSpace* release_update_space();
  ::UpdateSpace* mutable_update_space();
  void set_allocated_update_space(::UpdateSpace* update_space);
  private:
  const ::UpdateSpace& _internal_update_space() const;
  ::UpdateSpace* _internal_mutable_update_space();
  public:
  void unsafe_arena_set_allocated_update_space(
      ::UpdateSpace* update_space);
  ::UpdateSpace* unsafe_arena_release_update_space();

  // .CmdType type = 1;
  void clear_type();
  ::CmdType type() const;
  void set_type(::CmdType value);
  private:
  ::CmdType _internal_type() const;
  void _internal_set_type(::CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:RaftCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DocCmd* write_command_;
    ::UpdateSpace* update_space_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftcmd_2eproto;
};
// -------------------------------------------------------------------

class SnapData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SnapData) */ {
 public:
  inline SnapData() : SnapData(nullptr) {}
  ~SnapData() override;
  explicit PROTOBUF_CONSTEXPR SnapData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapData(const SnapData& from);
  SnapData(SnapData&& from) noexcept
    : SnapData() {
    *this = ::std::move(from);
  }

  inline SnapData& operator=(const SnapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapData& operator=(SnapData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapData* internal_default_instance() {
    return reinterpret_cast<const SnapData*>(
               &_SnapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SnapData& a, SnapData& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SnapData& from) {
    SnapData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SnapData";
  }
  protected:
  explicit SnapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:SnapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PartitionData

// .OpType type = 1;
inline void PartitionData::clear_type() {
  _impl_.type_ = 0;
}
inline ::OpType PartitionData::_internal_type() const {
  return static_cast< ::OpType >(_impl_.type_);
}
inline ::OpType PartitionData::type() const {
  // @@protoc_insertion_point(field_get:PartitionData.type)
  return _internal_type();
}
inline void PartitionData::_internal_set_type(::OpType value) {
  
  _impl_.type_ = value;
}
inline void PartitionData::set_type(::OpType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PartitionData.type)
}

// uint32 partitionID = 2;
inline void PartitionData::clear_partitionid() {
  _impl_.partitionid_ = 0u;
}
inline uint32_t PartitionData::_internal_partitionid() const {
  return _impl_.partitionid_;
}
inline uint32_t PartitionData::partitionid() const {
  // @@protoc_insertion_point(field_get:PartitionData.partitionID)
  return _internal_partitionid();
}
inline void PartitionData::_internal_set_partitionid(uint32_t value) {
  
  _impl_.partitionid_ = value;
}
inline void PartitionData::set_partitionid(uint32_t value) {
  _internal_set_partitionid(value);
  // @@protoc_insertion_point(field_set:PartitionData.partitionID)
}

// string messageID = 3;
inline void PartitionData::clear_messageid() {
  _impl_.messageid_.ClearToEmpty();
}
inline const std::string& PartitionData::messageid() const {
  // @@protoc_insertion_point(field_get:PartitionData.messageID)
  return _internal_messageid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PartitionData::set_messageid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.messageid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PartitionData.messageID)
}
inline std::string* PartitionData::mutable_messageid() {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:PartitionData.messageID)
  return _s;
}
inline const std::string& PartitionData::_internal_messageid() const {
  return _impl_.messageid_.Get();
}
inline void PartitionData::_internal_set_messageid(const std::string& value) {
  
  _impl_.messageid_.Set(value, GetArenaForAllocation());
}
inline std::string* PartitionData::_internal_mutable_messageid() {
  
  return _impl_.messageid_.Mutable(GetArenaForAllocation());
}
inline std::string* PartitionData::release_messageid() {
  // @@protoc_insertion_point(field_release:PartitionData.messageID)
  return _impl_.messageid_.Release();
}
inline void PartitionData::set_allocated_messageid(std::string* messageid) {
  if (messageid != nullptr) {
    
  } else {
    
  }
  _impl_.messageid_.SetAllocated(messageid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.messageid_.IsDefault()) {
    _impl_.messageid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PartitionData.messageID)
}

// repeated .Item items = 4;
inline int PartitionData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int PartitionData::items_size() const {
  return _internal_items_size();
}
inline ::Item* PartitionData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:PartitionData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Item >*
PartitionData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:PartitionData.items)
  return &_impl_.items_;
}
inline const ::Item& PartitionData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Item& PartitionData::items(int index) const {
  // @@protoc_insertion_point(field_get:PartitionData.items)
  return _internal_items(index);
}
inline ::Item* PartitionData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Item* PartitionData::add_items() {
  ::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:PartitionData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Item >&
PartitionData::items() const {
  // @@protoc_insertion_point(field_list:PartitionData.items)
  return _impl_.items_;
}

// .SearchRequest search_request = 5;
inline bool PartitionData::_internal_has_search_request() const {
  return this != internal_default_instance() && _impl_.search_request_ != nullptr;
}
inline bool PartitionData::has_search_request() const {
  return _internal_has_search_request();
}
inline const ::SearchRequest& PartitionData::_internal_search_request() const {
  const ::SearchRequest* p = _impl_.search_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::SearchRequest&>(
      ::_SearchRequest_default_instance_);
}
inline const ::SearchRequest& PartitionData::search_request() const {
  // @@protoc_insertion_point(field_get:PartitionData.search_request)
  return _internal_search_request();
}
inline void PartitionData::unsafe_arena_set_allocated_search_request(
    ::SearchRequest* search_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.search_request_);
  }
  _impl_.search_request_ = search_request;
  if (search_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PartitionData.search_request)
}
inline ::SearchRequest* PartitionData::release_search_request() {
  
  ::SearchRequest* temp = _impl_.search_request_;
  _impl_.search_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SearchRequest* PartitionData::unsafe_arena_release_search_request() {
  // @@protoc_insertion_point(field_release:PartitionData.search_request)
  
  ::SearchRequest* temp = _impl_.search_request_;
  _impl_.search_request_ = nullptr;
  return temp;
}
inline ::SearchRequest* PartitionData::_internal_mutable_search_request() {
  
  if (_impl_.search_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchRequest>(GetArenaForAllocation());
    _impl_.search_request_ = p;
  }
  return _impl_.search_request_;
}
inline ::SearchRequest* PartitionData::mutable_search_request() {
  ::SearchRequest* _msg = _internal_mutable_search_request();
  // @@protoc_insertion_point(field_mutable:PartitionData.search_request)
  return _msg;
}
inline void PartitionData::set_allocated_search_request(::SearchRequest* search_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.search_request_);
  }
  if (search_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_request));
    if (message_arena != submessage_arena) {
      search_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.search_request_ = search_request;
  // @@protoc_insertion_point(field_set_allocated:PartitionData.search_request)
}

// .SearchResponse search_response = 6;
inline bool PartitionData::_internal_has_search_response() const {
  return this != internal_default_instance() && _impl_.search_response_ != nullptr;
}
inline bool PartitionData::has_search_response() const {
  return _internal_has_search_response();
}
inline const ::SearchResponse& PartitionData::_internal_search_response() const {
  const ::SearchResponse* p = _impl_.search_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::SearchResponse&>(
      ::_SearchResponse_default_instance_);
}
inline const ::SearchResponse& PartitionData::search_response() const {
  // @@protoc_insertion_point(field_get:PartitionData.search_response)
  return _internal_search_response();
}
inline void PartitionData::unsafe_arena_set_allocated_search_response(
    ::SearchResponse* search_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.search_response_);
  }
  _impl_.search_response_ = search_response;
  if (search_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PartitionData.search_response)
}
inline ::SearchResponse* PartitionData::release_search_response() {
  
  ::SearchResponse* temp = _impl_.search_response_;
  _impl_.search_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SearchResponse* PartitionData::unsafe_arena_release_search_response() {
  // @@protoc_insertion_point(field_release:PartitionData.search_response)
  
  ::SearchResponse* temp = _impl_.search_response_;
  _impl_.search_response_ = nullptr;
  return temp;
}
inline ::SearchResponse* PartitionData::_internal_mutable_search_response() {
  
  if (_impl_.search_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchResponse>(GetArenaForAllocation());
    _impl_.search_response_ = p;
  }
  return _impl_.search_response_;
}
inline ::SearchResponse* PartitionData::mutable_search_response() {
  ::SearchResponse* _msg = _internal_mutable_search_response();
  // @@protoc_insertion_point(field_mutable:PartitionData.search_response)
  return _msg;
}
inline void PartitionData::set_allocated_search_response(::SearchResponse* search_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.search_response_);
  }
  if (search_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_response));
    if (message_arena != submessage_arena) {
      search_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.search_response_ = search_response;
  // @@protoc_insertion_point(field_set_allocated:PartitionData.search_response)
}

// bytes data = 7;
inline void PartitionData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PartitionData::data() const {
  // @@protoc_insertion_point(field_get:PartitionData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PartitionData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PartitionData.data)
}
inline std::string* PartitionData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PartitionData.data)
  return _s;
}
inline const std::string& PartitionData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PartitionData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PartitionData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* PartitionData::release_data() {
  // @@protoc_insertion_point(field_release:PartitionData.data)
  return _impl_.data_.Release();
}
inline void PartitionData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PartitionData.data)
}

// .Error err = 8;
inline bool PartitionData::_internal_has_err() const {
  return this != internal_default_instance() && _impl_.err_ != nullptr;
}
inline bool PartitionData::has_err() const {
  return _internal_has_err();
}
inline const ::Error& PartitionData::_internal_err() const {
  const ::Error* p = _impl_.err_;
  return p != nullptr ? *p : reinterpret_cast<const ::Error&>(
      ::_Error_default_instance_);
}
inline const ::Error& PartitionData::err() const {
  // @@protoc_insertion_point(field_get:PartitionData.err)
  return _internal_err();
}
inline void PartitionData::unsafe_arena_set_allocated_err(
    ::Error* err) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.err_);
  }
  _impl_.err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PartitionData.err)
}
inline ::Error* PartitionData::release_err() {
  
  ::Error* temp = _impl_.err_;
  _impl_.err_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Error* PartitionData::unsafe_arena_release_err() {
  // @@protoc_insertion_point(field_release:PartitionData.err)
  
  ::Error* temp = _impl_.err_;
  _impl_.err_ = nullptr;
  return temp;
}
inline ::Error* PartitionData::_internal_mutable_err() {
  
  if (_impl_.err_ == nullptr) {
    auto* p = CreateMaybeMessage<::Error>(GetArenaForAllocation());
    _impl_.err_ = p;
  }
  return _impl_.err_;
}
inline ::Error* PartitionData::mutable_err() {
  ::Error* _msg = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:PartitionData.err)
  return _msg;
}
inline void PartitionData::set_allocated_err(::Error* err) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.err_);
  }
  if (err) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err));
    if (message_arena != submessage_arena) {
      err = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.err_ = err;
  // @@protoc_insertion_point(field_set_allocated:PartitionData.err)
}

// repeated .SearchRequest search_requests = 9;
inline int PartitionData::_internal_search_requests_size() const {
  return _impl_.search_requests_.size();
}
inline int PartitionData::search_requests_size() const {
  return _internal_search_requests_size();
}
inline ::SearchRequest* PartitionData::mutable_search_requests(int index) {
  // @@protoc_insertion_point(field_mutable:PartitionData.search_requests)
  return _impl_.search_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchRequest >*
PartitionData::mutable_search_requests() {
  // @@protoc_insertion_point(field_mutable_list:PartitionData.search_requests)
  return &_impl_.search_requests_;
}
inline const ::SearchRequest& PartitionData::_internal_search_requests(int index) const {
  return _impl_.search_requests_.Get(index);
}
inline const ::SearchRequest& PartitionData::search_requests(int index) const {
  // @@protoc_insertion_point(field_get:PartitionData.search_requests)
  return _internal_search_requests(index);
}
inline ::SearchRequest* PartitionData::_internal_add_search_requests() {
  return _impl_.search_requests_.Add();
}
inline ::SearchRequest* PartitionData::add_search_requests() {
  ::SearchRequest* _add = _internal_add_search_requests();
  // @@protoc_insertion_point(field_add:PartitionData.search_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchRequest >&
PartitionData::search_requests() const {
  // @@protoc_insertion_point(field_list:PartitionData.search_requests)
  return _impl_.search_requests_;
}

// repeated .SearchResponse search_responses = 10;
inline int PartitionData::_internal_search_responses_size() const {
  return _impl_.search_responses_.size();
}
inline int PartitionData::search_responses_size() const {
  return _internal_search_responses_size();
}
inline ::SearchResponse* PartitionData::mutable_search_responses(int index) {
  // @@protoc_insertion_point(field_mutable:PartitionData.search_responses)
  return _impl_.search_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse >*
PartitionData::mutable_search_responses() {
  // @@protoc_insertion_point(field_mutable_list:PartitionData.search_responses)
  return &_impl_.search_responses_;
}
inline const ::SearchResponse& PartitionData::_internal_search_responses(int index) const {
  return _impl_.search_responses_.Get(index);
}
inline const ::SearchResponse& PartitionData::search_responses(int index) const {
  // @@protoc_insertion_point(field_get:PartitionData.search_responses)
  return _internal_search_responses(index);
}
inline ::SearchResponse* PartitionData::_internal_add_search_responses() {
  return _impl_.search_responses_.Add();
}
inline ::SearchResponse* PartitionData::add_search_responses() {
  ::SearchResponse* _add = _internal_add_search_responses();
  // @@protoc_insertion_point(field_add:PartitionData.search_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchResponse >&
PartitionData::search_responses() const {
  // @@protoc_insertion_point(field_list:PartitionData.search_responses)
  return _impl_.search_responses_;
}

// int32 del_num = 11;
inline void PartitionData::clear_del_num() {
  _impl_.del_num_ = 0;
}
inline int32_t PartitionData::_internal_del_num() const {
  return _impl_.del_num_;
}
inline int32_t PartitionData::del_num() const {
  // @@protoc_insertion_point(field_get:PartitionData.del_num)
  return _internal_del_num();
}
inline void PartitionData::_internal_set_del_num(int32_t value) {
  
  _impl_.del_num_ = value;
}
inline void PartitionData::set_del_num(int32_t value) {
  _internal_set_del_num(value);
  // @@protoc_insertion_point(field_set:PartitionData.del_num)
}

// .DelByQueryeResponse del_by_query_response = 12;
inline bool PartitionData::_internal_has_del_by_query_response() const {
  return this != internal_default_instance() && _impl_.del_by_query_response_ != nullptr;
}
inline bool PartitionData::has_del_by_query_response() const {
  return _internal_has_del_by_query_response();
}
inline const ::DelByQueryeResponse& PartitionData::_internal_del_by_query_response() const {
  const ::DelByQueryeResponse* p = _impl_.del_by_query_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::DelByQueryeResponse&>(
      ::_DelByQueryeResponse_default_instance_);
}
inline const ::DelByQueryeResponse& PartitionData::del_by_query_response() const {
  // @@protoc_insertion_point(field_get:PartitionData.del_by_query_response)
  return _internal_del_by_query_response();
}
inline void PartitionData::unsafe_arena_set_allocated_del_by_query_response(
    ::DelByQueryeResponse* del_by_query_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.del_by_query_response_);
  }
  _impl_.del_by_query_response_ = del_by_query_response;
  if (del_by_query_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PartitionData.del_by_query_response)
}
inline ::DelByQueryeResponse* PartitionData::release_del_by_query_response() {
  
  ::DelByQueryeResponse* temp = _impl_.del_by_query_response_;
  _impl_.del_by_query_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DelByQueryeResponse* PartitionData::unsafe_arena_release_del_by_query_response() {
  // @@protoc_insertion_point(field_release:PartitionData.del_by_query_response)
  
  ::DelByQueryeResponse* temp = _impl_.del_by_query_response_;
  _impl_.del_by_query_response_ = nullptr;
  return temp;
}
inline ::DelByQueryeResponse* PartitionData::_internal_mutable_del_by_query_response() {
  
  if (_impl_.del_by_query_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::DelByQueryeResponse>(GetArenaForAllocation());
    _impl_.del_by_query_response_ = p;
  }
  return _impl_.del_by_query_response_;
}
inline ::DelByQueryeResponse* PartitionData::mutable_del_by_query_response() {
  ::DelByQueryeResponse* _msg = _internal_mutable_del_by_query_response();
  // @@protoc_insertion_point(field_mutable:PartitionData.del_by_query_response)
  return _msg;
}
inline void PartitionData::set_allocated_del_by_query_response(::DelByQueryeResponse* del_by_query_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.del_by_query_response_);
  }
  if (del_by_query_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(del_by_query_response));
    if (message_arena != submessage_arena) {
      del_by_query_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del_by_query_response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.del_by_query_response_ = del_by_query_response;
  // @@protoc_insertion_point(field_set_allocated:PartitionData.del_by_query_response)
}

// .IndexRequest index_request = 13;
inline bool PartitionData::_internal_has_index_request() const {
  return this != internal_default_instance() && _impl_.index_request_ != nullptr;
}
inline bool PartitionData::has_index_request() const {
  return _internal_has_index_request();
}
inline const ::IndexRequest& PartitionData::_internal_index_request() const {
  const ::IndexRequest* p = _impl_.index_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndexRequest&>(
      ::_IndexRequest_default_instance_);
}
inline const ::IndexRequest& PartitionData::index_request() const {
  // @@protoc_insertion_point(field_get:PartitionData.index_request)
  return _internal_index_request();
}
inline void PartitionData::unsafe_arena_set_allocated_index_request(
    ::IndexRequest* index_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.index_request_);
  }
  _impl_.index_request_ = index_request;
  if (index_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PartitionData.index_request)
}
inline ::IndexRequest* PartitionData::release_index_request() {
  
  ::IndexRequest* temp = _impl_.index_request_;
  _impl_.index_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IndexRequest* PartitionData::unsafe_arena_release_index_request() {
  // @@protoc_insertion_point(field_release:PartitionData.index_request)
  
  ::IndexRequest* temp = _impl_.index_request_;
  _impl_.index_request_ = nullptr;
  return temp;
}
inline ::IndexRequest* PartitionData::_internal_mutable_index_request() {
  
  if (_impl_.index_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndexRequest>(GetArenaForAllocation());
    _impl_.index_request_ = p;
  }
  return _impl_.index_request_;
}
inline ::IndexRequest* PartitionData::mutable_index_request() {
  ::IndexRequest* _msg = _internal_mutable_index_request();
  // @@protoc_insertion_point(field_mutable:PartitionData.index_request)
  return _msg;
}
inline void PartitionData::set_allocated_index_request(::IndexRequest* index_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.index_request_);
  }
  if (index_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_request));
    if (message_arena != submessage_arena) {
      index_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.index_request_ = index_request;
  // @@protoc_insertion_point(field_set_allocated:PartitionData.index_request)
}

// .IndexResponse index_response = 14;
inline bool PartitionData::_internal_has_index_response() const {
  return this != internal_default_instance() && _impl_.index_response_ != nullptr;
}
inline bool PartitionData::has_index_response() const {
  return _internal_has_index_response();
}
inline const ::IndexResponse& PartitionData::_internal_index_response() const {
  const ::IndexResponse* p = _impl_.index_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndexResponse&>(
      ::_IndexResponse_default_instance_);
}
inline const ::IndexResponse& PartitionData::index_response() const {
  // @@protoc_insertion_point(field_get:PartitionData.index_response)
  return _internal_index_response();
}
inline void PartitionData::unsafe_arena_set_allocated_index_response(
    ::IndexResponse* index_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.index_response_);
  }
  _impl_.index_response_ = index_response;
  if (index_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PartitionData.index_response)
}
inline ::IndexResponse* PartitionData::release_index_response() {
  
  ::IndexResponse* temp = _impl_.index_response_;
  _impl_.index_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IndexResponse* PartitionData::unsafe_arena_release_index_response() {
  // @@protoc_insertion_point(field_release:PartitionData.index_response)
  
  ::IndexResponse* temp = _impl_.index_response_;
  _impl_.index_response_ = nullptr;
  return temp;
}
inline ::IndexResponse* PartitionData::_internal_mutable_index_response() {
  
  if (_impl_.index_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndexResponse>(GetArenaForAllocation());
    _impl_.index_response_ = p;
  }
  return _impl_.index_response_;
}
inline ::IndexResponse* PartitionData::mutable_index_response() {
  ::IndexResponse* _msg = _internal_mutable_index_response();
  // @@protoc_insertion_point(field_mutable:PartitionData.index_response)
  return _msg;
}
inline void PartitionData::set_allocated_index_response(::IndexResponse* index_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.index_response_);
  }
  if (index_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_response));
    if (message_arena != submessage_arena) {
      index_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.index_response_ = index_response;
  // @@protoc_insertion_point(field_set_allocated:PartitionData.index_response)
}

// .QueryRequest query_request = 15;
inline bool PartitionData::_internal_has_query_request() const {
  return this != internal_default_instance() && _impl_.query_request_ != nullptr;
}
inline bool PartitionData::has_query_request() const {
  return _internal_has_query_request();
}
inline const ::QueryRequest& PartitionData::_internal_query_request() const {
  const ::QueryRequest* p = _impl_.query_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::QueryRequest&>(
      ::_QueryRequest_default_instance_);
}
inline const ::QueryRequest& PartitionData::query_request() const {
  // @@protoc_insertion_point(field_get:PartitionData.query_request)
  return _internal_query_request();
}
inline void PartitionData::unsafe_arena_set_allocated_query_request(
    ::QueryRequest* query_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_request_);
  }
  _impl_.query_request_ = query_request;
  if (query_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PartitionData.query_request)
}
inline ::QueryRequest* PartitionData::release_query_request() {
  
  ::QueryRequest* temp = _impl_.query_request_;
  _impl_.query_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QueryRequest* PartitionData::unsafe_arena_release_query_request() {
  // @@protoc_insertion_point(field_release:PartitionData.query_request)
  
  ::QueryRequest* temp = _impl_.query_request_;
  _impl_.query_request_ = nullptr;
  return temp;
}
inline ::QueryRequest* PartitionData::_internal_mutable_query_request() {
  
  if (_impl_.query_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::QueryRequest>(GetArenaForAllocation());
    _impl_.query_request_ = p;
  }
  return _impl_.query_request_;
}
inline ::QueryRequest* PartitionData::mutable_query_request() {
  ::QueryRequest* _msg = _internal_mutable_query_request();
  // @@protoc_insertion_point(field_mutable:PartitionData.query_request)
  return _msg;
}
inline void PartitionData::set_allocated_query_request(::QueryRequest* query_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_request_);
  }
  if (query_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_request));
    if (message_arena != submessage_arena) {
      query_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.query_request_ = query_request;
  // @@protoc_insertion_point(field_set_allocated:PartitionData.query_request)
}

// -------------------------------------------------------------------

// UpdateSpace

// bytes Space = 1;
inline void UpdateSpace::clear_space() {
  _impl_.space_.ClearToEmpty();
}
inline const std::string& UpdateSpace::space() const {
  // @@protoc_insertion_point(field_get:UpdateSpace.Space)
  return _internal_space();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSpace::set_space(ArgT0&& arg0, ArgT... args) {
 
 _impl_.space_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UpdateSpace.Space)
}
inline std::string* UpdateSpace::mutable_space() {
  std::string* _s = _internal_mutable_space();
  // @@protoc_insertion_point(field_mutable:UpdateSpace.Space)
  return _s;
}
inline const std::string& UpdateSpace::_internal_space() const {
  return _impl_.space_.Get();
}
inline void UpdateSpace::_internal_set_space(const std::string& value) {
  
  _impl_.space_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateSpace::_internal_mutable_space() {
  
  return _impl_.space_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateSpace::release_space() {
  // @@protoc_insertion_point(field_release:UpdateSpace.Space)
  return _impl_.space_.Release();
}
inline void UpdateSpace::set_allocated_space(std::string* space) {
  if (space != nullptr) {
    
  } else {
    
  }
  _impl_.space_.SetAllocated(space, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.space_.IsDefault()) {
    _impl_.space_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UpdateSpace.Space)
}

// uint64 version = 2;
inline void UpdateSpace::clear_version() {
  _impl_.version_ = uint64_t{0u};
}
inline uint64_t UpdateSpace::_internal_version() const {
  return _impl_.version_;
}
inline uint64_t UpdateSpace::version() const {
  // @@protoc_insertion_point(field_get:UpdateSpace.version)
  return _internal_version();
}
inline void UpdateSpace::_internal_set_version(uint64_t value) {
  
  _impl_.version_ = value;
}
inline void UpdateSpace::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:UpdateSpace.version)
}

// -------------------------------------------------------------------

// DocCmd

// .OpType type = 1;
inline void DocCmd::clear_type() {
  _impl_.type_ = 0;
}
inline ::OpType DocCmd::_internal_type() const {
  return static_cast< ::OpType >(_impl_.type_);
}
inline ::OpType DocCmd::type() const {
  // @@protoc_insertion_point(field_get:DocCmd.type)
  return _internal_type();
}
inline void DocCmd::_internal_set_type(::OpType value) {
  
  _impl_.type_ = value;
}
inline void DocCmd::set_type(::OpType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DocCmd.type)
}

// int64 version = 3;
inline void DocCmd::clear_version() {
  _impl_.version_ = int64_t{0};
}
inline int64_t DocCmd::_internal_version() const {
  return _impl_.version_;
}
inline int64_t DocCmd::version() const {
  // @@protoc_insertion_point(field_get:DocCmd.version)
  return _internal_version();
}
inline void DocCmd::_internal_set_version(int64_t value) {
  
  _impl_.version_ = value;
}
inline void DocCmd::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:DocCmd.version)
}

// uint32 slot = 5;
inline void DocCmd::clear_slot() {
  _impl_.slot_ = 0u;
}
inline uint32_t DocCmd::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t DocCmd::slot() const {
  // @@protoc_insertion_point(field_get:DocCmd.slot)
  return _internal_slot();
}
inline void DocCmd::_internal_set_slot(uint32_t value) {
  
  _impl_.slot_ = value;
}
inline void DocCmd::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:DocCmd.slot)
}

// bytes doc = 7;
inline void DocCmd::clear_doc() {
  _impl_.doc_.ClearToEmpty();
}
inline const std::string& DocCmd::doc() const {
  // @@protoc_insertion_point(field_get:DocCmd.doc)
  return _internal_doc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocCmd::set_doc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.doc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DocCmd.doc)
}
inline std::string* DocCmd::mutable_doc() {
  std::string* _s = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:DocCmd.doc)
  return _s;
}
inline const std::string& DocCmd::_internal_doc() const {
  return _impl_.doc_.Get();
}
inline void DocCmd::_internal_set_doc(const std::string& value) {
  
  _impl_.doc_.Set(value, GetArenaForAllocation());
}
inline std::string* DocCmd::_internal_mutable_doc() {
  
  return _impl_.doc_.Mutable(GetArenaForAllocation());
}
inline std::string* DocCmd::release_doc() {
  // @@protoc_insertion_point(field_release:DocCmd.doc)
  return _impl_.doc_.Release();
}
inline void DocCmd::set_allocated_doc(std::string* doc) {
  if (doc != nullptr) {
    
  } else {
    
  }
  _impl_.doc_.SetAllocated(doc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.doc_.IsDefault()) {
    _impl_.doc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DocCmd.doc)
}

// repeated bytes docs = 8;
inline int DocCmd::_internal_docs_size() const {
  return _impl_.docs_.size();
}
inline int DocCmd::docs_size() const {
  return _internal_docs_size();
}
inline void DocCmd::clear_docs() {
  _impl_.docs_.Clear();
}
inline std::string* DocCmd::add_docs() {
  std::string* _s = _internal_add_docs();
  // @@protoc_insertion_point(field_add_mutable:DocCmd.docs)
  return _s;
}
inline const std::string& DocCmd::_internal_docs(int index) const {
  return _impl_.docs_.Get(index);
}
inline const std::string& DocCmd::docs(int index) const {
  // @@protoc_insertion_point(field_get:DocCmd.docs)
  return _internal_docs(index);
}
inline std::string* DocCmd::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:DocCmd.docs)
  return _impl_.docs_.Mutable(index);
}
inline void DocCmd::set_docs(int index, const std::string& value) {
  _impl_.docs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DocCmd.docs)
}
inline void DocCmd::set_docs(int index, std::string&& value) {
  _impl_.docs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DocCmd.docs)
}
inline void DocCmd::set_docs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.docs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DocCmd.docs)
}
inline void DocCmd::set_docs(int index, const void* value, size_t size) {
  _impl_.docs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DocCmd.docs)
}
inline std::string* DocCmd::_internal_add_docs() {
  return _impl_.docs_.Add();
}
inline void DocCmd::add_docs(const std::string& value) {
  _impl_.docs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DocCmd.docs)
}
inline void DocCmd::add_docs(std::string&& value) {
  _impl_.docs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DocCmd.docs)
}
inline void DocCmd::add_docs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.docs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DocCmd.docs)
}
inline void DocCmd::add_docs(const void* value, size_t size) {
  _impl_.docs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DocCmd.docs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DocCmd::docs() const {
  // @@protoc_insertion_point(field_list:DocCmd.docs)
  return _impl_.docs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DocCmd::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:DocCmd.docs)
  return &_impl_.docs_;
}

// -------------------------------------------------------------------

// RaftCommand

// .CmdType type = 1;
inline void RaftCommand::clear_type() {
  _impl_.type_ = 0;
}
inline ::CmdType RaftCommand::_internal_type() const {
  return static_cast< ::CmdType >(_impl_.type_);
}
inline ::CmdType RaftCommand::type() const {
  // @@protoc_insertion_point(field_get:RaftCommand.type)
  return _internal_type();
}
inline void RaftCommand::_internal_set_type(::CmdType value) {
  
  _impl_.type_ = value;
}
inline void RaftCommand::set_type(::CmdType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RaftCommand.type)
}

// .DocCmd write_command = 2;
inline bool RaftCommand::_internal_has_write_command() const {
  return this != internal_default_instance() && _impl_.write_command_ != nullptr;
}
inline bool RaftCommand::has_write_command() const {
  return _internal_has_write_command();
}
inline void RaftCommand::clear_write_command() {
  if (GetArenaForAllocation() == nullptr && _impl_.write_command_ != nullptr) {
    delete _impl_.write_command_;
  }
  _impl_.write_command_ = nullptr;
}
inline const ::DocCmd& RaftCommand::_internal_write_command() const {
  const ::DocCmd* p = _impl_.write_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::DocCmd&>(
      ::_DocCmd_default_instance_);
}
inline const ::DocCmd& RaftCommand::write_command() const {
  // @@protoc_insertion_point(field_get:RaftCommand.write_command)
  return _internal_write_command();
}
inline void RaftCommand::unsafe_arena_set_allocated_write_command(
    ::DocCmd* write_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.write_command_);
  }
  _impl_.write_command_ = write_command;
  if (write_command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommand.write_command)
}
inline ::DocCmd* RaftCommand::release_write_command() {
  
  ::DocCmd* temp = _impl_.write_command_;
  _impl_.write_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DocCmd* RaftCommand::unsafe_arena_release_write_command() {
  // @@protoc_insertion_point(field_release:RaftCommand.write_command)
  
  ::DocCmd* temp = _impl_.write_command_;
  _impl_.write_command_ = nullptr;
  return temp;
}
inline ::DocCmd* RaftCommand::_internal_mutable_write_command() {
  
  if (_impl_.write_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::DocCmd>(GetArenaForAllocation());
    _impl_.write_command_ = p;
  }
  return _impl_.write_command_;
}
inline ::DocCmd* RaftCommand::mutable_write_command() {
  ::DocCmd* _msg = _internal_mutable_write_command();
  // @@protoc_insertion_point(field_mutable:RaftCommand.write_command)
  return _msg;
}
inline void RaftCommand::set_allocated_write_command(::DocCmd* write_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.write_command_;
  }
  if (write_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(write_command);
    if (message_arena != submessage_arena) {
      write_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_command, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.write_command_ = write_command;
  // @@protoc_insertion_point(field_set_allocated:RaftCommand.write_command)
}

// .UpdateSpace update_space = 3;
inline bool RaftCommand::_internal_has_update_space() const {
  return this != internal_default_instance() && _impl_.update_space_ != nullptr;
}
inline bool RaftCommand::has_update_space() const {
  return _internal_has_update_space();
}
inline void RaftCommand::clear_update_space() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_space_ != nullptr) {
    delete _impl_.update_space_;
  }
  _impl_.update_space_ = nullptr;
}
inline const ::UpdateSpace& RaftCommand::_internal_update_space() const {
  const ::UpdateSpace* p = _impl_.update_space_;
  return p != nullptr ? *p : reinterpret_cast<const ::UpdateSpace&>(
      ::_UpdateSpace_default_instance_);
}
inline const ::UpdateSpace& RaftCommand::update_space() const {
  // @@protoc_insertion_point(field_get:RaftCommand.update_space)
  return _internal_update_space();
}
inline void RaftCommand::unsafe_arena_set_allocated_update_space(
    ::UpdateSpace* update_space) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_space_);
  }
  _impl_.update_space_ = update_space;
  if (update_space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommand.update_space)
}
inline ::UpdateSpace* RaftCommand::release_update_space() {
  
  ::UpdateSpace* temp = _impl_.update_space_;
  _impl_.update_space_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UpdateSpace* RaftCommand::unsafe_arena_release_update_space() {
  // @@protoc_insertion_point(field_release:RaftCommand.update_space)
  
  ::UpdateSpace* temp = _impl_.update_space_;
  _impl_.update_space_ = nullptr;
  return temp;
}
inline ::UpdateSpace* RaftCommand::_internal_mutable_update_space() {
  
  if (_impl_.update_space_ == nullptr) {
    auto* p = CreateMaybeMessage<::UpdateSpace>(GetArenaForAllocation());
    _impl_.update_space_ = p;
  }
  return _impl_.update_space_;
}
inline ::UpdateSpace* RaftCommand::mutable_update_space() {
  ::UpdateSpace* _msg = _internal_mutable_update_space();
  // @@protoc_insertion_point(field_mutable:RaftCommand.update_space)
  return _msg;
}
inline void RaftCommand::set_allocated_update_space(::UpdateSpace* update_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.update_space_;
  }
  if (update_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_space);
    if (message_arena != submessage_arena) {
      update_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_space, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_space_ = update_space;
  // @@protoc_insertion_point(field_set_allocated:RaftCommand.update_space)
}

// -------------------------------------------------------------------

// SnapData

// bytes key = 1;
inline void SnapData::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SnapData::key() const {
  // @@protoc_insertion_point(field_get:SnapData.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapData::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnapData.key)
}
inline std::string* SnapData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:SnapData.key)
  return _s;
}
inline const std::string& SnapData::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SnapData::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SnapData::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SnapData::release_key() {
  // @@protoc_insertion_point(field_release:SnapData.key)
  return _impl_.key_.Release();
}
inline void SnapData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnapData.key)
}

// bytes value = 2;
inline void SnapData::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SnapData::value() const {
  // @@protoc_insertion_point(field_get:SnapData.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapData::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SnapData.value)
}
inline std::string* SnapData::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:SnapData.value)
  return _s;
}
inline const std::string& SnapData::_internal_value() const {
  return _impl_.value_.Get();
}
inline void SnapData::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* SnapData::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* SnapData::release_value() {
  // @@protoc_insertion_point(field_release:SnapData.value)
  return _impl_.value_.Release();
}
inline void SnapData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SnapData.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OpType>() {
  return ::OpType_descriptor();
}
template <> struct is_proto_enum< ::CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CmdType>() {
  return ::CmdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raftcmd_2eproto
