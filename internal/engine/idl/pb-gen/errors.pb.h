// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

#ifndef PROTOBUF_INCLUDED_errors_2eproto
#define PROTOBUF_INCLUDED_errors_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_errors_2eproto 

namespace protobuf_errors_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_errors_2eproto
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
namespace google {
namespace protobuf {
template<> ::Error* Arena::CreateMaybeMessage<::Error>(Arena*);
}  // namespace protobuf
}  // namespace google

enum ErrorEnum {
  SUCCESS = 0,
  INTERNAL_ERROR = 1,
  UNKNOWN_ERROR = 2,
  AUTHENTICATION_FAILED = 3,
  RECOVER = 4,
  TIMEOUT = 5,
  PARAM_ERROR = 6,
  CONFIG_ERROR = 7,
  MASTER_PS_NOT_ENOUGH_SELECT = 100,
  ROUTER_NO_PS_CLIENT = 120,
  ROUTER_CALL_PS_RPC_ERR = 121,
  PARTITION_EXIST = 140,
  PARTITION_NOT_EXIST = 141,
  PARTITION_NOT_LEADER = 142,
  PARTITION_NO_LEADER = 143,
  PARTITION_IS_INVALID = 144,
  PARTITION_IS_CLOSED = 145,
  PARTITION_RESOURCE_EXHAUSTED = 146,
  PARTITION_SERVER_NOT_EXIST = 160,
  PARTITION_SERVER_ERROR = 161,
  USER_NOT_EXIST = 180,
  DB_NOT_EXIST = 200,
  DB_EXIST = 201,
  DB_NOT_EMPTY = 202,
  SPACE_EXIST = 220,
  SPACE_NOT_EXIST = 221,
  ALIAS_NOT_EXIST = 240,
  ALIAS_EXIST = 241,
  DOCUMENT_NOT_EXIST = 260,
  PRIMARY_KEY_IS_INVALID = 261,
  FILTER_OPERATOR_TYPE_ERR = 300,
  FILTER_CONDITION_OPERATOR_TYPE_ERR = 301,
  UPSERT_INVALID_PARAMS = 400,
  DELETE_BY_QUERY_SERACH_ERR = 420,
  DELETE_BY_QUERY_SEARCH_ID_IS_0 = 421,
  DELETE_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD = 422,
  DELETE_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_VECTOR = 423,
  DELETE_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500 = 424,
  DELETE_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER = 425,
  QUERY_ENGINE_ERR = 440,
  QUERY_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500 = 441,
  QUERY_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER = 442,
  QUERY_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD = 443,
  QUERY_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_FILTER = 444,
  QUERY_RESPONSE_PARSE_ERR = 445,
  SEARCH_INVALID_PARAMS_SHOULD_HAVE_VECTOR_FIELD = 460,
  SEARCH_ENGINE_ERR = 461,
  SEARCH_RESPONSE_PARSE_ERR = 462,
  FORCE_MERGE_BUILD_INDEX_ERR = 500,
  FLUSH_ERR = 600,
  SERVICE_UNAVAILABLE = 700,
  RPC_PARAM_ERROR = 701,
  METHOD_NOT_IMPLEMENT = 702,
  CREATE_RPCCLIENT_FAILED = 703,
  CALL_RPCCLIENT_FAILED = 704,
  ErrorEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorEnum_IsValid(int value);
const ErrorEnum ErrorEnum_MIN = SUCCESS;
const ErrorEnum ErrorEnum_MAX = CALL_RPCCLIENT_FAILED;
const int ErrorEnum_ARRAYSIZE = ErrorEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorEnum_descriptor();
inline const ::std::string& ErrorEnum_Name(ErrorEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorEnum_descriptor(), value);
}
inline bool ErrorEnum_Parse(
    const ::std::string& name, ErrorEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorEnum>(
    ErrorEnum_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .ErrorEnum code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::ErrorEnum code() const;
  void set_code(::ErrorEnum value);

  // @@protoc_insertion_point(class_scope:Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errors_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Error

// .ErrorEnum code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::ErrorEnum Error::code() const {
  // @@protoc_insertion_point(field_get:Error.code)
  return static_cast< ::ErrorEnum >(code_);
}
inline void Error::set_code(::ErrorEnum value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Error.code)
}

// string msg = 2;
inline void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:Error.msg)
  return msg_.GetNoArena();
}
inline void Error::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Error.msg)
}
#if LANG_CXX11
inline void Error::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Error.msg)
}
#endif
inline void Error::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Error.msg)
}
inline void Error::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Error.msg)
}
inline ::std::string* Error::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:Error.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Error.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ErrorEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ErrorEnum>() {
  return ::ErrorEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_errors_2eproto
