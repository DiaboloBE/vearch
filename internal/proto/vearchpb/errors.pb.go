// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.5.0
// source: errors.proto

package vearchpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorEnum int32

const (
	ErrorEnum_SUCCESS                              ErrorEnum = 0
	ErrorEnum_INTERNAL_ERROR                       ErrorEnum = 1
	ErrorEnum_NAME_OR_PASSWORD                     ErrorEnum = 2
	ErrorEnum_SYSBUSY                              ErrorEnum = 3
	ErrorEnum_PARAM_ERROR                          ErrorEnum = 4
	ErrorEnum_INVALID_CFG                          ErrorEnum = 5
	ErrorEnum_TIMEOUT                              ErrorEnum = 6
	ErrorEnum_SERVICE_UNAVAILABLE                  ErrorEnum = 7
	ErrorEnum_ZONE_NOT_EXISTS                      ErrorEnum = 8
	ErrorEnum_LOCAL_ZONE_OPS_FAILED                ErrorEnum = 9
	ErrorEnum_DUP_ZONE                             ErrorEnum = 10
	ErrorEnum_DUP_DB                               ErrorEnum = 11
	ErrorEnum_INVALID_ENGINE                       ErrorEnum = 12
	ErrorEnum_DB_NOTEXISTS                         ErrorEnum = 13
	ErrorEnum_DB_Not_Empty                         ErrorEnum = 14
	ErrorEnum_DUP_SPACE                            ErrorEnum = 15
	ErrorEnum_SPACE_NOTEXISTS                      ErrorEnum = 16
	ErrorEnum_PARTITION_HAS_TASK_NOW               ErrorEnum = 17
	ErrorEnum_REPLICA_NOT_EXISTS                   ErrorEnum = 18
	ErrorEnum_DUP_REPLICA                          ErrorEnum = 19
	ErrorEnum_PARTITION_REPLICA_LEADER_NOT_DELETE  ErrorEnum = 20
	ErrorEnum_PS_NOTEXISTS                         ErrorEnum = 21
	ErrorEnum_PS_Already_Exists                    ErrorEnum = 22
	ErrorEnum_LOCAL_SPACE_OPS_FAILED               ErrorEnum = 23
	ErrorEnum_Local_PS_Ops_Failed                  ErrorEnum = 24
	ErrorEnum_GENID_FAILED                         ErrorEnum = 25
	ErrorEnum_LOCALDB_OPTFAILED                    ErrorEnum = 26
	ErrorEnum_SPACE_SCHEMA_INVALID                 ErrorEnum = 27
	ErrorEnum_RPC_GET_CLIENT_FAILED                ErrorEnum = 28
	ErrorEnum_RPC_INVALID_RESP                     ErrorEnum = 29
	ErrorEnum_RPC_INVOKE_FAILED                    ErrorEnum = 30
	ErrorEnum_RPC_PARAM_ERROR                      ErrorEnum = 31
	ErrorEnum_METHOD_NOT_IMPLEMENT                 ErrorEnum = 32
	ErrorEnum_USER_NOT_EXISTS                      ErrorEnum = 33
	ErrorEnum_DUP_USER                             ErrorEnum = 34
	ErrorEnum_USER_OPS_FAILED                      ErrorEnum = 35
	ErrorEnum_AUTHENTICATION_FAILED                ErrorEnum = 36
	ErrorEnum_REGION_NOT_EXISTS                    ErrorEnum = 37
	ErrorEnum_MASTER_PS_CAN_NOT_SELECT             ErrorEnum = 38
	ErrorEnum_MASTER_PS_NOT_ENOUGH_SELECT          ErrorEnum = 39
	ErrorEnum_PARTITION_DUPLICATE                  ErrorEnum = 40
	ErrorEnum_PARTITION_NOT_EXIST                  ErrorEnum = 41
	ErrorEnum_PARTITION_NOT_LEADER                 ErrorEnum = 42
	ErrorEnum_PARTITION_NO_LEADER                  ErrorEnum = 43
	ErrorEnum_PARTITION_REQ_PARAM                  ErrorEnum = 44
	ErrorEnum_PARTITON_ENGINENAME_INVALID          ErrorEnum = 45
	ErrorEnum_UNKNOWN_PARTITION_RAFT_CMD_TYPE      ErrorEnum = 46
	ErrorEnum_MASTER_SERVER_IS_NOT_RUNNING         ErrorEnum = 47
	ErrorEnum_PARTITION_IS_INVALID                 ErrorEnum = 48
	ErrorEnum_PARTITION_IS_CLOSED                  ErrorEnum = 49
	ErrorEnum_DOCUMENT_NOT_EXIST                   ErrorEnum = 50
	ErrorEnum_DOCUMENT_EXIST                       ErrorEnum = 51
	ErrorEnum_DOCUMENT_MUST_HAS_SOURCE             ErrorEnum = 52
	ErrorEnum_PULL_OUT_VERSION_NOT_MATCH           ErrorEnum = 53
	ErrorEnum_FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE ErrorEnum = 54
	ErrorEnum_ROUTER_NO_PS_CLIENT                  ErrorEnum = 55
	ErrorEnum_ROUTER_CALL_PS_RPC_ERR               ErrorEnum = 56
	ErrorEnum_GAMMA_SEARCH_QUERY_NUM_LESS_0        ErrorEnum = 57
	ErrorEnum_GAMMA_SEARCH_NO_CREATE_INDEX         ErrorEnum = 58
	ErrorEnum_GAMMA_SEARCH_INDEX_QUERY_ERR         ErrorEnum = 59
	ErrorEnum_GAMMA_SEARCH_OTHER_ERR               ErrorEnum = 60
	ErrorEnum_PRIMARY_IS_INVALID                   ErrorEnum = 61
	ErrorEnum_PARSING_RESULT_ERROR                 ErrorEnum = 62
	ErrorEnum_FORCE_MERGE_BUILD_INDEX_ERR          ErrorEnum = 63
	ErrorEnum_DELETE_BY_QUERY_SERACH_ERR           ErrorEnum = 64
	ErrorEnum_DELETE_BY_QUERY_SEARCH_ID_IS_0       ErrorEnum = 65
	ErrorEnum_FLUSH_ERR                            ErrorEnum = 66
	ErrorEnum_CREATE_RPCCLIENT_FAILED              ErrorEnum = 70
	ErrorEnum_CALL_RPCCLIENT_FAILED                ErrorEnum = 71
	ErrorEnum_RECOVER                              ErrorEnum = 100
	// 116-130 create space code
	// 131-145 insert data
	// 200 alias
	ErrorEnum_ALIAS_NOT_EXIST ErrorEnum = 200
	ErrorEnum_ALIAS_EXIST     ErrorEnum = 201
)

// Enum value maps for ErrorEnum.
var (
	ErrorEnum_name = map[int32]string{
		0:   "SUCCESS",
		1:   "INTERNAL_ERROR",
		2:   "NAME_OR_PASSWORD",
		3:   "SYSBUSY",
		4:   "PARAM_ERROR",
		5:   "INVALID_CFG",
		6:   "TIMEOUT",
		7:   "SERVICE_UNAVAILABLE",
		8:   "ZONE_NOT_EXISTS",
		9:   "LOCAL_ZONE_OPS_FAILED",
		10:  "DUP_ZONE",
		11:  "DUP_DB",
		12:  "INVALID_ENGINE",
		13:  "DB_NOTEXISTS",
		14:  "DB_Not_Empty",
		15:  "DUP_SPACE",
		16:  "SPACE_NOTEXISTS",
		17:  "PARTITION_HAS_TASK_NOW",
		18:  "REPLICA_NOT_EXISTS",
		19:  "DUP_REPLICA",
		20:  "PARTITION_REPLICA_LEADER_NOT_DELETE",
		21:  "PS_NOTEXISTS",
		22:  "PS_Already_Exists",
		23:  "LOCAL_SPACE_OPS_FAILED",
		24:  "Local_PS_Ops_Failed",
		25:  "GENID_FAILED",
		26:  "LOCALDB_OPTFAILED",
		27:  "SPACE_SCHEMA_INVALID",
		28:  "RPC_GET_CLIENT_FAILED",
		29:  "RPC_INVALID_RESP",
		30:  "RPC_INVOKE_FAILED",
		31:  "RPC_PARAM_ERROR",
		32:  "METHOD_NOT_IMPLEMENT",
		33:  "USER_NOT_EXISTS",
		34:  "DUP_USER",
		35:  "USER_OPS_FAILED",
		36:  "AUTHENTICATION_FAILED",
		37:  "REGION_NOT_EXISTS",
		38:  "MASTER_PS_CAN_NOT_SELECT",
		39:  "MASTER_PS_NOT_ENOUGH_SELECT",
		40:  "PARTITION_DUPLICATE",
		41:  "PARTITION_NOT_EXIST",
		42:  "PARTITION_NOT_LEADER",
		43:  "PARTITION_NO_LEADER",
		44:  "PARTITION_REQ_PARAM",
		45:  "PARTITON_ENGINENAME_INVALID",
		46:  "UNKNOWN_PARTITION_RAFT_CMD_TYPE",
		47:  "MASTER_SERVER_IS_NOT_RUNNING",
		48:  "PARTITION_IS_INVALID",
		49:  "PARTITION_IS_CLOSED",
		50:  "DOCUMENT_NOT_EXIST",
		51:  "DOCUMENT_EXIST",
		52:  "DOCUMENT_MUST_HAS_SOURCE",
		53:  "PULL_OUT_VERSION_NOT_MATCH",
		54:  "FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE",
		55:  "ROUTER_NO_PS_CLIENT",
		56:  "ROUTER_CALL_PS_RPC_ERR",
		57:  "GAMMA_SEARCH_QUERY_NUM_LESS_0",
		58:  "GAMMA_SEARCH_NO_CREATE_INDEX",
		59:  "GAMMA_SEARCH_INDEX_QUERY_ERR",
		60:  "GAMMA_SEARCH_OTHER_ERR",
		61:  "PRIMARY_IS_INVALID",
		62:  "PARSING_RESULT_ERROR",
		63:  "FORCE_MERGE_BUILD_INDEX_ERR",
		64:  "DELETE_BY_QUERY_SERACH_ERR",
		65:  "DELETE_BY_QUERY_SEARCH_ID_IS_0",
		66:  "FLUSH_ERR",
		70:  "CREATE_RPCCLIENT_FAILED",
		71:  "CALL_RPCCLIENT_FAILED",
		100: "RECOVER",
		200: "ALIAS_NOT_EXIST",
		201: "ALIAS_EXIST",
	}
	ErrorEnum_value = map[string]int32{
		"SUCCESS":                              0,
		"INTERNAL_ERROR":                       1,
		"NAME_OR_PASSWORD":                     2,
		"SYSBUSY":                              3,
		"PARAM_ERROR":                          4,
		"INVALID_CFG":                          5,
		"TIMEOUT":                              6,
		"SERVICE_UNAVAILABLE":                  7,
		"ZONE_NOT_EXISTS":                      8,
		"LOCAL_ZONE_OPS_FAILED":                9,
		"DUP_ZONE":                             10,
		"DUP_DB":                               11,
		"INVALID_ENGINE":                       12,
		"DB_NOTEXISTS":                         13,
		"DB_Not_Empty":                         14,
		"DUP_SPACE":                            15,
		"SPACE_NOTEXISTS":                      16,
		"PARTITION_HAS_TASK_NOW":               17,
		"REPLICA_NOT_EXISTS":                   18,
		"DUP_REPLICA":                          19,
		"PARTITION_REPLICA_LEADER_NOT_DELETE":  20,
		"PS_NOTEXISTS":                         21,
		"PS_Already_Exists":                    22,
		"LOCAL_SPACE_OPS_FAILED":               23,
		"Local_PS_Ops_Failed":                  24,
		"GENID_FAILED":                         25,
		"LOCALDB_OPTFAILED":                    26,
		"SPACE_SCHEMA_INVALID":                 27,
		"RPC_GET_CLIENT_FAILED":                28,
		"RPC_INVALID_RESP":                     29,
		"RPC_INVOKE_FAILED":                    30,
		"RPC_PARAM_ERROR":                      31,
		"METHOD_NOT_IMPLEMENT":                 32,
		"USER_NOT_EXISTS":                      33,
		"DUP_USER":                             34,
		"USER_OPS_FAILED":                      35,
		"AUTHENTICATION_FAILED":                36,
		"REGION_NOT_EXISTS":                    37,
		"MASTER_PS_CAN_NOT_SELECT":             38,
		"MASTER_PS_NOT_ENOUGH_SELECT":          39,
		"PARTITION_DUPLICATE":                  40,
		"PARTITION_NOT_EXIST":                  41,
		"PARTITION_NOT_LEADER":                 42,
		"PARTITION_NO_LEADER":                  43,
		"PARTITION_REQ_PARAM":                  44,
		"PARTITON_ENGINENAME_INVALID":          45,
		"UNKNOWN_PARTITION_RAFT_CMD_TYPE":      46,
		"MASTER_SERVER_IS_NOT_RUNNING":         47,
		"PARTITION_IS_INVALID":                 48,
		"PARTITION_IS_CLOSED":                  49,
		"DOCUMENT_NOT_EXIST":                   50,
		"DOCUMENT_EXIST":                       51,
		"DOCUMENT_MUST_HAS_SOURCE":             52,
		"PULL_OUT_VERSION_NOT_MATCH":           53,
		"FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE": 54,
		"ROUTER_NO_PS_CLIENT":                  55,
		"ROUTER_CALL_PS_RPC_ERR":               56,
		"GAMMA_SEARCH_QUERY_NUM_LESS_0":        57,
		"GAMMA_SEARCH_NO_CREATE_INDEX":         58,
		"GAMMA_SEARCH_INDEX_QUERY_ERR":         59,
		"GAMMA_SEARCH_OTHER_ERR":               60,
		"PRIMARY_IS_INVALID":                   61,
		"PARSING_RESULT_ERROR":                 62,
		"FORCE_MERGE_BUILD_INDEX_ERR":          63,
		"DELETE_BY_QUERY_SERACH_ERR":           64,
		"DELETE_BY_QUERY_SEARCH_ID_IS_0":       65,
		"FLUSH_ERR":                            66,
		"CREATE_RPCCLIENT_FAILED":              70,
		"CALL_RPCCLIENT_FAILED":                71,
		"RECOVER":                              100,
		"ALIAS_NOT_EXIST":                      200,
		"ALIAS_EXIST":                          201,
	}
)

func (x ErrorEnum) Enum() *ErrorEnum {
	p := new(ErrorEnum)
	*p = x
	return p
}

func (x ErrorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorEnum) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[0]
}

func (x ErrorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorEnum.Descriptor instead.
func (ErrorEnum) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

type SearchResultCode int32

const (
	SearchResultCode_SEARCH_SUCCESS    SearchResultCode = 0
	SearchResultCode_INDEX_NOT_BUILDED SearchResultCode = 1
	SearchResultCode_SEARCH_ERROR      SearchResultCode = 2 // show all kinds of errors in detail
)

// Enum value maps for SearchResultCode.
var (
	SearchResultCode_name = map[int32]string{
		0: "SEARCH_SUCCESS",
		1: "INDEX_NOT_BUILDED",
		2: "SEARCH_ERROR",
	}
	SearchResultCode_value = map[string]int32{
		"SEARCH_SUCCESS":    0,
		"INDEX_NOT_BUILDED": 1,
		"SEARCH_ERROR":      2,
	}
)

func (x SearchResultCode) Enum() *SearchResultCode {
	p := new(SearchResultCode)
	*p = x
	return p
}

func (x SearchResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[1].Descriptor()
}

func (SearchResultCode) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[1]
}

func (x SearchResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchResultCode.Descriptor instead.
func (SearchResultCode) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{1}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ErrorEnum `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorEnum" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorEnum {
	if x != nil {
		return x.Code
	}
	return ErrorEnum_SUCCESS
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_errors_proto protoreflect.FileDescriptor

var file_errors_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0xe4, 0x0d, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x59, 0x53, 0x42, 0x55, 0x53, 0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10,
	0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x55, 0x50, 0x5f, 0x44, 0x42, 0x10, 0x0b, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10,
	0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x5f, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x4e, 0x4f, 0x57, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x12, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x13, 0x12, 0x27,
	0x0a, 0x23, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x53, 0x5f,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x16,
	0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x4f, 0x50, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x50, 0x53, 0x5f, 0x4f, 0x70, 0x73, 0x5f, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x44, 0x42, 0x5f, 0x4f, 0x50, 0x54, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x50, 0x43, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x50, 0x43,
	0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1e,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x50, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x20, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x24, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x25, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x26, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x28, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x10, 0x2a, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x2b, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x10, 0x2c, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x2d, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x46,
	0x54, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x2f, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x31, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x32, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x33, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x34, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x35, 0x12, 0x28, 0x0a, 0x24, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f,
	0x4b, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x47,
	0x49, 0x4e, 0x45, 0x10, 0x36, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x5f, 0x50, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x37, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x53,
	0x5f, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x38, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x41,
	0x4d, 0x4d, 0x41, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x30, 0x10, 0x39, 0x12, 0x20, 0x0a,
	0x1c, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4e, 0x4f,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x3a, 0x12,
	0x20, 0x0a, 0x1c, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x3b, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3c, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x3e, 0x12,
	0x1f, 0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3f,
	0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x41, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x40,
	0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53,
	0x5f, 0x30, 0x10, 0x41, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x42, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x50,
	0x43, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x46,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x47, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x64, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x4c, 0x49, 0x41,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x10,
	0x0a, 0x0b, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xc9, 0x01,
	0x2a, 0x4f, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x42, 0x0e, 0x48, 0x01, 0x5a, 0x0a, 0x2e, 0x2f, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_errors_proto_rawDescOnce sync.Once
	file_errors_proto_rawDescData = file_errors_proto_rawDesc
)

func file_errors_proto_rawDescGZIP() []byte {
	file_errors_proto_rawDescOnce.Do(func() {
		file_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_errors_proto_rawDescData)
	})
	return file_errors_proto_rawDescData
}

var file_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_errors_proto_goTypes = []interface{}{
	(ErrorEnum)(0),        // 0: ErrorEnum
	(SearchResultCode)(0), // 1: SearchResultCode
	(*Error)(nil),         // 2: Error
}
var file_errors_proto_depIdxs = []int32{
	0, // 0: Error.code:type_name -> ErrorEnum
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_errors_proto_init() }
func file_errors_proto_init() {
	if File_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_errors_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errors_proto_goTypes,
		DependencyIndexes: file_errors_proto_depIdxs,
		EnumInfos:         file_errors_proto_enumTypes,
		MessageInfos:      file_errors_proto_msgTypes,
	}.Build()
	File_errors_proto = out.File
	file_errors_proto_rawDesc = nil
	file_errors_proto_goTypes = nil
	file_errors_proto_depIdxs = nil
}
