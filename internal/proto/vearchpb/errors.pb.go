// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.6.1
// source: errors.proto

package vearchpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorEnum int32

const (
	ErrorEnum_SUCCESS ErrorEnum = 0
	// cluster 1-99
	ErrorEnum_INTERNAL_ERROR              ErrorEnum = 1
	ErrorEnum_UNKNOWN_ERROR               ErrorEnum = 2
	ErrorEnum_PARTITION_DUPLICATE         ErrorEnum = 3
	ErrorEnum_PARTITION_NOT_EXIST         ErrorEnum = 4
	ErrorEnum_PARTITION_NOT_LEADER        ErrorEnum = 5
	ErrorEnum_PARTITION_NO_LEADER         ErrorEnum = 6
	ErrorEnum_PARTITION_IS_INVALID        ErrorEnum = 7
	ErrorEnum_PARTITION_IS_CLOSED         ErrorEnum = 8
	ErrorEnum_MASTER_PS_NOT_ENOUGH_SELECT ErrorEnum = 9
	ErrorEnum_USER_NOT_EXISTS             ErrorEnum = 10
	ErrorEnum_AUTHENTICATION_FAILED       ErrorEnum = 11
	ErrorEnum_SERVICE_UNAVAILABLE         ErrorEnum = 12
	ErrorEnum_RPC_PARAM_ERROR             ErrorEnum = 13
	ErrorEnum_METHOD_NOT_IMPLEMENT        ErrorEnum = 14
	ErrorEnum_ROUTER_NO_PS_CLIENT         ErrorEnum = 15
	ErrorEnum_ROUTER_CALL_PS_RPC_ERR      ErrorEnum = 16
	ErrorEnum_RECOVER                     ErrorEnum = 17
	ErrorEnum_CREATE_RPCCLIENT_FAILED     ErrorEnum = 18
	ErrorEnum_CALL_RPCCLIENT_FAILED       ErrorEnum = 19
	// schema 100-199
	ErrorEnum_DB_NOTEXISTS         ErrorEnum = 100
	ErrorEnum_DB_Not_Empty         ErrorEnum = 101
	ErrorEnum_DUP_SPACE            ErrorEnum = 102
	ErrorEnum_PARAM_ERROR          ErrorEnum = 103
	ErrorEnum_TIMEOUT              ErrorEnum = 104
	ErrorEnum_SPACE_NOTEXISTS      ErrorEnum = 105
	ErrorEnum_PS_NOTEXISTS         ErrorEnum = 106
	ErrorEnum_DOCUMENT_NOT_EXIST   ErrorEnum = 107
	ErrorEnum_PRIMARY_IS_INVALID   ErrorEnum = 108
	ErrorEnum_PARSING_RESULT_ERROR ErrorEnum = 109
	ErrorEnum_FLUSH_ERR            ErrorEnum = 111
	ErrorEnum_ALIAS_NOT_EXIST      ErrorEnum = 112
	ErrorEnum_ALIAS_EXIST          ErrorEnum = 113
	// document 200-299
	// document upsert 200-219
	ErrorEnum_UPSERT_INVALID_PARAMS ErrorEnum = 200
	// document delete 220-239
	ErrorEnum_DELETE_BY_QUERY_SERACH_ERR                                      ErrorEnum = 220
	ErrorEnum_DELETE_BY_QUERY_SEARCH_ID_IS_0                                  ErrorEnum = 221
	ErrorEnum_DELETE_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD              ErrorEnum = 222
	ErrorEnum_DELETE_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_VECTOR              ErrorEnum = 223
	ErrorEnum_DELETE_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500         ErrorEnum = 224
	ErrorEnum_DELETE_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER ErrorEnum = 225
	// document query 240-259
	ErrorEnum_QUERY_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500         ErrorEnum = 240
	ErrorEnum_QUERY_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER ErrorEnum = 241
	ErrorEnum_QUERY_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD              ErrorEnum = 242
	ErrorEnum_QUERY_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_FILTER              ErrorEnum = 243
	// document search 260-299
	ErrorEnum_SEARCH_INVALID_PARAMS_SHOULD_HAVE_VECTOR_FIELD ErrorEnum = 260
	ErrorEnum_SEARCH_ERROR                                   ErrorEnum = 261
	ErrorEnum_GAMMA_SEARCH_QUERY_NUM_LESS_0                  ErrorEnum = 262
	ErrorEnum_GAMMA_SEARCH_NO_CREATE_INDEX                   ErrorEnum = 263
	ErrorEnum_GAMMA_SEARCH_INDEX_QUERY_ERR                   ErrorEnum = 264
	ErrorEnum_GAMMA_SEARCH_OTHER_ERR                         ErrorEnum = 265
	// index 300-399
	ErrorEnum_FORCE_MERGE_BUILD_INDEX_ERR ErrorEnum = 301
)

// Enum value maps for ErrorEnum.
var (
	ErrorEnum_name = map[int32]string{
		0:   "SUCCESS",
		1:   "INTERNAL_ERROR",
		2:   "UNKNOWN_ERROR",
		3:   "PARTITION_DUPLICATE",
		4:   "PARTITION_NOT_EXIST",
		5:   "PARTITION_NOT_LEADER",
		6:   "PARTITION_NO_LEADER",
		7:   "PARTITION_IS_INVALID",
		8:   "PARTITION_IS_CLOSED",
		9:   "MASTER_PS_NOT_ENOUGH_SELECT",
		10:  "USER_NOT_EXISTS",
		11:  "AUTHENTICATION_FAILED",
		12:  "SERVICE_UNAVAILABLE",
		13:  "RPC_PARAM_ERROR",
		14:  "METHOD_NOT_IMPLEMENT",
		15:  "ROUTER_NO_PS_CLIENT",
		16:  "ROUTER_CALL_PS_RPC_ERR",
		17:  "RECOVER",
		18:  "CREATE_RPCCLIENT_FAILED",
		19:  "CALL_RPCCLIENT_FAILED",
		100: "DB_NOTEXISTS",
		101: "DB_Not_Empty",
		102: "DUP_SPACE",
		103: "PARAM_ERROR",
		104: "TIMEOUT",
		105: "SPACE_NOTEXISTS",
		106: "PS_NOTEXISTS",
		107: "DOCUMENT_NOT_EXIST",
		108: "PRIMARY_IS_INVALID",
		109: "PARSING_RESULT_ERROR",
		111: "FLUSH_ERR",
		112: "ALIAS_NOT_EXIST",
		113: "ALIAS_EXIST",
		200: "UPSERT_INVALID_PARAMS",
		220: "DELETE_BY_QUERY_SERACH_ERR",
		221: "DELETE_BY_QUERY_SEARCH_ID_IS_0",
		222: "DELETE_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD",
		223: "DELETE_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_VECTOR",
		224: "DELETE_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500",
		225: "DELETE_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER",
		240: "QUERY_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500",
		241: "QUERY_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER",
		242: "QUERY_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD",
		243: "QUERY_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_FILTER",
		260: "SEARCH_INVALID_PARAMS_SHOULD_HAVE_VECTOR_FIELD",
		261: "SEARCH_ERROR",
		262: "GAMMA_SEARCH_QUERY_NUM_LESS_0",
		263: "GAMMA_SEARCH_NO_CREATE_INDEX",
		264: "GAMMA_SEARCH_INDEX_QUERY_ERR",
		265: "GAMMA_SEARCH_OTHER_ERR",
		301: "FORCE_MERGE_BUILD_INDEX_ERR",
	}
	ErrorEnum_value = map[string]int32{
		"SUCCESS":                        0,
		"INTERNAL_ERROR":                 1,
		"UNKNOWN_ERROR":                  2,
		"PARTITION_DUPLICATE":            3,
		"PARTITION_NOT_EXIST":            4,
		"PARTITION_NOT_LEADER":           5,
		"PARTITION_NO_LEADER":            6,
		"PARTITION_IS_INVALID":           7,
		"PARTITION_IS_CLOSED":            8,
		"MASTER_PS_NOT_ENOUGH_SELECT":    9,
		"USER_NOT_EXISTS":                10,
		"AUTHENTICATION_FAILED":          11,
		"SERVICE_UNAVAILABLE":            12,
		"RPC_PARAM_ERROR":                13,
		"METHOD_NOT_IMPLEMENT":           14,
		"ROUTER_NO_PS_CLIENT":            15,
		"ROUTER_CALL_PS_RPC_ERR":         16,
		"RECOVER":                        17,
		"CREATE_RPCCLIENT_FAILED":        18,
		"CALL_RPCCLIENT_FAILED":          19,
		"DB_NOTEXISTS":                   100,
		"DB_Not_Empty":                   101,
		"DUP_SPACE":                      102,
		"PARAM_ERROR":                    103,
		"TIMEOUT":                        104,
		"SPACE_NOTEXISTS":                105,
		"PS_NOTEXISTS":                   106,
		"DOCUMENT_NOT_EXIST":             107,
		"PRIMARY_IS_INVALID":             108,
		"PARSING_RESULT_ERROR":           109,
		"FLUSH_ERR":                      111,
		"ALIAS_NOT_EXIST":                112,
		"ALIAS_EXIST":                    113,
		"UPSERT_INVALID_PARAMS":          200,
		"DELETE_BY_QUERY_SERACH_ERR":     220,
		"DELETE_BY_QUERY_SEARCH_ID_IS_0": 221,
		"DELETE_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD":              222,
		"DELETE_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_VECTOR":              223,
		"DELETE_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500":         224,
		"DELETE_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER": 225,
		"QUERY_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500":          240,
		"QUERY_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER":  241,
		"QUERY_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD":               242,
		"QUERY_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_FILTER":               243,
		"SEARCH_INVALID_PARAMS_SHOULD_HAVE_VECTOR_FIELD":                  260,
		"SEARCH_ERROR":                  261,
		"GAMMA_SEARCH_QUERY_NUM_LESS_0": 262,
		"GAMMA_SEARCH_NO_CREATE_INDEX":  263,
		"GAMMA_SEARCH_INDEX_QUERY_ERR":  264,
		"GAMMA_SEARCH_OTHER_ERR":        265,
		"FORCE_MERGE_BUILD_INDEX_ERR":   301,
	}
)

func (x ErrorEnum) Enum() *ErrorEnum {
	p := new(ErrorEnum)
	*p = x
	return p
}

func (x ErrorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorEnum) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[0]
}

func (x ErrorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorEnum.Descriptor instead.
func (ErrorEnum) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ErrorEnum `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorEnum" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorEnum {
	if x != nil {
		return x.Code
	}
	return ErrorEnum_SUCCESS
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_errors_proto protoreflect.FileDescriptor

var file_errors_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0x9c, 0x0c, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x50, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x53, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x53, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x10, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x11, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x50, 0x43, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4e,
	0x6f, 0x74, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55,
	0x50, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x66, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x68, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x69, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x6a, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x6b, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x6c, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x55, 0x53,
	0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6f, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x49, 0x41, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x70, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x71, 0x12, 0x1a, 0x0a,
	0x15, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52,
	0x41, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xdc, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x30, 0x10, 0xdd, 0x01, 0x12,
	0x37, 0x0a, 0x32, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0xde, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x53, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xdf,
	0x01, 0x12, 0x3c, 0x0a, 0x37, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x5f, 0x35, 0x30, 0x30, 0x10, 0xe0, 0x01, 0x12,
	0x44, 0x0a, 0x3f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f,
	0x48, 0x41, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x10, 0xe1, 0x01, 0x12, 0x3b, 0x0a, 0x36, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x5f, 0x35, 0x30, 0x30, 0x10,
	0xf0, 0x01, 0x12, 0x43, 0x0a, 0x3e, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c,
	0x44, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x10, 0xf1, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f,
	0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f,
	0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0xf2, 0x01, 0x12,
	0x36, 0x0a, 0x31, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x10, 0xf3, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53,
	0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x56, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x84, 0x02, 0x12, 0x11, 0x0a, 0x0c,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x85, 0x02, 0x12,
	0x22, 0x0a, 0x1d, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x30,
	0x10, 0x86, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x10, 0x87, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x41, 0x4d, 0x4d, 0x41, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x88, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x41, 0x4d,
	0x4d, 0x41, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x89, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xad, 0x02, 0x42, 0x0e, 0x48, 0x01, 0x5a, 0x0a, 0x2e, 0x2f,
	0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_errors_proto_rawDescOnce sync.Once
	file_errors_proto_rawDescData = file_errors_proto_rawDesc
)

func file_errors_proto_rawDescGZIP() []byte {
	file_errors_proto_rawDescOnce.Do(func() {
		file_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_errors_proto_rawDescData)
	})
	return file_errors_proto_rawDescData
}

var file_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_errors_proto_goTypes = []interface{}{
	(ErrorEnum)(0), // 0: ErrorEnum
	(*Error)(nil),  // 1: Error
}
var file_errors_proto_depIdxs = []int32{
	0, // 0: Error.code:type_name -> ErrorEnum
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_errors_proto_init() }
func file_errors_proto_init() {
	if File_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_errors_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errors_proto_goTypes,
		DependencyIndexes: file_errors_proto_depIdxs,
		EnumInfos:         file_errors_proto_enumTypes,
		MessageInfos:      file_errors_proto_msgTypes,
	}.Build()
	File_errors_proto = out.File
	file_errors_proto_rawDesc = nil
	file_errors_proto_goTypes = nil
	file_errors_proto_depIdxs = nil
}
