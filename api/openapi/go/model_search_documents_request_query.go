/*
Vearch Database API

API for sending dynamic records to the Vearch database.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vearch_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchDocumentsRequestQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDocumentsRequestQuery{}

// SearchDocumentsRequestQuery struct for SearchDocumentsRequestQuery
type SearchDocumentsRequestQuery struct {
	Vector []SearchDocumentsRequestQueryVectorInner `json:"vector"`
	Filter []map[string]interface{} `json:"filter,omitempty"`
}

type _SearchDocumentsRequestQuery SearchDocumentsRequestQuery

// NewSearchDocumentsRequestQuery instantiates a new SearchDocumentsRequestQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDocumentsRequestQuery(vector []SearchDocumentsRequestQueryVectorInner) *SearchDocumentsRequestQuery {
	this := SearchDocumentsRequestQuery{}
	this.Vector = vector
	return &this
}

// NewSearchDocumentsRequestQueryWithDefaults instantiates a new SearchDocumentsRequestQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDocumentsRequestQueryWithDefaults() *SearchDocumentsRequestQuery {
	this := SearchDocumentsRequestQuery{}
	return &this
}

// GetVector returns the Vector field value
func (o *SearchDocumentsRequestQuery) GetVector() []SearchDocumentsRequestQueryVectorInner {
	if o == nil {
		var ret []SearchDocumentsRequestQueryVectorInner
		return ret
	}

	return o.Vector
}

// GetVectorOk returns a tuple with the Vector field value
// and a boolean to check if the value has been set.
func (o *SearchDocumentsRequestQuery) GetVectorOk() ([]SearchDocumentsRequestQueryVectorInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vector, true
}

// SetVector sets field value
func (o *SearchDocumentsRequestQuery) SetVector(v []SearchDocumentsRequestQueryVectorInner) {
	o.Vector = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SearchDocumentsRequestQuery) GetFilter() []map[string]interface{} {
	if o == nil || IsNil(o.Filter) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDocumentsRequestQuery) GetFilterOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SearchDocumentsRequestQuery) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []map[string]interface{} and assigns it to the Filter field.
func (o *SearchDocumentsRequestQuery) SetFilter(v []map[string]interface{}) {
	o.Filter = v
}

func (o SearchDocumentsRequestQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDocumentsRequestQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vector"] = o.Vector
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

func (o *SearchDocumentsRequestQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vector",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchDocumentsRequestQuery := _SearchDocumentsRequestQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchDocumentsRequestQuery)

	if err != nil {
		return err
	}

	*o = SearchDocumentsRequestQuery(varSearchDocumentsRequestQuery)

	return err
}

type NullableSearchDocumentsRequestQuery struct {
	value *SearchDocumentsRequestQuery
	isSet bool
}

func (v NullableSearchDocumentsRequestQuery) Get() *SearchDocumentsRequestQuery {
	return v.value
}

func (v *NullableSearchDocumentsRequestQuery) Set(val *SearchDocumentsRequestQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDocumentsRequestQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDocumentsRequestQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDocumentsRequestQuery(val *SearchDocumentsRequestQuery) *NullableSearchDocumentsRequestQuery {
	return &NullableSearchDocumentsRequestQuery{value: val, isSet: true}
}

func (v NullableSearchDocumentsRequestQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDocumentsRequestQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


