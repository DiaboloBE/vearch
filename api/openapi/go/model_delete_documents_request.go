/*
Vearch Database API

API for sending dynamic records to the Vearch database.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vearch_client

import (
	"encoding/json"
)

// checks if the DeleteDocumentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteDocumentsRequest{}

// DeleteDocumentsRequest struct for DeleteDocumentsRequest
type DeleteDocumentsRequest struct {
	DbName *string `json:"db_name,omitempty"`
	SpaceName *string `json:"space_name,omitempty"`
	Query *DeleteDocumentsRequestQuery `json:"query,omitempty"`
}

// NewDeleteDocumentsRequest instantiates a new DeleteDocumentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteDocumentsRequest() *DeleteDocumentsRequest {
	this := DeleteDocumentsRequest{}
	return &this
}

// NewDeleteDocumentsRequestWithDefaults instantiates a new DeleteDocumentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteDocumentsRequestWithDefaults() *DeleteDocumentsRequest {
	this := DeleteDocumentsRequest{}
	return &this
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *DeleteDocumentsRequest) GetDbName() string {
	if o == nil || IsNil(o.DbName) {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDocumentsRequest) GetDbNameOk() (*string, bool) {
	if o == nil || IsNil(o.DbName) {
		return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *DeleteDocumentsRequest) HasDbName() bool {
	if o != nil && !IsNil(o.DbName) {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *DeleteDocumentsRequest) SetDbName(v string) {
	o.DbName = &v
}

// GetSpaceName returns the SpaceName field value if set, zero value otherwise.
func (o *DeleteDocumentsRequest) GetSpaceName() string {
	if o == nil || IsNil(o.SpaceName) {
		var ret string
		return ret
	}
	return *o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDocumentsRequest) GetSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceName) {
		return nil, false
	}
	return o.SpaceName, true
}

// HasSpaceName returns a boolean if a field has been set.
func (o *DeleteDocumentsRequest) HasSpaceName() bool {
	if o != nil && !IsNil(o.SpaceName) {
		return true
	}

	return false
}

// SetSpaceName gets a reference to the given string and assigns it to the SpaceName field.
func (o *DeleteDocumentsRequest) SetSpaceName(v string) {
	o.SpaceName = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DeleteDocumentsRequest) GetQuery() DeleteDocumentsRequestQuery {
	if o == nil || IsNil(o.Query) {
		var ret DeleteDocumentsRequestQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDocumentsRequest) GetQueryOk() (*DeleteDocumentsRequestQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DeleteDocumentsRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given DeleteDocumentsRequestQuery and assigns it to the Query field.
func (o *DeleteDocumentsRequest) SetQuery(v DeleteDocumentsRequestQuery) {
	o.Query = &v
}

func (o DeleteDocumentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteDocumentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbName) {
		toSerialize["db_name"] = o.DbName
	}
	if !IsNil(o.SpaceName) {
		toSerialize["space_name"] = o.SpaceName
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableDeleteDocumentsRequest struct {
	value *DeleteDocumentsRequest
	isSet bool
}

func (v NullableDeleteDocumentsRequest) Get() *DeleteDocumentsRequest {
	return v.value
}

func (v *NullableDeleteDocumentsRequest) Set(val *DeleteDocumentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteDocumentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteDocumentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteDocumentsRequest(val *DeleteDocumentsRequest) *NullableDeleteDocumentsRequest {
	return &NullableDeleteDocumentsRequest{value: val, isSet: true}
}

func (v NullableDeleteDocumentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteDocumentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


