/*
Vearch Database API

API for sending dynamic records to the Vearch database.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vearch_client

import (
	"encoding/json"
)

// checks if the DeleteDocuments200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteDocuments200Response{}

// DeleteDocuments200Response struct for DeleteDocuments200Response
type DeleteDocuments200Response struct {
	Status *string `json:"status,omitempty"`
	ErrorMessage NullableString `json:"error_message,omitempty"`
}

// NewDeleteDocuments200Response instantiates a new DeleteDocuments200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteDocuments200Response() *DeleteDocuments200Response {
	this := DeleteDocuments200Response{}
	return &this
}

// NewDeleteDocuments200ResponseWithDefaults instantiates a new DeleteDocuments200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteDocuments200ResponseWithDefaults() *DeleteDocuments200Response {
	this := DeleteDocuments200Response{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeleteDocuments200Response) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDocuments200Response) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeleteDocuments200Response) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeleteDocuments200Response) SetStatus(v string) {
	o.Status = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteDocuments200Response) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteDocuments200Response) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *DeleteDocuments200Response) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *DeleteDocuments200Response) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *DeleteDocuments200Response) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *DeleteDocuments200Response) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o DeleteDocuments200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteDocuments200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["error_message"] = o.ErrorMessage.Get()
	}
	return toSerialize, nil
}

type NullableDeleteDocuments200Response struct {
	value *DeleteDocuments200Response
	isSet bool
}

func (v NullableDeleteDocuments200Response) Get() *DeleteDocuments200Response {
	return v.value
}

func (v *NullableDeleteDocuments200Response) Set(val *DeleteDocuments200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteDocuments200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteDocuments200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteDocuments200Response(val *DeleteDocuments200Response) *NullableDeleteDocuments200Response {
	return &NullableDeleteDocuments200Response{value: val, isSet: true}
}

func (v NullableDeleteDocuments200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteDocuments200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


