/*
Vearch Database API

API for sending dynamic records to the Vearch database.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vearch_client

import (
	"encoding/json"
)

// checks if the UpsertDefaultResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertDefaultResponse{}

// UpsertDefaultResponse struct for UpsertDefaultResponse
type UpsertDefaultResponse struct {
	Error *string `json:"error,omitempty"`
}

// NewUpsertDefaultResponse instantiates a new UpsertDefaultResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertDefaultResponse() *UpsertDefaultResponse {
	this := UpsertDefaultResponse{}
	return &this
}

// NewUpsertDefaultResponseWithDefaults instantiates a new UpsertDefaultResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertDefaultResponseWithDefaults() *UpsertDefaultResponse {
	this := UpsertDefaultResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UpsertDefaultResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertDefaultResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UpsertDefaultResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *UpsertDefaultResponse) SetError(v string) {
	o.Error = &v
}

func (o UpsertDefaultResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertDefaultResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableUpsertDefaultResponse struct {
	value *UpsertDefaultResponse
	isSet bool
}

func (v NullableUpsertDefaultResponse) Get() *UpsertDefaultResponse {
	return v.value
}

func (v *NullableUpsertDefaultResponse) Set(val *UpsertDefaultResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertDefaultResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertDefaultResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertDefaultResponse(val *UpsertDefaultResponse) *NullableUpsertDefaultResponse {
	return &NullableUpsertDefaultResponse{value: val, isSet: true}
}

func (v NullableUpsertDefaultResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertDefaultResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


