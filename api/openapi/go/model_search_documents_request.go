/*
Vearch Database API

API for sending dynamic records to the Vearch database.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vearch_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchDocumentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDocumentsRequest{}

// SearchDocumentsRequest struct for SearchDocumentsRequest
type SearchDocumentsRequest struct {
	Query SearchDocumentsRequestQuery `json:"query"`
	RetrievalParam SearchDocumentsRequestRetrievalParam `json:"retrieval_param"`
	Size int32 `json:"size"`
	DbName string `json:"db_name"`
	SpaceName string `json:"space_name"`
}

type _SearchDocumentsRequest SearchDocumentsRequest

// NewSearchDocumentsRequest instantiates a new SearchDocumentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDocumentsRequest(query SearchDocumentsRequestQuery, retrievalParam SearchDocumentsRequestRetrievalParam, size int32, dbName string, spaceName string) *SearchDocumentsRequest {
	this := SearchDocumentsRequest{}
	this.Query = query
	this.RetrievalParam = retrievalParam
	this.Size = size
	this.DbName = dbName
	this.SpaceName = spaceName
	return &this
}

// NewSearchDocumentsRequestWithDefaults instantiates a new SearchDocumentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDocumentsRequestWithDefaults() *SearchDocumentsRequest {
	this := SearchDocumentsRequest{}
	return &this
}

// GetQuery returns the Query field value
func (o *SearchDocumentsRequest) GetQuery() SearchDocumentsRequestQuery {
	if o == nil {
		var ret SearchDocumentsRequestQuery
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SearchDocumentsRequest) GetQueryOk() (*SearchDocumentsRequestQuery, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SearchDocumentsRequest) SetQuery(v SearchDocumentsRequestQuery) {
	o.Query = v
}

// GetRetrievalParam returns the RetrievalParam field value
func (o *SearchDocumentsRequest) GetRetrievalParam() SearchDocumentsRequestRetrievalParam {
	if o == nil {
		var ret SearchDocumentsRequestRetrievalParam
		return ret
	}

	return o.RetrievalParam
}

// GetRetrievalParamOk returns a tuple with the RetrievalParam field value
// and a boolean to check if the value has been set.
func (o *SearchDocumentsRequest) GetRetrievalParamOk() (*SearchDocumentsRequestRetrievalParam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetrievalParam, true
}

// SetRetrievalParam sets field value
func (o *SearchDocumentsRequest) SetRetrievalParam(v SearchDocumentsRequestRetrievalParam) {
	o.RetrievalParam = v
}

// GetSize returns the Size field value
func (o *SearchDocumentsRequest) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SearchDocumentsRequest) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SearchDocumentsRequest) SetSize(v int32) {
	o.Size = v
}

// GetDbName returns the DbName field value
func (o *SearchDocumentsRequest) GetDbName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value
// and a boolean to check if the value has been set.
func (o *SearchDocumentsRequest) GetDbNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbName, true
}

// SetDbName sets field value
func (o *SearchDocumentsRequest) SetDbName(v string) {
	o.DbName = v
}

// GetSpaceName returns the SpaceName field value
func (o *SearchDocumentsRequest) GetSpaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value
// and a boolean to check if the value has been set.
func (o *SearchDocumentsRequest) GetSpaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceName, true
}

// SetSpaceName sets field value
func (o *SearchDocumentsRequest) SetSpaceName(v string) {
	o.SpaceName = v
}

func (o SearchDocumentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDocumentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	toSerialize["retrieval_param"] = o.RetrievalParam
	toSerialize["size"] = o.Size
	toSerialize["db_name"] = o.DbName
	toSerialize["space_name"] = o.SpaceName
	return toSerialize, nil
}

func (o *SearchDocumentsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
		"retrieval_param",
		"size",
		"db_name",
		"space_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchDocumentsRequest := _SearchDocumentsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchDocumentsRequest)

	if err != nil {
		return err
	}

	*o = SearchDocumentsRequest(varSearchDocumentsRequest)

	return err
}

type NullableSearchDocumentsRequest struct {
	value *SearchDocumentsRequest
	isSet bool
}

func (v NullableSearchDocumentsRequest) Get() *SearchDocumentsRequest {
	return v.value
}

func (v *NullableSearchDocumentsRequest) Set(val *SearchDocumentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDocumentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDocumentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDocumentsRequest(val *SearchDocumentsRequest) *NullableSearchDocumentsRequest {
	return &NullableSearchDocumentsRequest{value: val, isSet: true}
}

func (v NullableSearchDocumentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDocumentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


